; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %11 = add i32 %3, 127, !dbg !11
  %12 = sdiv i32 %11, 128, !dbg !15
  %13 = add i32 %4, 31, !dbg !16
  %14 = sdiv i32 %13, 32, !dbg !18
  %15 = shl nsw i32 %14, 3, !dbg !19
  %.frozen = freeze i32 %10
  %.frozen279 = freeze i32 %15
  %16 = sdiv i32 %.frozen, %.frozen279, !dbg !20
  %17 = shl i32 %16, 3, !dbg !21
  %18 = sub i32 %12, %17, !dbg !22
  %19 = tail call i32 @llvm.smin.i32(i32 %18, i32 8), !dbg !23
  %20 = mul i32 %16, %.frozen279
  %.decomposed = sub i32 %.frozen, %20
  %.frozen280 = freeze i32 %19
  %21 = sdiv i32 %.decomposed, %.frozen280, !dbg !24
  %22 = mul i32 %21, %.frozen280
  %.decomposed281 = sub i32 %.decomposed, %22
  %23 = add i32 %.decomposed281, %17, !dbg !25
  %24 = shl i32 %23, 7, !dbg !26
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !27
  %26 = and i32 %25, 31, !dbg !27
  %27 = lshr i32 %25, 5, !dbg !27
  %28 = lshr i32 %25, 2, !dbg !27
  %29 = and i32 %28, 31, !dbg !27
  %30 = or disjoint i32 %29, 32, !dbg !27
  %31 = or disjoint i32 %29, 64, !dbg !27
  %32 = or disjoint i32 %29, 96, !dbg !27
  %33 = or disjoint i32 %24, %29, !dbg !28
  %34 = or disjoint i32 %24, %30, !dbg !28
  %35 = or disjoint i32 %24, %31, !dbg !28
  %36 = or disjoint i32 %24, %32, !dbg !28
  %37 = srem i32 %33, %3, !dbg !29
  %38 = srem i32 %34, %3, !dbg !29
  %39 = srem i32 %35, %3, !dbg !29
  %40 = srem i32 %36, %3, !dbg !29
  %41 = shl i32 %21, 5, !dbg !30
  %42 = shl i32 %25, 3, !dbg !31
  %43 = and i32 %42, 24, !dbg !31
  %44 = or disjoint i32 %41, %43, !dbg !32
  %45 = srem i32 %44, %4, !dbg !33
  %46 = mul i32 %37, %6, !dbg !34
  %47 = mul i32 %38, %6, !dbg !34
  %48 = mul i32 %39, %6, !dbg !34
  %49 = mul i32 %40, %6, !dbg !34
  %50 = add i32 %46, %43, !dbg !35
  %51 = add i32 %47, %43, !dbg !35
  %52 = add i32 %48, %43, !dbg !35
  %53 = add i32 %49, %43, !dbg !35
  %54 = sext i32 %50 to i64, !dbg !36
  %55 = getelementptr half, ptr addrspace(1) %0, i64 %54, !dbg !36
  %56 = sext i32 %51 to i64, !dbg !36
  %57 = getelementptr half, ptr addrspace(1) %0, i64 %56, !dbg !36
  %58 = sext i32 %52 to i64, !dbg !36
  %59 = getelementptr half, ptr addrspace(1) %0, i64 %58, !dbg !36
  %60 = sext i32 %53 to i64, !dbg !36
  %61 = getelementptr half, ptr addrspace(1) %0, i64 %60, !dbg !36
  %62 = mul i32 %29, %7, !dbg !37
  %63 = add i32 %45, %62, !dbg !38
  %64 = sext i32 %63 to i64, !dbg !39
  %65 = getelementptr half, ptr addrspace(1) %1, i64 %64, !dbg !39
  %66 = add i32 %5, 31, !dbg !40
  %67 = sdiv i32 %66, 32, !dbg !42
  %68 = shl i32 %7, 5, !dbg !43
  %69 = icmp sgt i32 %66, 31, !dbg !44
  %70 = icmp slt i32 %43, %5, !dbg !45
  %71 = and i1 %70, %69, !dbg !44
  %72 = shl nuw nsw i32 %29, 5, !dbg !46
  %73 = xor i32 %42, %25, !dbg !46
  %74 = and i32 %73, 24, !dbg !46
  %75 = or disjoint i32 %72, %74, !dbg !46
  %76 = zext nneg i32 %75 to i64, !dbg !46
  %77 = getelementptr half, ptr addrspace(3) @global_smem, i64 %76, !dbg !46
  %78 = shl nuw nsw i32 %30, 5, !dbg !46
  %79 = or disjoint i32 %78, %74, !dbg !46
  %80 = zext nneg i32 %79 to i64, !dbg !46
  %81 = getelementptr half, ptr addrspace(3) @global_smem, i64 %80, !dbg !46
  %82 = shl nuw nsw i32 %31, 5, !dbg !46
  %83 = or disjoint i32 %82, %74, !dbg !46
  %84 = zext nneg i32 %83 to i64, !dbg !46
  %85 = getelementptr half, ptr addrspace(3) @global_smem, i64 %84, !dbg !46
  %86 = shl nuw nsw i32 %32, 5, !dbg !46
  %87 = or disjoint i32 %86, %74, !dbg !46
  %88 = zext nneg i32 %87 to i64, !dbg !46
  %89 = getelementptr half, ptr addrspace(3) @global_smem, i64 %88, !dbg !46
  %90 = select i1 %71, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %77, ptr addrspace(1) %55, i32 %90, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %81, ptr addrspace(1) %57, i32 %90, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %85, ptr addrspace(1) %59, i32 %90, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %89, ptr addrspace(1) %61, i32 %90, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %91 = icmp slt i32 %29, %5, !dbg !47
  %92 = and i1 %91, %69, !dbg !44
  %93 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %76, !dbg !48
  %94 = select i1 %92, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %93, ptr addrspace(1) %65, i32 %94, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %95 = icmp sgt i32 %66, 63, !dbg !44
  %96 = getelementptr i8, ptr addrspace(1) %55, i64 64, !dbg !49
  %97 = getelementptr i8, ptr addrspace(1) %57, i64 64, !dbg !49
  %98 = getelementptr i8, ptr addrspace(1) %59, i64 64, !dbg !49
  %99 = getelementptr i8, ptr addrspace(1) %61, i64 64, !dbg !49
  %100 = sext i32 %68 to i64, !dbg !50
  %101 = getelementptr half, ptr addrspace(1) %65, i64 %100, !dbg !50
  %102 = add i32 %5, -32, !dbg !51
  %103 = icmp slt i32 %43, %102, !dbg !45
  %104 = and i1 %95, %103, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %105 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %76, !dbg !46
  %106 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %80, !dbg !46
  %107 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %84, !dbg !46
  %108 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %88, !dbg !46
  %109 = select i1 %104, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %105, ptr addrspace(1) %96, i32 %109, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %106, ptr addrspace(1) %97, i32 %109, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %107, ptr addrspace(1) %98, i32 %109, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %108, ptr addrspace(1) %99, i32 %109, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %110 = icmp slt i32 %29, %102, !dbg !47
  %111 = and i1 %95, %110, !dbg !44
  %112 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 26624), i64 %76, !dbg !48
  %113 = select i1 %111, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %112, ptr addrspace(1) %101, i32 %113, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %114 = icmp sgt i32 %66, 95, !dbg !44
  %115 = getelementptr i8, ptr addrspace(1) %55, i64 128, !dbg !49
  %116 = getelementptr i8, ptr addrspace(1) %57, i64 128, !dbg !49
  %117 = getelementptr i8, ptr addrspace(1) %59, i64 128, !dbg !49
  %118 = getelementptr i8, ptr addrspace(1) %61, i64 128, !dbg !49
  %119 = getelementptr half, ptr addrspace(1) %101, i64 %100, !dbg !50
  %120 = add i32 %5, -64, !dbg !51
  %121 = icmp slt i32 %43, %120, !dbg !45
  %122 = and i1 %114, %121, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %123 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %76, !dbg !46
  %124 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %80, !dbg !46
  %125 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %84, !dbg !46
  %126 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %88, !dbg !46
  %127 = select i1 %122, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %123, ptr addrspace(1) %115, i32 %127, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %124, ptr addrspace(1) %116, i32 %127, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %125, ptr addrspace(1) %117, i32 %127, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %126, ptr addrspace(1) %118, i32 %127, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %128 = icmp slt i32 %29, %120, !dbg !47
  %129 = and i1 %114, %128, !dbg !44
  %130 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 28672), i64 %76, !dbg !48
  %131 = select i1 %129, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %130, ptr addrspace(1) %119, i32 %131, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %132 = and i32 %27, 3, !dbg !46
  %133 = lshr i32 %26, 4, !dbg !46
  %134 = lshr i32 %25, 1, !dbg !46
  %135 = and i32 %134, 3, !dbg !46
  %136 = shl nuw nsw i32 %132, 4, !dbg !46
  %137 = and i32 %25, 15, !dbg !46
  %138 = or disjoint i32 %137, %136, !dbg !46
  %139 = xor i32 %133, %135, !dbg !46
  %140 = shl nuw nsw i32 %138, 5, !dbg !46
  %141 = shl nuw nsw i32 %139, 3, !dbg !46
  %142 = or disjoint i32 %140, %141, !dbg !46
  %143 = zext nneg i32 %142 to i64, !dbg !46
  %144 = getelementptr half, ptr addrspace(3) @global_smem, i64 %143, !dbg !46
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %144) #2, !dbg !46
  %146 = getelementptr i8, ptr addrspace(3) %144, i64 4096, !dbg !46
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %146) #2, !dbg !46
  %148 = shl nuw nsw i32 %137, 5, !dbg !48
  %149 = or disjoint i32 %141, %148, !dbg !48
  %150 = zext nneg i32 %149 to i64, !dbg !48
  %151 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %150, !dbg !48
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %151) #2, !dbg !48
  %153 = or disjoint i32 %133, 2, !dbg !48
  %154 = xor i32 %153, %135, !dbg !48
  %155 = shl nuw nsw i32 %154, 3, !dbg !48
  %156 = or disjoint i32 %155, %148, !dbg !48
  %157 = zext nneg i32 %156 to i64, !dbg !48
  %158 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %157, !dbg !48
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %158) #2, !dbg !48
  br i1 %69, label %.lr.ph, label %._crit_edge, !dbg !44

.lr.ph:                                           ; preds = %9
  %160 = add nsw i32 %67, -3
  %.neg159 = add nsw i32 %5, -96
  %161 = shl nuw nsw i32 %138, 5
  %162 = or disjoint i32 %161, %155
  %163 = zext nneg i32 %162 to i64
  %164 = shl nuw nsw i32 %137, 5
  %165 = or disjoint i32 %164, %141
  %166 = zext nneg i32 %165 to i64
  %167 = or disjoint i32 %164, %155
  %168 = zext nneg i32 %167 to i64
  br label %169, !dbg !44

169:                                              ; preds = %.lr.ph, %169
  %.pn = phi { i32, i32, i32, i32 } [ %159, %.lr.ph ], [ %370, %169 ]
  %.pn174 = phi { i32, i32, i32, i32 } [ %152, %.lr.ph ], [ %368, %169 ]
  %.pn178 = phi { i32, i32, i32, i32 } [ %147, %.lr.ph ], [ %366, %169 ]
  %.pn182 = phi { i32, i32, i32, i32 } [ %145, %.lr.ph ], [ %364, %169 ]
  %170 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), %.lr.ph ], [ %362, %169 ]
  %171 = phi ptr addrspace(3) [ @global_smem, %.lr.ph ], [ %359, %169 ]
  %172 = phi i32 [ 0, %.lr.ph ], [ %356, %169 ]
  %173 = phi i32 [ 2, %.lr.ph ], [ %336, %169 ]
  %.pn80164 = phi ptr addrspace(1) [ %119, %.lr.ph ], [ %333, %169 ]
  %.pn16163 = phi ptr addrspace(1) [ %118, %.lr.ph ], [ %332, %169 ]
  %.pn32162 = phi ptr addrspace(1) [ %117, %.lr.ph ], [ %331, %169 ]
  %.pn48161 = phi ptr addrspace(1) [ %116, %.lr.ph ], [ %330, %169 ]
  %.pn64160 = phi ptr addrspace(1) [ %115, %.lr.ph ], [ %329, %169 ]
  %174 = phi float [ 0.000000e+00, %.lr.ph ], [ %290, %169 ]
  %175 = phi float [ 0.000000e+00, %.lr.ph ], [ %291, %169 ]
  %176 = phi float [ 0.000000e+00, %.lr.ph ], [ %292, %169 ]
  %177 = phi float [ 0.000000e+00, %.lr.ph ], [ %293, %169 ]
  %178 = phi float [ 0.000000e+00, %.lr.ph ], [ %295, %169 ]
  %179 = phi float [ 0.000000e+00, %.lr.ph ], [ %296, %169 ]
  %180 = phi float [ 0.000000e+00, %.lr.ph ], [ %297, %169 ]
  %181 = phi float [ 0.000000e+00, %.lr.ph ], [ %298, %169 ]
  %182 = phi float [ 0.000000e+00, %.lr.ph ], [ %300, %169 ]
  %183 = phi float [ 0.000000e+00, %.lr.ph ], [ %301, %169 ]
  %184 = phi float [ 0.000000e+00, %.lr.ph ], [ %302, %169 ]
  %185 = phi float [ 0.000000e+00, %.lr.ph ], [ %303, %169 ]
  %186 = phi float [ 0.000000e+00, %.lr.ph ], [ %305, %169 ]
  %187 = phi float [ 0.000000e+00, %.lr.ph ], [ %306, %169 ]
  %188 = phi float [ 0.000000e+00, %.lr.ph ], [ %307, %169 ]
  %189 = phi float [ 0.000000e+00, %.lr.ph ], [ %308, %169 ]
  %190 = phi float [ 0.000000e+00, %.lr.ph ], [ %310, %169 ]
  %191 = phi float [ 0.000000e+00, %.lr.ph ], [ %311, %169 ]
  %192 = phi float [ 0.000000e+00, %.lr.ph ], [ %312, %169 ]
  %193 = phi float [ 0.000000e+00, %.lr.ph ], [ %313, %169 ]
  %194 = phi float [ 0.000000e+00, %.lr.ph ], [ %315, %169 ]
  %195 = phi float [ 0.000000e+00, %.lr.ph ], [ %316, %169 ]
  %196 = phi float [ 0.000000e+00, %.lr.ph ], [ %317, %169 ]
  %197 = phi float [ 0.000000e+00, %.lr.ph ], [ %318, %169 ]
  %198 = phi float [ 0.000000e+00, %.lr.ph ], [ %320, %169 ]
  %199 = phi float [ 0.000000e+00, %.lr.ph ], [ %321, %169 ]
  %200 = phi float [ 0.000000e+00, %.lr.ph ], [ %322, %169 ]
  %201 = phi float [ 0.000000e+00, %.lr.ph ], [ %323, %169 ]
  %202 = phi float [ 0.000000e+00, %.lr.ph ], [ %325, %169 ]
  %203 = phi float [ 0.000000e+00, %.lr.ph ], [ %326, %169 ]
  %204 = phi float [ 0.000000e+00, %.lr.ph ], [ %327, %169 ]
  %205 = phi float [ 0.000000e+00, %.lr.ph ], [ %328, %169 ]
  %206 = phi i32 [ 0, %.lr.ph ], [ %371, %169 ]
  %207 = extractvalue { i32, i32, i32, i32 } %.pn182, 3, !dbg !44
  %208 = extractvalue { i32, i32, i32, i32 } %.pn182, 2, !dbg !44
  %209 = extractvalue { i32, i32, i32, i32 } %.pn182, 1, !dbg !44
  %210 = extractvalue { i32, i32, i32, i32 } %.pn182, 0, !dbg !44
  %211 = extractvalue { i32, i32, i32, i32 } %.pn178, 3, !dbg !44
  %212 = extractvalue { i32, i32, i32, i32 } %.pn178, 2, !dbg !44
  %213 = extractvalue { i32, i32, i32, i32 } %.pn178, 1, !dbg !44
  %214 = extractvalue { i32, i32, i32, i32 } %.pn178, 0, !dbg !44
  %215 = extractvalue { i32, i32, i32, i32 } %.pn174, 3, !dbg !44
  %216 = extractvalue { i32, i32, i32, i32 } %.pn174, 2, !dbg !44
  %217 = extractvalue { i32, i32, i32, i32 } %.pn174, 1, !dbg !44
  %218 = extractvalue { i32, i32, i32, i32 } %.pn174, 0, !dbg !44
  %219 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !44
  %220 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !44
  %221 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !44
  %222 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !44
  %223 = icmp slt i32 %206, %160, !dbg !44
  %224 = getelementptr half, ptr addrspace(3) %171, i64 %163, !dbg !46
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %224) #2, !dbg !46
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !46
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !46
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !46
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !46
  %230 = getelementptr i8, ptr addrspace(3) %224, i64 4096, !dbg !46
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %230) #2, !dbg !46
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !46
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !46
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !46
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !46
  %236 = getelementptr i8, ptr addrspace(3) %170, i64 1024, !dbg !48
  %237 = getelementptr half, ptr addrspace(3) %236, i64 %166, !dbg !48
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %237) #2, !dbg !48
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !48
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !48
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !48
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !48
  %243 = getelementptr half, ptr addrspace(3) %236, i64 %168, !dbg !48
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %243) #2, !dbg !48
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !48
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !48
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !48
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !48
  %249 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %174, float %175, float %176, float %177, i32 %210, i32 %209, i32 %208, i32 %207, i32 %218, i32 %217) #2, !dbg !52
  %250 = extractvalue { float, float, float, float } %249, 0, !dbg !52
  %251 = extractvalue { float, float, float, float } %249, 1, !dbg !52
  %252 = extractvalue { float, float, float, float } %249, 2, !dbg !52
  %253 = extractvalue { float, float, float, float } %249, 3, !dbg !52
  %254 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %178, float %179, float %180, float %181, i32 %210, i32 %209, i32 %208, i32 %207, i32 %216, i32 %215) #2, !dbg !52
  %255 = extractvalue { float, float, float, float } %254, 0, !dbg !52
  %256 = extractvalue { float, float, float, float } %254, 1, !dbg !52
  %257 = extractvalue { float, float, float, float } %254, 2, !dbg !52
  %258 = extractvalue { float, float, float, float } %254, 3, !dbg !52
  %259 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %182, float %183, float %184, float %185, i32 %210, i32 %209, i32 %208, i32 %207, i32 %222, i32 %221) #2, !dbg !52
  %260 = extractvalue { float, float, float, float } %259, 0, !dbg !52
  %261 = extractvalue { float, float, float, float } %259, 1, !dbg !52
  %262 = extractvalue { float, float, float, float } %259, 2, !dbg !52
  %263 = extractvalue { float, float, float, float } %259, 3, !dbg !52
  %264 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %186, float %187, float %188, float %189, i32 %210, i32 %209, i32 %208, i32 %207, i32 %220, i32 %219) #2, !dbg !52
  %265 = extractvalue { float, float, float, float } %264, 0, !dbg !52
  %266 = extractvalue { float, float, float, float } %264, 1, !dbg !52
  %267 = extractvalue { float, float, float, float } %264, 2, !dbg !52
  %268 = extractvalue { float, float, float, float } %264, 3, !dbg !52
  %269 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %190, float %191, float %192, float %193, i32 %214, i32 %213, i32 %212, i32 %211, i32 %218, i32 %217) #2, !dbg !52
  %270 = extractvalue { float, float, float, float } %269, 0, !dbg !52
  %271 = extractvalue { float, float, float, float } %269, 1, !dbg !52
  %272 = extractvalue { float, float, float, float } %269, 2, !dbg !52
  %273 = extractvalue { float, float, float, float } %269, 3, !dbg !52
  %274 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %194, float %195, float %196, float %197, i32 %214, i32 %213, i32 %212, i32 %211, i32 %216, i32 %215) #2, !dbg !52
  %275 = extractvalue { float, float, float, float } %274, 0, !dbg !52
  %276 = extractvalue { float, float, float, float } %274, 1, !dbg !52
  %277 = extractvalue { float, float, float, float } %274, 2, !dbg !52
  %278 = extractvalue { float, float, float, float } %274, 3, !dbg !52
  %279 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %198, float %199, float %200, float %201, i32 %214, i32 %213, i32 %212, i32 %211, i32 %222, i32 %221) #2, !dbg !52
  %280 = extractvalue { float, float, float, float } %279, 0, !dbg !52
  %281 = extractvalue { float, float, float, float } %279, 1, !dbg !52
  %282 = extractvalue { float, float, float, float } %279, 2, !dbg !52
  %283 = extractvalue { float, float, float, float } %279, 3, !dbg !52
  %284 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %202, float %203, float %204, float %205, i32 %214, i32 %213, i32 %212, i32 %211, i32 %220, i32 %219) #2, !dbg !52
  %285 = extractvalue { float, float, float, float } %284, 0, !dbg !52
  %286 = extractvalue { float, float, float, float } %284, 1, !dbg !52
  %287 = extractvalue { float, float, float, float } %284, 2, !dbg !52
  %288 = extractvalue { float, float, float, float } %284, 3, !dbg !52
  %289 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %250, float %251, float %252, float %253, i32 %226, i32 %227, i32 %228, i32 %229, i32 %239, i32 %240) #2, !dbg !52
  %290 = extractvalue { float, float, float, float } %289, 0, !dbg !52
  %291 = extractvalue { float, float, float, float } %289, 1, !dbg !52
  %292 = extractvalue { float, float, float, float } %289, 2, !dbg !52
  %293 = extractvalue { float, float, float, float } %289, 3, !dbg !52
  %294 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %255, float %256, float %257, float %258, i32 %226, i32 %227, i32 %228, i32 %229, i32 %241, i32 %242) #2, !dbg !52
  %295 = extractvalue { float, float, float, float } %294, 0, !dbg !52
  %296 = extractvalue { float, float, float, float } %294, 1, !dbg !52
  %297 = extractvalue { float, float, float, float } %294, 2, !dbg !52
  %298 = extractvalue { float, float, float, float } %294, 3, !dbg !52
  %299 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %260, float %261, float %262, float %263, i32 %226, i32 %227, i32 %228, i32 %229, i32 %245, i32 %246) #2, !dbg !52
  %300 = extractvalue { float, float, float, float } %299, 0, !dbg !52
  %301 = extractvalue { float, float, float, float } %299, 1, !dbg !52
  %302 = extractvalue { float, float, float, float } %299, 2, !dbg !52
  %303 = extractvalue { float, float, float, float } %299, 3, !dbg !52
  %304 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %265, float %266, float %267, float %268, i32 %226, i32 %227, i32 %228, i32 %229, i32 %247, i32 %248) #2, !dbg !52
  %305 = extractvalue { float, float, float, float } %304, 0, !dbg !52
  %306 = extractvalue { float, float, float, float } %304, 1, !dbg !52
  %307 = extractvalue { float, float, float, float } %304, 2, !dbg !52
  %308 = extractvalue { float, float, float, float } %304, 3, !dbg !52
  %309 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %270, float %271, float %272, float %273, i32 %232, i32 %233, i32 %234, i32 %235, i32 %239, i32 %240) #2, !dbg !52
  %310 = extractvalue { float, float, float, float } %309, 0, !dbg !52
  %311 = extractvalue { float, float, float, float } %309, 1, !dbg !52
  %312 = extractvalue { float, float, float, float } %309, 2, !dbg !52
  %313 = extractvalue { float, float, float, float } %309, 3, !dbg !52
  %314 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %275, float %276, float %277, float %278, i32 %232, i32 %233, i32 %234, i32 %235, i32 %241, i32 %242) #2, !dbg !52
  %315 = extractvalue { float, float, float, float } %314, 0, !dbg !52
  %316 = extractvalue { float, float, float, float } %314, 1, !dbg !52
  %317 = extractvalue { float, float, float, float } %314, 2, !dbg !52
  %318 = extractvalue { float, float, float, float } %314, 3, !dbg !52
  %319 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %280, float %281, float %282, float %283, i32 %232, i32 %233, i32 %234, i32 %235, i32 %245, i32 %246) #2, !dbg !52
  %320 = extractvalue { float, float, float, float } %319, 0, !dbg !52
  %321 = extractvalue { float, float, float, float } %319, 1, !dbg !52
  %322 = extractvalue { float, float, float, float } %319, 2, !dbg !52
  %323 = extractvalue { float, float, float, float } %319, 3, !dbg !52
  %324 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %285, float %286, float %287, float %288, i32 %232, i32 %233, i32 %234, i32 %235, i32 %247, i32 %248) #2, !dbg !52
  %325 = extractvalue { float, float, float, float } %324, 0, !dbg !52
  %326 = extractvalue { float, float, float, float } %324, 1, !dbg !52
  %327 = extractvalue { float, float, float, float } %324, 2, !dbg !52
  %328 = extractvalue { float, float, float, float } %324, 3, !dbg !52
  %329 = getelementptr i8, ptr addrspace(1) %.pn64160, i64 64, !dbg !49
  %330 = getelementptr i8, ptr addrspace(1) %.pn48161, i64 64, !dbg !49
  %331 = getelementptr i8, ptr addrspace(1) %.pn32162, i64 64, !dbg !49
  %332 = getelementptr i8, ptr addrspace(1) %.pn16163, i64 64, !dbg !49
  %333 = getelementptr half, ptr addrspace(1) %.pn80164, i64 %100, !dbg !50
  %334 = add i32 %173, 1, !dbg !44
  %335 = icmp slt i32 %334, 3, !dbg !44
  %336 = select i1 %335, i32 %334, i32 0, !dbg !44
  %337 = shl i32 %206, 5, !dbg !51
  %338 = sub i32 %.neg159, %337, !dbg !51
  %339 = icmp slt i32 %43, %338, !dbg !45
  %340 = shl i32 %336, 12, !dbg !46
  %341 = sext i32 %340 to i64, !dbg !46
  %342 = getelementptr half, ptr addrspace(3) @global_smem, i64 %341, !dbg !46
  %343 = and i1 %223, %339, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %344 = getelementptr half, ptr addrspace(3) %342, i64 %76, !dbg !46
  %345 = getelementptr half, ptr addrspace(3) %342, i64 %80, !dbg !46
  %346 = getelementptr half, ptr addrspace(3) %342, i64 %84, !dbg !46
  %347 = getelementptr half, ptr addrspace(3) %342, i64 %88, !dbg !46
  %348 = select i1 %343, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %344, ptr addrspace(1) %329, i32 %348, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %345, ptr addrspace(1) %330, i32 %348, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %346, ptr addrspace(1) %331, i32 %348, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %347, ptr addrspace(1) %332, i32 %348, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %349 = icmp slt i32 %29, %338, !dbg !47
  %350 = shl i32 %336, 10, !dbg !48
  %351 = sext i32 %350 to i64, !dbg !48
  %352 = and i1 %223, %349, !dbg !44
  %gep = getelementptr half, ptr addrspace(3) %93, i64 %351, !dbg !48
  %353 = select i1 %352, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %333, i32 %353, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %354 = add i32 %172, 1, !dbg !44
  %355 = icmp slt i32 %354, 3, !dbg !44
  %356 = select i1 %355, i32 %354, i32 0, !dbg !44
  %357 = shl i32 %356, 12, !dbg !46
  %358 = sext i32 %357 to i64, !dbg !46
  %359 = getelementptr half, ptr addrspace(3) @global_smem, i64 %358, !dbg !46
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %360 = shl i32 %356, 10, !dbg !48
  %361 = sext i32 %360 to i64, !dbg !48
  %362 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %361, !dbg !48
  %363 = getelementptr half, ptr addrspace(3) %359, i64 %143, !dbg !46
  %364 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %363) #2, !dbg !46
  %365 = getelementptr i8, ptr addrspace(3) %363, i64 4096, !dbg !46
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %365) #2, !dbg !46
  %367 = getelementptr half, ptr addrspace(3) %362, i64 %150, !dbg !48
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %367) #2, !dbg !48
  %369 = getelementptr half, ptr addrspace(3) %362, i64 %157, !dbg !48
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %369) #2, !dbg !48
  %371 = add nuw nsw i32 %206, 1, !dbg !44
  %372 = icmp slt i32 %371, %67, !dbg !44
  br i1 %372, label %169, label %._crit_edge.loopexit, !dbg !44

._crit_edge.loopexit:                             ; preds = %169
  %373 = insertelement <32 x float> poison, float %290, i64 0, !dbg !53
  %374 = insertelement <32 x float> %373, float %291, i64 1, !dbg !53
  %375 = insertelement <32 x float> %374, float %292, i64 2, !dbg !53
  %376 = insertelement <32 x float> %375, float %293, i64 3, !dbg !53
  %377 = insertelement <32 x float> %376, float %295, i64 4, !dbg !53
  %378 = insertelement <32 x float> %377, float %296, i64 5, !dbg !53
  %379 = insertelement <32 x float> %378, float %297, i64 6, !dbg !53
  %380 = insertelement <32 x float> %379, float %298, i64 7, !dbg !53
  %381 = insertelement <32 x float> %380, float %300, i64 8, !dbg !53
  %382 = insertelement <32 x float> %381, float %301, i64 9, !dbg !53
  %383 = insertelement <32 x float> %382, float %302, i64 10, !dbg !53
  %384 = insertelement <32 x float> %383, float %303, i64 11, !dbg !53
  %385 = insertelement <32 x float> %384, float %305, i64 12, !dbg !53
  %386 = insertelement <32 x float> %385, float %306, i64 13, !dbg !53
  %387 = insertelement <32 x float> %386, float %307, i64 14, !dbg !53
  %388 = insertelement <32 x float> %387, float %308, i64 15, !dbg !53
  %389 = insertelement <32 x float> %388, float %310, i64 16, !dbg !53
  %390 = insertelement <32 x float> %389, float %311, i64 17, !dbg !53
  %391 = insertelement <32 x float> %390, float %312, i64 18, !dbg !53
  %392 = insertelement <32 x float> %391, float %313, i64 19, !dbg !53
  %393 = insertelement <32 x float> %392, float %315, i64 20, !dbg !53
  %394 = insertelement <32 x float> %393, float %316, i64 21, !dbg !53
  %395 = insertelement <32 x float> %394, float %317, i64 22, !dbg !53
  %396 = insertelement <32 x float> %395, float %318, i64 23, !dbg !53
  %397 = insertelement <32 x float> %396, float %320, i64 24, !dbg !53
  %398 = insertelement <32 x float> %397, float %321, i64 25, !dbg !53
  %399 = insertelement <32 x float> %398, float %322, i64 26, !dbg !53
  %400 = insertelement <32 x float> %399, float %323, i64 27, !dbg !53
  %401 = insertelement <32 x float> %400, float %325, i64 28, !dbg !53
  %402 = insertelement <32 x float> %401, float %326, i64 29, !dbg !53
  %403 = insertelement <32 x float> %402, float %327, i64 30, !dbg !53
  %404 = insertelement <32 x float> %403, float %328, i64 31, !dbg !53
  %405 = fptrunc <32 x float> %404 to <32 x half>, !dbg !53
  br label %._crit_edge, !dbg !44

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %406 = phi <32 x half> [ zeroinitializer, %9 ], [ %405, %._crit_edge.loopexit ]
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %407 = mul i32 %33, %8, !dbg !54
  %408 = mul i32 %34, %8, !dbg !54
  %409 = mul i32 %35, %8, !dbg !54
  %410 = mul i32 %36, %8, !dbg !54
  %411 = sext i32 %407 to i64, !dbg !55
  %412 = getelementptr half, ptr addrspace(1) %2, i64 %411, !dbg !55
  %413 = sext i32 %408 to i64, !dbg !55
  %414 = getelementptr half, ptr addrspace(1) %2, i64 %413, !dbg !55
  %415 = sext i32 %409 to i64, !dbg !55
  %416 = getelementptr half, ptr addrspace(1) %2, i64 %415, !dbg !55
  %417 = sext i32 %410 to i64, !dbg !55
  %418 = getelementptr half, ptr addrspace(1) %2, i64 %417, !dbg !55
  %419 = sext i32 %44 to i64, !dbg !56
  %420 = getelementptr half, ptr addrspace(1) %412, i64 %419, !dbg !56
  %421 = getelementptr half, ptr addrspace(1) %414, i64 %419, !dbg !56
  %422 = getelementptr half, ptr addrspace(1) %416, i64 %419, !dbg !56
  %423 = getelementptr half, ptr addrspace(1) %418, i64 %419, !dbg !56
  %424 = icmp slt i32 %33, %3, !dbg !57
  %425 = icmp slt i32 %34, %3, !dbg !57
  %426 = icmp slt i32 %35, %3, !dbg !57
  %427 = icmp slt i32 %36, %3, !dbg !57
  %428 = icmp slt i32 %44, %4, !dbg !58
  %429 = and i1 %424, %428, !dbg !59
  %430 = and i1 %425, %428, !dbg !59
  %431 = and i1 %426, %428, !dbg !59
  %432 = and i1 %427, %428, !dbg !59
  %433 = lshr i32 %26, 2, !dbg !60
  %434 = and i32 %25, 3, !dbg !60
  %435 = shl nuw nsw i32 %434, 1, !dbg !60
  %436 = or disjoint i32 %136, %433, !dbg !60
  %437 = mul nuw nsw i32 %436, 40, !dbg !60
  %438 = or disjoint i32 %437, %435, !dbg !60
  %439 = zext nneg i32 %438 to i64, !dbg !60
  %440 = getelementptr half, ptr addrspace(3) @global_smem, i64 %439, !dbg !60
  %441 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !60
  store <2 x half> %441, ptr addrspace(3) %440, align 4, !dbg !60
  %442 = add nuw nsw i32 %437, 320, !dbg !60
  %443 = or disjoint i32 %442, %435, !dbg !60
  %444 = zext nneg i32 %443 to i64, !dbg !60
  %445 = getelementptr half, ptr addrspace(3) @global_smem, i64 %444, !dbg !60
  %446 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !60
  store <2 x half> %446, ptr addrspace(3) %445, align 4, !dbg !60
  %447 = or disjoint i32 %435, 8, !dbg !60
  %448 = add nuw nsw i32 %437, %447, !dbg !60
  %449 = zext nneg i32 %448 to i64, !dbg !60
  %450 = getelementptr half, ptr addrspace(3) @global_smem, i64 %449, !dbg !60
  %451 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !60
  store <2 x half> %451, ptr addrspace(3) %450, align 4, !dbg !60
  %452 = add nuw nsw i32 %442, %447, !dbg !60
  %453 = zext nneg i32 %452 to i64, !dbg !60
  %454 = getelementptr half, ptr addrspace(3) @global_smem, i64 %453, !dbg !60
  %455 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !60
  store <2 x half> %455, ptr addrspace(3) %454, align 4, !dbg !60
  %456 = or disjoint i32 %435, 16, !dbg !60
  %457 = add nuw nsw i32 %437, %456, !dbg !60
  %458 = zext nneg i32 %457 to i64, !dbg !60
  %459 = getelementptr half, ptr addrspace(3) @global_smem, i64 %458, !dbg !60
  %460 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !60
  store <2 x half> %460, ptr addrspace(3) %459, align 4, !dbg !60
  %461 = add nuw nsw i32 %442, %456, !dbg !60
  %462 = zext nneg i32 %461 to i64, !dbg !60
  %463 = getelementptr half, ptr addrspace(3) @global_smem, i64 %462, !dbg !60
  %464 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !60
  store <2 x half> %464, ptr addrspace(3) %463, align 4, !dbg !60
  %465 = or disjoint i32 %435, 24, !dbg !60
  %466 = add nuw nsw i32 %437, %465, !dbg !60
  %467 = zext nneg i32 %466 to i64, !dbg !60
  %468 = getelementptr half, ptr addrspace(3) @global_smem, i64 %467, !dbg !60
  %469 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !60
  store <2 x half> %469, ptr addrspace(3) %468, align 4, !dbg !60
  %470 = add nuw nsw i32 %442, %465, !dbg !60
  %471 = zext nneg i32 %470 to i64, !dbg !60
  %472 = getelementptr half, ptr addrspace(3) @global_smem, i64 %471, !dbg !60
  %473 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !60
  store <2 x half> %473, ptr addrspace(3) %472, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %474 = shl nuw nsw i32 %132, 3, !dbg !60
  %475 = or disjoint i32 %474, %433, !dbg !60
  %476 = shl nuw nsw i32 %434, 3, !dbg !60
  %477 = mul nuw nsw i32 %475, 40, !dbg !60
  %478 = add nuw nsw i32 %477, %476, !dbg !60
  %479 = zext nneg i32 %478 to i64, !dbg !60
  %480 = getelementptr half, ptr addrspace(3) @global_smem, i64 %479, !dbg !60
  %481 = load <4 x i32>, ptr addrspace(3) %480, align 16, !dbg !60
  %482 = getelementptr i8, ptr addrspace(3) %480, i64 2560, !dbg !60
  %483 = load <4 x i32>, ptr addrspace(3) %482, align 16, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %484 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !60
  store <2 x half> %484, ptr addrspace(3) %440, align 4, !dbg !60
  %485 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !60
  store <2 x half> %485, ptr addrspace(3) %445, align 4, !dbg !60
  %486 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !60
  store <2 x half> %486, ptr addrspace(3) %450, align 4, !dbg !60
  %487 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !60
  store <2 x half> %487, ptr addrspace(3) %454, align 4, !dbg !60
  %488 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !60
  store <2 x half> %488, ptr addrspace(3) %459, align 4, !dbg !60
  %489 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !60
  store <2 x half> %489, ptr addrspace(3) %463, align 4, !dbg !60
  %490 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !60
  store <2 x half> %490, ptr addrspace(3) %468, align 4, !dbg !60
  %491 = shufflevector <32 x half> %406, <32 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !60
  store <2 x half> %491, ptr addrspace(3) %472, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %492 = load <4 x i32>, ptr addrspace(3) %480, align 16, !dbg !60
  %493 = load <4 x i32>, ptr addrspace(3) %482, align 16, !dbg !60
  %.extract = extractelement <4 x i32> %481, i64 0, !dbg !60
  %.extract130 = extractelement <4 x i32> %481, i64 1, !dbg !60
  %.extract132 = extractelement <4 x i32> %481, i64 2, !dbg !60
  %.extract134 = extractelement <4 x i32> %481, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract130, i32 %.extract132, i32 %.extract134, ptr addrspace(1) %420, i1 %429) #2, !dbg !60
  %.extract136 = extractelement <4 x i32> %483, i64 0, !dbg !60
  %.extract138 = extractelement <4 x i32> %483, i64 1, !dbg !60
  %.extract140 = extractelement <4 x i32> %483, i64 2, !dbg !60
  %.extract142 = extractelement <4 x i32> %483, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract136, i32 %.extract138, i32 %.extract140, i32 %.extract142, ptr addrspace(1) %421, i1 %430) #2, !dbg !60
  %.extract144 = extractelement <4 x i32> %492, i64 0, !dbg !60
  %.extract146 = extractelement <4 x i32> %492, i64 1, !dbg !60
  %.extract148 = extractelement <4 x i32> %492, i64 2, !dbg !60
  %.extract150 = extractelement <4 x i32> %492, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract144, i32 %.extract146, i32 %.extract148, i32 %.extract150, ptr addrspace(1) %422, i1 %431) #2, !dbg !60
  %.extract152 = extractelement <4 x i32> %493, i64 0, !dbg !60
  %.extract154 = extractelement <4 x i32> %493, i64 1, !dbg !60
  %.extract156 = extractelement <4 x i32> %493, i64 2, !dbg !60
  %.extract158 = extractelement <4 x i32> %493, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract152, i32 %.extract154, i32 %.extract156, i32 %.extract158, ptr addrspace(1) %423, i1 %432) #2, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matrix_multiplication.py", directory: "/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication")
!4 = !{ptr @matmul_kernel, !"kernel", i32 1}
!5 = !{ptr @matmul_kernel, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !3, file: !3, line: 260, type: !8, scopeLine: 260, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 292, column: 24, scope: !7)
!11 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !7, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/data_ssd1/zjy_home/frameworks/cuda/triton/python/triton/language")
!14 = !DILocation(line: 293, column: 27, scope: !7)
!15 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !17)
!17 = !DILocation(line: 294, column: 27, scope: !7)
!18 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !17)
!19 = !DILocation(line: 295, column: 38, scope: !7)
!20 = !DILocation(line: 296, column: 22, scope: !7)
!21 = !DILocation(line: 297, column: 29, scope: !7)
!22 = !DILocation(line: 299, column: 20, scope: !7)
!23 = !DILocation(line: 299, column: 33, scope: !7)
!24 = !DILocation(line: 304, column: 40, scope: !7)
!25 = !DILocation(line: 302, column: 8, scope: !7)
!26 = !DILocation(line: 313, column: 23, scope: !7)
!27 = !DILocation(line: 313, column: 51, scope: !7)
!28 = !DILocation(line: 313, column: 38, scope: !7)
!29 = !DILocation(line: 313, column: 68, scope: !7)
!30 = !DILocation(line: 314, column: 23, scope: !7)
!31 = !DILocation(line: 314, column: 51, scope: !7)
!32 = !DILocation(line: 314, column: 38, scope: !7)
!33 = !DILocation(line: 314, column: 68, scope: !7)
!34 = !DILocation(line: 316, column: 41, scope: !7)
!35 = !DILocation(line: 316, column: 53, scope: !7)
!36 = !DILocation(line: 316, column: 22, scope: !7)
!37 = !DILocation(line: 318, column: 40, scope: !7)
!38 = !DILocation(line: 318, column: 52, scope: !7)
!39 = !DILocation(line: 318, column: 22, scope: !7)
!40 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !41)
!41 = !DILocation(line: 327, column: 33, scope: !7)
!42 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !41)
!43 = !DILocation(line: 336, column: 33, scope: !7)
!44 = !DILocation(line: 327, column: 22, scope: !7)
!45 = !DILocation(line: 330, column: 51, scope: !7)
!46 = !DILocation(line: 330, column: 20, scope: !7)
!47 = !DILocation(line: 331, column: 51, scope: !7)
!48 = !DILocation(line: 331, column: 20, scope: !7)
!49 = !DILocation(line: 335, column: 18, scope: !7)
!50 = !DILocation(line: 336, column: 18, scope: !7)
!51 = !DILocation(line: 330, column: 55, scope: !7)
!52 = !DILocation(line: 333, column: 35, scope: !7)
!53 = !DILocation(line: 341, column: 23, scope: !7)
!54 = !DILocation(line: 347, column: 33, scope: !7)
!55 = !DILocation(line: 347, column: 21, scope: !7)
!56 = !DILocation(line: 347, column: 52, scope: !7)
!57 = !DILocation(line: 348, column: 33, scope: !7)
!58 = !DILocation(line: 348, column: 58, scope: !7)
!59 = !DILocation(line: 348, column: 39, scope: !7)
!60 = !DILocation(line: 349, column: 21, scope: !7)
!61 = !DILocation(line: 349, column: 4, scope: !7)
