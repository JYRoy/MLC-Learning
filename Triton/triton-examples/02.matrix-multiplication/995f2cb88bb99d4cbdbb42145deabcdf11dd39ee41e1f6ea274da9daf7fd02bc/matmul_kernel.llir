; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %11 = add i32 %3, 127, !dbg !11
  %12 = sdiv i32 %11, 128, !dbg !15
  %13 = add i32 %4, 31, !dbg !16
  %14 = sdiv i32 %13, 32, !dbg !18
  %15 = shl nsw i32 %14, 3, !dbg !19
  %.frozen = freeze i32 %10
  %.frozen378 = freeze i32 %15
  %16 = sdiv i32 %.frozen, %.frozen378, !dbg !20
  %17 = shl i32 %16, 3, !dbg !21
  %18 = sub i32 %12, %17, !dbg !22
  %19 = tail call i32 @llvm.smin.i32(i32 %18, i32 8), !dbg !23
  %20 = mul i32 %16, %.frozen378
  %.decomposed = sub i32 %.frozen, %20
  %.frozen379 = freeze i32 %19
  %21 = sdiv i32 %.decomposed, %.frozen379, !dbg !24
  %22 = mul i32 %21, %.frozen379
  %.decomposed380 = sub i32 %.decomposed, %22
  %23 = add i32 %.decomposed380, %17, !dbg !25
  %24 = shl i32 %23, 7, !dbg !26
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !27
  %26 = and i32 %25, 31, !dbg !27
  %27 = lshr i32 %25, 5, !dbg !27
  %28 = lshr i32 %25, 1, !dbg !27
  %29 = and i32 %28, 63, !dbg !27
  %30 = or disjoint i32 %29, 64, !dbg !27
  %31 = lshr i32 %25, 2, !dbg !27
  %32 = and i32 %31, 7, !dbg !27
  %33 = lshr i32 %25, 2, !dbg !27
  %34 = and i32 %33, 8, !dbg !27
  %35 = or disjoint i32 %32, %34, !dbg !27
  %36 = lshr i32 %25, 2, !dbg !27
  %37 = and i32 %36, 16, !dbg !27
  %38 = or disjoint i32 %35, %37, !dbg !27
  %39 = or disjoint i32 %24, %29, !dbg !28
  %40 = or disjoint i32 %24, %30, !dbg !28
  %41 = srem i32 %39, %3, !dbg !29
  %42 = srem i32 %40, %3, !dbg !29
  %43 = shl i32 %21, 5, !dbg !30
  %44 = and i32 %25, 1, !dbg !31
  %45 = shl i32 %25, 3, !dbg !31
  %46 = and i32 %45, 24, !dbg !31
  %47 = or disjoint i32 %43, %38, !dbg !32
  %48 = srem i32 %47, %4, !dbg !33
  %49 = mul i32 %41, %6, !dbg !34
  %50 = mul i32 %42, %6, !dbg !34
  %51 = shl nuw nsw i32 %44, 4, !dbg !35
  %52 = add i32 %49, %51, !dbg !36
  %53 = add i32 %50, %51, !dbg !36
  %54 = sext i32 %52 to i64, !dbg !37
  %55 = getelementptr i8, ptr addrspace(1) %0, i64 %54, !dbg !37
  %56 = sext i32 %53 to i64, !dbg !37
  %57 = getelementptr i8, ptr addrspace(1) %0, i64 %56, !dbg !37
  %58 = mul i32 %48, %7, !dbg !38
  %59 = add i32 %58, %46, !dbg !39
  %60 = sext i32 %59 to i64, !dbg !40
  %61 = getelementptr i8, ptr addrspace(1) %1, i64 %60, !dbg !40
  %62 = add i32 %5, 31, !dbg !41
  %63 = sdiv i32 %62, 32, !dbg !43
  %64 = tail call half asm "cvt.rz.f16.f32 $0, $1;", "=h,r"(float 0.000000e+00) #2, !dbg !44
  %65 = insertelement <2 x half> poison, half %64, i64 0, !dbg !44
  %66 = shufflevector <2 x half> %65, <2 x half> poison, <2 x i32> zeroinitializer, !dbg !44
  %67 = bitcast <2 x half> %66 to i32, !dbg !44
  %68 = tail call <4 x i8> asm "{                            \0A.reg .b32 a<2>;              \0Aand.b32 a0, $1, 0xfffefffe;  \0Aand.b32 a1, $2, 0xfffefffe;  \0Aadd.u32 a0, a0, 0x00800080;  \0Aadd.u32 a1, a1, 0x00800080;  \0Aprmt.b32 $0, a0, a1, 0x7531; \0A\09}", "=r,r,r"(i32 %67, i32 %67) #2, !dbg !44
  %69 = shufflevector <4 x i8> %68, <4 x i8> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !44
  %70 = icmp sgt i32 %62, 31, !dbg !45
  %71 = icmp slt i32 %51, %5, !dbg !46
  %72 = and i1 %71, %70, !dbg !45
  %73 = lshr i32 %25, 3, !dbg !44
  %74 = shl nuw nsw i32 %29, 5, !dbg !44
  %75 = xor i32 %73, %25, !dbg !44
  %76 = shl i32 %75, 4, !dbg !44
  %77 = and i32 %76, 16, !dbg !44
  %78 = or disjoint i32 %74, %77, !dbg !44
  %79 = zext nneg i32 %78 to i64, !dbg !44
  %80 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %79, !dbg !44
  %81 = shl nuw nsw i32 %30, 5, !dbg !44
  %82 = or disjoint i32 %81, %77, !dbg !44
  %83 = zext nneg i32 %82 to i64, !dbg !44
  %84 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %83, !dbg !44
  %85 = select i1 %72, i32 16, i32 0, !dbg !44
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %80, ptr addrspace(1) %55, i32 %85, i1 true) #2, !dbg !44
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %84, ptr addrspace(1) %57, i32 %85, i1 true) #2, !dbg !44
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !44
  %86 = icmp slt i32 %46, %5, !dbg !47
  %87 = and i1 %86, %70, !dbg !45
  %88 = shl nuw nsw i32 %38, 5, !dbg !48
  %89 = xor i32 %45, %25, !dbg !48
  %90 = and i32 %89, 16, !dbg !48
  %91 = shl nuw nsw i32 %44, 3, !dbg !48
  %92 = or disjoint i32 %90, %91, !dbg !48
  %93 = or disjoint i32 %88, %92, !dbg !48
  %94 = zext nneg i32 %93 to i64, !dbg !48
  %95 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %94, !dbg !48
  %96 = select i1 %87, i32 8, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %95, ptr addrspace(1) %61, i32 %96, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %97 = icmp sgt i32 %62, 63, !dbg !45
  %98 = getelementptr i8, ptr addrspace(1) %55, i64 32, !dbg !49
  %99 = getelementptr i8, ptr addrspace(1) %57, i64 32, !dbg !49
  %100 = getelementptr i8, ptr addrspace(1) %61, i64 32, !dbg !50
  %101 = add i32 %5, -32, !dbg !51
  %102 = icmp slt i32 %51, %101, !dbg !46
  %103 = and i1 %97, %102, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %104 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %79, !dbg !44
  %105 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %83, !dbg !44
  %106 = select i1 %103, i32 16, i32 0, !dbg !44
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %104, ptr addrspace(1) %98, i32 %106, i1 true) #2, !dbg !44
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %105, ptr addrspace(1) %99, i32 %106, i1 true) #2, !dbg !44
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !44
  %107 = icmp slt i32 %46, %101, !dbg !47
  %108 = and i1 %97, %107, !dbg !45
  %109 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 13312), i64 %94, !dbg !48
  %110 = select i1 %108, i32 8, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %109, ptr addrspace(1) %100, i32 %110, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %111 = icmp sgt i32 %62, 95, !dbg !45
  %112 = getelementptr i8, ptr addrspace(1) %55, i64 64, !dbg !49
  %113 = getelementptr i8, ptr addrspace(1) %57, i64 64, !dbg !49
  %114 = getelementptr i8, ptr addrspace(1) %61, i64 64, !dbg !50
  %115 = add i32 %5, -64, !dbg !51
  %116 = icmp slt i32 %51, %115, !dbg !46
  %117 = and i1 %111, %116, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %118 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %79, !dbg !44
  %119 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %83, !dbg !44
  %120 = select i1 %117, i32 16, i32 0, !dbg !44
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %118, ptr addrspace(1) %112, i32 %120, i1 true) #2, !dbg !44
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %119, ptr addrspace(1) %113, i32 %120, i1 true) #2, !dbg !44
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !44
  %121 = icmp slt i32 %46, %115, !dbg !47
  %122 = and i1 %111, %121, !dbg !45
  %123 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 14336), i64 %94, !dbg !48
  %124 = select i1 %122, i32 8, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %123, ptr addrspace(1) %114, i32 %124, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  br i1 %70, label %.lr.ph, label %._crit_edge, !dbg !45

.lr.ph:                                           ; preds = %9
  %125 = add nsw i32 %63, -3
  %126 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 15360), i64 %79
  %127 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 15360), i64 %83
  %128 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 19456), i64 %94
  %129 = and i32 %25, 7
  %130 = and i32 %73, 1
  %131 = lshr i32 %26, 4
  %132 = shl nuw nsw i32 %27, 1
  %133 = and i32 %132, 6
  %134 = or disjoint i32 %133, %130
  %135 = lshr i32 %129, 2
  %136 = xor i32 %131, %135
  %137 = shl nuw nsw i32 %134, 8
  %138 = shl nuw nsw i32 %129, 5
  %139 = shl nuw nsw i32 %136, 4
  %140 = or disjoint i32 %137, %139
  %141 = or disjoint i32 %140, %138
  %142 = zext nneg i32 %141 to i64
  %143 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 15360), i64 %142
  %144 = getelementptr i8, ptr addrspace(3) %143, i64 2048
  %145 = xor i32 %130, %135
  %146 = shl nuw nsw i32 %131, 8
  %147 = shl nuw nsw i32 %145, 4
  %148 = or disjoint i32 %147, %146
  %149 = or disjoint i32 %148, %138
  %150 = zext nneg i32 %149 to i64
  %151 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 19456), i64 %150
  %152 = getelementptr i8, ptr addrspace(3) %151, i64 512
  %.neg273 = add nsw i32 %5, -96
  %153 = shufflevector <4 x i8> %68, <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !48
  %154 = shl nuw nsw i32 %29, 5
  %155 = or disjoint i32 %154, %77
  %156 = zext nneg i32 %155 to i64
  %157 = shl nuw nsw i32 %30, 5
  %158 = or disjoint i32 %157, %77
  %159 = zext nneg i32 %158 to i64
  %160 = shl nuw nsw i32 %38, 5
  %161 = or disjoint i32 %160, %92
  %162 = zext nneg i32 %161 to i64
  br label %163, !dbg !45

163:                                              ; preds = %.lr.ph, %163
  %.pn211282 = phi i1 [ %121, %.lr.ph ], [ %411, %163 ]
  %.pn211.pn281 = phi i1 [ %107, %.lr.ph ], [ %.pn211282, %163 ]
  %.pn211.pn.pn280 = phi i1 [ %86, %.lr.ph ], [ %.pn211.pn281, %163 ]
  %164 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), %.lr.ph ], [ %424, %163 ]
  %.pn83279 = phi i1 [ %116, %.lr.ph ], [ %403, %163 ]
  %.pn83.pn278 = phi i1 [ %102, %.lr.ph ], [ %.pn83279, %163 ]
  %.pn83.pn.pn277 = phi i1 [ %71, %.lr.ph ], [ %.pn83.pn278, %163 ]
  %165 = phi ptr addrspace(3) [ @global_smem, %.lr.ph ], [ %421, %163 ]
  %166 = phi i32 [ 0, %.lr.ph ], [ %418, %163 ]
  %167 = phi i32 [ 2, %.lr.ph ], [ %400, %163 ]
  %.pn81276 = phi ptr addrspace(1) [ %114, %.lr.ph ], [ %397, %163 ]
  %.pn33275 = phi ptr addrspace(1) [ %113, %.lr.ph ], [ %396, %163 ]
  %.pn65274 = phi ptr addrspace(1) [ %112, %.lr.ph ], [ %395, %163 ]
  %168 = phi float [ 0.000000e+00, %.lr.ph ], [ %356, %163 ]
  %169 = phi float [ 0.000000e+00, %.lr.ph ], [ %357, %163 ]
  %170 = phi float [ 0.000000e+00, %.lr.ph ], [ %358, %163 ]
  %171 = phi float [ 0.000000e+00, %.lr.ph ], [ %359, %163 ]
  %172 = phi float [ 0.000000e+00, %.lr.ph ], [ %361, %163 ]
  %173 = phi float [ 0.000000e+00, %.lr.ph ], [ %362, %163 ]
  %174 = phi float [ 0.000000e+00, %.lr.ph ], [ %363, %163 ]
  %175 = phi float [ 0.000000e+00, %.lr.ph ], [ %364, %163 ]
  %176 = phi float [ 0.000000e+00, %.lr.ph ], [ %366, %163 ]
  %177 = phi float [ 0.000000e+00, %.lr.ph ], [ %367, %163 ]
  %178 = phi float [ 0.000000e+00, %.lr.ph ], [ %368, %163 ]
  %179 = phi float [ 0.000000e+00, %.lr.ph ], [ %369, %163 ]
  %180 = phi float [ 0.000000e+00, %.lr.ph ], [ %371, %163 ]
  %181 = phi float [ 0.000000e+00, %.lr.ph ], [ %372, %163 ]
  %182 = phi float [ 0.000000e+00, %.lr.ph ], [ %373, %163 ]
  %183 = phi float [ 0.000000e+00, %.lr.ph ], [ %374, %163 ]
  %184 = phi float [ 0.000000e+00, %.lr.ph ], [ %376, %163 ]
  %185 = phi float [ 0.000000e+00, %.lr.ph ], [ %377, %163 ]
  %186 = phi float [ 0.000000e+00, %.lr.ph ], [ %378, %163 ]
  %187 = phi float [ 0.000000e+00, %.lr.ph ], [ %379, %163 ]
  %188 = phi float [ 0.000000e+00, %.lr.ph ], [ %381, %163 ]
  %189 = phi float [ 0.000000e+00, %.lr.ph ], [ %382, %163 ]
  %190 = phi float [ 0.000000e+00, %.lr.ph ], [ %383, %163 ]
  %191 = phi float [ 0.000000e+00, %.lr.ph ], [ %384, %163 ]
  %192 = phi float [ 0.000000e+00, %.lr.ph ], [ %386, %163 ]
  %193 = phi float [ 0.000000e+00, %.lr.ph ], [ %387, %163 ]
  %194 = phi float [ 0.000000e+00, %.lr.ph ], [ %388, %163 ]
  %195 = phi float [ 0.000000e+00, %.lr.ph ], [ %389, %163 ]
  %196 = phi float [ 0.000000e+00, %.lr.ph ], [ %391, %163 ]
  %197 = phi float [ 0.000000e+00, %.lr.ph ], [ %392, %163 ]
  %198 = phi float [ 0.000000e+00, %.lr.ph ], [ %393, %163 ]
  %199 = phi float [ 0.000000e+00, %.lr.ph ], [ %394, %163 ]
  %200 = phi i32 [ 0, %.lr.ph ], [ %425, %163 ]
  %201 = icmp slt i32 %200, %125, !dbg !45
  %202 = getelementptr i8, ptr addrspace(3) %165, i64 %156, !dbg !44
  %203 = getelementptr i8, ptr addrspace(3) %165, i64 %159, !dbg !44
  %204 = load <16 x i8>, ptr addrspace(3) %202, align 16, !dbg !44
  %205 = insertelement <16 x i1> poison, i1 %.pn83.pn.pn277, i64 0, !dbg !44
  %206 = shufflevector <16 x i1> %205, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !44
  %207 = select <16 x i1> %206, <16 x i8> %204, <16 x i8> %69, !dbg !44
  %208 = load <16 x i8>, ptr addrspace(3) %203, align 16, !dbg !44
  %209 = select <16 x i1> %206, <16 x i8> %208, <16 x i8> %69, !dbg !44
  store <16 x i8> %207, ptr addrspace(3) %126, align 16, !dbg !52
  store <16 x i8> %209, ptr addrspace(3) %127, align 16, !dbg !52
  %210 = getelementptr i8, ptr addrspace(3) %164, i64 %162, !dbg !48
  %211 = load <8 x i8>, ptr addrspace(3) %210, align 8, !dbg !48
  %212 = insertelement <8 x i1> poison, i1 %.pn211.pn.pn280, i64 0, !dbg !48
  %213 = shufflevector <8 x i1> %212, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !48
  %214 = select <8 x i1> %213, <8 x i8> %211, <8 x i8> %153, !dbg !48
  store <8 x i8> %214, ptr addrspace(3) %128, align 8, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %143) #2, !dbg !52
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !52
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !52
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !52
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !52
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %144) #2, !dbg !52
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !52
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !52
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !52
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !52
  %225 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %216) #2, !dbg !52
  %226 = extractvalue { <2 x half>, <2 x half> } %225, 0, !dbg !52
  %227 = extractvalue { <2 x half>, <2 x half> } %225, 1, !dbg !52
  %228 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %218) #2, !dbg !52
  %229 = extractvalue { <2 x half>, <2 x half> } %228, 0, !dbg !52
  %230 = extractvalue { <2 x half>, <2 x half> } %228, 1, !dbg !52
  %231 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %217) #2, !dbg !52
  %232 = extractvalue { <2 x half>, <2 x half> } %231, 0, !dbg !52
  %233 = extractvalue { <2 x half>, <2 x half> } %231, 1, !dbg !52
  %234 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %219) #2, !dbg !52
  %235 = extractvalue { <2 x half>, <2 x half> } %234, 0, !dbg !52
  %236 = extractvalue { <2 x half>, <2 x half> } %234, 1, !dbg !52
  %237 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %221) #2, !dbg !52
  %238 = extractvalue { <2 x half>, <2 x half> } %237, 0, !dbg !52
  %239 = extractvalue { <2 x half>, <2 x half> } %237, 1, !dbg !52
  %240 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %223) #2, !dbg !52
  %241 = extractvalue { <2 x half>, <2 x half> } %240, 0, !dbg !52
  %242 = extractvalue { <2 x half>, <2 x half> } %240, 1, !dbg !52
  %243 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %222) #2, !dbg !52
  %244 = extractvalue { <2 x half>, <2 x half> } %243, 0, !dbg !52
  %245 = extractvalue { <2 x half>, <2 x half> } %243, 1, !dbg !52
  %246 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %224) #2, !dbg !52
  %247 = extractvalue { <2 x half>, <2 x half> } %246, 0, !dbg !52
  %248 = extractvalue { <2 x half>, <2 x half> } %246, 1, !dbg !52
  %249 = bitcast <2 x half> %226 to i32, !dbg !52
  %250 = bitcast <2 x half> %227 to i32, !dbg !52
  %251 = bitcast <2 x half> %232 to i32, !dbg !52
  %252 = bitcast <2 x half> %233 to i32, !dbg !52
  %253 = bitcast <2 x half> %229 to i32, !dbg !52
  %254 = bitcast <2 x half> %230 to i32, !dbg !52
  %255 = bitcast <2 x half> %235 to i32, !dbg !52
  %256 = bitcast <2 x half> %236 to i32, !dbg !52
  %257 = bitcast <2 x half> %238 to i32, !dbg !52
  %258 = bitcast <2 x half> %239 to i32, !dbg !52
  %259 = bitcast <2 x half> %244 to i32, !dbg !52
  %260 = bitcast <2 x half> %245 to i32, !dbg !52
  %261 = bitcast <2 x half> %241 to i32, !dbg !52
  %262 = bitcast <2 x half> %242 to i32, !dbg !52
  %263 = bitcast <2 x half> %247 to i32, !dbg !52
  %264 = bitcast <2 x half> %248 to i32, !dbg !52
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %151) #2, !dbg !52
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !52
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !52
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !52
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !52
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %152) #2, !dbg !52
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !52
  %272 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !52
  %273 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !52
  %274 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !52
  %275 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %266) #2, !dbg !52
  %276 = extractvalue { <2 x half>, <2 x half> } %275, 0, !dbg !52
  %277 = extractvalue { <2 x half>, <2 x half> } %275, 1, !dbg !52
  %278 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %267) #2, !dbg !52
  %279 = extractvalue { <2 x half>, <2 x half> } %278, 0, !dbg !52
  %280 = extractvalue { <2 x half>, <2 x half> } %278, 1, !dbg !52
  %281 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %268) #2, !dbg !52
  %282 = extractvalue { <2 x half>, <2 x half> } %281, 0, !dbg !52
  %283 = extractvalue { <2 x half>, <2 x half> } %281, 1, !dbg !52
  %284 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %269) #2, !dbg !52
  %285 = extractvalue { <2 x half>, <2 x half> } %284, 0, !dbg !52
  %286 = extractvalue { <2 x half>, <2 x half> } %284, 1, !dbg !52
  %287 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %271) #2, !dbg !52
  %288 = extractvalue { <2 x half>, <2 x half> } %287, 0, !dbg !52
  %289 = extractvalue { <2 x half>, <2 x half> } %287, 1, !dbg !52
  %290 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %272) #2, !dbg !52
  %291 = extractvalue { <2 x half>, <2 x half> } %290, 0, !dbg !52
  %292 = extractvalue { <2 x half>, <2 x half> } %290, 1, !dbg !52
  %293 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %273) #2, !dbg !52
  %294 = extractvalue { <2 x half>, <2 x half> } %293, 0, !dbg !52
  %295 = extractvalue { <2 x half>, <2 x half> } %293, 1, !dbg !52
  %296 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %274) #2, !dbg !52
  %297 = extractvalue { <2 x half>, <2 x half> } %296, 0, !dbg !52
  %298 = extractvalue { <2 x half>, <2 x half> } %296, 1, !dbg !52
  %299 = bitcast <2 x half> %276 to i32, !dbg !52
  %300 = bitcast <2 x half> %277 to i32, !dbg !52
  %301 = bitcast <2 x half> %282 to i32, !dbg !52
  %302 = bitcast <2 x half> %283 to i32, !dbg !52
  %303 = bitcast <2 x half> %279 to i32, !dbg !52
  %304 = bitcast <2 x half> %280 to i32, !dbg !52
  %305 = bitcast <2 x half> %285 to i32, !dbg !52
  %306 = bitcast <2 x half> %286 to i32, !dbg !52
  %307 = bitcast <2 x half> %288 to i32, !dbg !52
  %308 = bitcast <2 x half> %289 to i32, !dbg !52
  %309 = bitcast <2 x half> %294 to i32, !dbg !52
  %310 = bitcast <2 x half> %295 to i32, !dbg !52
  %311 = bitcast <2 x half> %291 to i32, !dbg !52
  %312 = bitcast <2 x half> %292 to i32, !dbg !52
  %313 = bitcast <2 x half> %297 to i32, !dbg !52
  %314 = bitcast <2 x half> %298 to i32, !dbg !52
  %315 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %168, float %169, float %170, float %171, i32 %249, i32 %251, i32 %250, i32 %252, i32 %299, i32 %300) #2, !dbg !52
  %316 = extractvalue { float, float, float, float } %315, 0, !dbg !52
  %317 = extractvalue { float, float, float, float } %315, 1, !dbg !52
  %318 = extractvalue { float, float, float, float } %315, 2, !dbg !52
  %319 = extractvalue { float, float, float, float } %315, 3, !dbg !52
  %320 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %172, float %173, float %174, float %175, i32 %249, i32 %251, i32 %250, i32 %252, i32 %301, i32 %302) #2, !dbg !52
  %321 = extractvalue { float, float, float, float } %320, 0, !dbg !52
  %322 = extractvalue { float, float, float, float } %320, 1, !dbg !52
  %323 = extractvalue { float, float, float, float } %320, 2, !dbg !52
  %324 = extractvalue { float, float, float, float } %320, 3, !dbg !52
  %325 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %176, float %177, float %178, float %179, i32 %249, i32 %251, i32 %250, i32 %252, i32 %307, i32 %308) #2, !dbg !52
  %326 = extractvalue { float, float, float, float } %325, 0, !dbg !52
  %327 = extractvalue { float, float, float, float } %325, 1, !dbg !52
  %328 = extractvalue { float, float, float, float } %325, 2, !dbg !52
  %329 = extractvalue { float, float, float, float } %325, 3, !dbg !52
  %330 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %180, float %181, float %182, float %183, i32 %249, i32 %251, i32 %250, i32 %252, i32 %309, i32 %310) #2, !dbg !52
  %331 = extractvalue { float, float, float, float } %330, 0, !dbg !52
  %332 = extractvalue { float, float, float, float } %330, 1, !dbg !52
  %333 = extractvalue { float, float, float, float } %330, 2, !dbg !52
  %334 = extractvalue { float, float, float, float } %330, 3, !dbg !52
  %335 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %184, float %185, float %186, float %187, i32 %257, i32 %259, i32 %258, i32 %260, i32 %299, i32 %300) #2, !dbg !52
  %336 = extractvalue { float, float, float, float } %335, 0, !dbg !52
  %337 = extractvalue { float, float, float, float } %335, 1, !dbg !52
  %338 = extractvalue { float, float, float, float } %335, 2, !dbg !52
  %339 = extractvalue { float, float, float, float } %335, 3, !dbg !52
  %340 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %188, float %189, float %190, float %191, i32 %257, i32 %259, i32 %258, i32 %260, i32 %301, i32 %302) #2, !dbg !52
  %341 = extractvalue { float, float, float, float } %340, 0, !dbg !52
  %342 = extractvalue { float, float, float, float } %340, 1, !dbg !52
  %343 = extractvalue { float, float, float, float } %340, 2, !dbg !52
  %344 = extractvalue { float, float, float, float } %340, 3, !dbg !52
  %345 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %192, float %193, float %194, float %195, i32 %257, i32 %259, i32 %258, i32 %260, i32 %307, i32 %308) #2, !dbg !52
  %346 = extractvalue { float, float, float, float } %345, 0, !dbg !52
  %347 = extractvalue { float, float, float, float } %345, 1, !dbg !52
  %348 = extractvalue { float, float, float, float } %345, 2, !dbg !52
  %349 = extractvalue { float, float, float, float } %345, 3, !dbg !52
  %350 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %196, float %197, float %198, float %199, i32 %257, i32 %259, i32 %258, i32 %260, i32 %309, i32 %310) #2, !dbg !52
  %351 = extractvalue { float, float, float, float } %350, 0, !dbg !52
  %352 = extractvalue { float, float, float, float } %350, 1, !dbg !52
  %353 = extractvalue { float, float, float, float } %350, 2, !dbg !52
  %354 = extractvalue { float, float, float, float } %350, 3, !dbg !52
  %355 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %316, float %317, float %318, float %319, i32 %253, i32 %255, i32 %254, i32 %256, i32 %303, i32 %304) #2, !dbg !52
  %356 = extractvalue { float, float, float, float } %355, 0, !dbg !52
  %357 = extractvalue { float, float, float, float } %355, 1, !dbg !52
  %358 = extractvalue { float, float, float, float } %355, 2, !dbg !52
  %359 = extractvalue { float, float, float, float } %355, 3, !dbg !52
  %360 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %321, float %322, float %323, float %324, i32 %253, i32 %255, i32 %254, i32 %256, i32 %305, i32 %306) #2, !dbg !52
  %361 = extractvalue { float, float, float, float } %360, 0, !dbg !52
  %362 = extractvalue { float, float, float, float } %360, 1, !dbg !52
  %363 = extractvalue { float, float, float, float } %360, 2, !dbg !52
  %364 = extractvalue { float, float, float, float } %360, 3, !dbg !52
  %365 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %326, float %327, float %328, float %329, i32 %253, i32 %255, i32 %254, i32 %256, i32 %311, i32 %312) #2, !dbg !52
  %366 = extractvalue { float, float, float, float } %365, 0, !dbg !52
  %367 = extractvalue { float, float, float, float } %365, 1, !dbg !52
  %368 = extractvalue { float, float, float, float } %365, 2, !dbg !52
  %369 = extractvalue { float, float, float, float } %365, 3, !dbg !52
  %370 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %331, float %332, float %333, float %334, i32 %253, i32 %255, i32 %254, i32 %256, i32 %313, i32 %314) #2, !dbg !52
  %371 = extractvalue { float, float, float, float } %370, 0, !dbg !52
  %372 = extractvalue { float, float, float, float } %370, 1, !dbg !52
  %373 = extractvalue { float, float, float, float } %370, 2, !dbg !52
  %374 = extractvalue { float, float, float, float } %370, 3, !dbg !52
  %375 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %336, float %337, float %338, float %339, i32 %261, i32 %263, i32 %262, i32 %264, i32 %303, i32 %304) #2, !dbg !52
  %376 = extractvalue { float, float, float, float } %375, 0, !dbg !52
  %377 = extractvalue { float, float, float, float } %375, 1, !dbg !52
  %378 = extractvalue { float, float, float, float } %375, 2, !dbg !52
  %379 = extractvalue { float, float, float, float } %375, 3, !dbg !52
  %380 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %341, float %342, float %343, float %344, i32 %261, i32 %263, i32 %262, i32 %264, i32 %305, i32 %306) #2, !dbg !52
  %381 = extractvalue { float, float, float, float } %380, 0, !dbg !52
  %382 = extractvalue { float, float, float, float } %380, 1, !dbg !52
  %383 = extractvalue { float, float, float, float } %380, 2, !dbg !52
  %384 = extractvalue { float, float, float, float } %380, 3, !dbg !52
  %385 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %346, float %347, float %348, float %349, i32 %261, i32 %263, i32 %262, i32 %264, i32 %311, i32 %312) #2, !dbg !52
  %386 = extractvalue { float, float, float, float } %385, 0, !dbg !52
  %387 = extractvalue { float, float, float, float } %385, 1, !dbg !52
  %388 = extractvalue { float, float, float, float } %385, 2, !dbg !52
  %389 = extractvalue { float, float, float, float } %385, 3, !dbg !52
  %390 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %351, float %352, float %353, float %354, i32 %261, i32 %263, i32 %262, i32 %264, i32 %313, i32 %314) #2, !dbg !52
  %391 = extractvalue { float, float, float, float } %390, 0, !dbg !52
  %392 = extractvalue { float, float, float, float } %390, 1, !dbg !52
  %393 = extractvalue { float, float, float, float } %390, 2, !dbg !52
  %394 = extractvalue { float, float, float, float } %390, 3, !dbg !52
  %395 = getelementptr i8, ptr addrspace(1) %.pn65274, i64 32, !dbg !49
  %396 = getelementptr i8, ptr addrspace(1) %.pn33275, i64 32, !dbg !49
  %397 = getelementptr i8, ptr addrspace(1) %.pn81276, i64 32, !dbg !50
  %398 = add i32 %167, 1, !dbg !45
  %399 = icmp slt i32 %398, 3, !dbg !45
  %400 = select i1 %399, i32 %398, i32 0, !dbg !45
  %401 = shl i32 %200, 5, !dbg !51
  %402 = sub i32 %.neg273, %401, !dbg !51
  %403 = icmp slt i32 %51, %402, !dbg !46
  %404 = shl i32 %400, 12, !dbg !44
  %405 = sext i32 %404 to i64, !dbg !44
  %406 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %405, !dbg !44
  %407 = and i1 %201, %403, !dbg !45
  %408 = getelementptr i8, ptr addrspace(3) %406, i64 %79, !dbg !44
  %409 = getelementptr i8, ptr addrspace(3) %406, i64 %83, !dbg !44
  %410 = select i1 %407, i32 16, i32 0, !dbg !44
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %408, ptr addrspace(1) %395, i32 %410, i1 true) #2, !dbg !44
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %409, ptr addrspace(1) %396, i32 %410, i1 true) #2, !dbg !44
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !44
  %411 = icmp slt i32 %46, %402, !dbg !47
  %412 = shl i32 %400, 10, !dbg !48
  %413 = sext i32 %412 to i64, !dbg !48
  %414 = and i1 %201, %411, !dbg !45
  %gep = getelementptr i8, ptr addrspace(3) %95, i64 %413, !dbg !48
  %415 = select i1 %414, i32 8, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %397, i32 %415, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %416 = add i32 %166, 1, !dbg !45
  %417 = icmp slt i32 %416, 3, !dbg !45
  %418 = select i1 %417, i32 %416, i32 0, !dbg !45
  %419 = shl i32 %418, 12, !dbg !44
  %420 = sext i32 %419 to i64, !dbg !44
  %421 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %420, !dbg !44
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %422 = shl i32 %418, 10, !dbg !48
  %423 = sext i32 %422 to i64, !dbg !48
  %424 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %423, !dbg !48
  %425 = add nuw nsw i32 %200, 1, !dbg !45
  %426 = icmp slt i32 %425, %63, !dbg !45
  br i1 %426, label %163, label %._crit_edge.loopexit, !dbg !45

._crit_edge.loopexit:                             ; preds = %163
  %427 = insertelement <32 x float> poison, float %356, i64 0, !dbg !53
  %428 = insertelement <32 x float> %427, float %357, i64 1, !dbg !53
  %429 = insertelement <32 x float> %428, float %358, i64 2, !dbg !53
  %430 = insertelement <32 x float> %429, float %359, i64 3, !dbg !53
  %431 = insertelement <32 x float> %430, float %361, i64 4, !dbg !53
  %432 = insertelement <32 x float> %431, float %362, i64 5, !dbg !53
  %433 = insertelement <32 x float> %432, float %363, i64 6, !dbg !53
  %434 = insertelement <32 x float> %433, float %364, i64 7, !dbg !53
  %435 = insertelement <32 x float> %434, float %366, i64 8, !dbg !53
  %436 = insertelement <32 x float> %435, float %367, i64 9, !dbg !53
  %437 = insertelement <32 x float> %436, float %368, i64 10, !dbg !53
  %438 = insertelement <32 x float> %437, float %369, i64 11, !dbg !53
  %439 = insertelement <32 x float> %438, float %371, i64 12, !dbg !53
  %440 = insertelement <32 x float> %439, float %372, i64 13, !dbg !53
  %441 = insertelement <32 x float> %440, float %373, i64 14, !dbg !53
  %442 = insertelement <32 x float> %441, float %374, i64 15, !dbg !53
  %443 = insertelement <32 x float> %442, float %376, i64 16, !dbg !53
  %444 = insertelement <32 x float> %443, float %377, i64 17, !dbg !53
  %445 = insertelement <32 x float> %444, float %378, i64 18, !dbg !53
  %446 = insertelement <32 x float> %445, float %379, i64 19, !dbg !53
  %447 = insertelement <32 x float> %446, float %381, i64 20, !dbg !53
  %448 = insertelement <32 x float> %447, float %382, i64 21, !dbg !53
  %449 = insertelement <32 x float> %448, float %383, i64 22, !dbg !53
  %450 = insertelement <32 x float> %449, float %384, i64 23, !dbg !53
  %451 = insertelement <32 x float> %450, float %386, i64 24, !dbg !53
  %452 = insertelement <32 x float> %451, float %387, i64 25, !dbg !53
  %453 = insertelement <32 x float> %452, float %388, i64 26, !dbg !53
  %454 = insertelement <32 x float> %453, float %389, i64 27, !dbg !53
  %455 = insertelement <32 x float> %454, float %391, i64 28, !dbg !53
  %456 = insertelement <32 x float> %455, float %392, i64 29, !dbg !53
  %457 = insertelement <32 x float> %456, float %393, i64 30, !dbg !53
  %458 = insertelement <32 x float> %457, float %394, i64 31, !dbg !53
  %459 = fptrunc <32 x float> %458 to <32 x half>, !dbg !53
  br label %._crit_edge, !dbg !32

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %460 = phi <32 x half> [ zeroinitializer, %9 ], [ %459, %._crit_edge.loopexit ]
  %461 = or disjoint i32 %43, %46, !dbg !32
  %462 = or disjoint i32 %38, %24, !dbg !28
  %463 = or disjoint i32 %462, 96, !dbg !28
  %464 = or disjoint i32 %462, 64, !dbg !28
  %465 = or disjoint i32 %462, 32, !dbg !28
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %466 = mul i32 %462, %8, !dbg !54
  %467 = mul i32 %465, %8, !dbg !54
  %468 = mul i32 %464, %8, !dbg !54
  %469 = mul i32 %463, %8, !dbg !54
  %470 = sext i32 %466 to i64, !dbg !55
  %471 = getelementptr half, ptr addrspace(1) %2, i64 %470, !dbg !55
  %472 = sext i32 %467 to i64, !dbg !55
  %473 = getelementptr half, ptr addrspace(1) %2, i64 %472, !dbg !55
  %474 = sext i32 %468 to i64, !dbg !55
  %475 = getelementptr half, ptr addrspace(1) %2, i64 %474, !dbg !55
  %476 = sext i32 %469 to i64, !dbg !55
  %477 = getelementptr half, ptr addrspace(1) %2, i64 %476, !dbg !55
  %478 = sext i32 %461 to i64, !dbg !56
  %479 = getelementptr half, ptr addrspace(1) %471, i64 %478, !dbg !56
  %480 = getelementptr half, ptr addrspace(1) %473, i64 %478, !dbg !56
  %481 = getelementptr half, ptr addrspace(1) %475, i64 %478, !dbg !56
  %482 = getelementptr half, ptr addrspace(1) %477, i64 %478, !dbg !56
  %483 = icmp slt i32 %462, %3, !dbg !57
  %484 = icmp slt i32 %465, %3, !dbg !57
  %485 = icmp slt i32 %464, %3, !dbg !57
  %486 = icmp slt i32 %463, %3, !dbg !57
  %487 = icmp slt i32 %461, %4, !dbg !58
  %488 = and i1 %483, %487, !dbg !59
  %489 = and i1 %484, %487, !dbg !59
  %490 = and i1 %485, %487, !dbg !59
  %491 = and i1 %486, %487, !dbg !59
  %492 = and i32 %27, 3, !dbg !60
  %493 = lshr i32 %26, 2, !dbg !60
  %494 = and i32 %25, 3, !dbg !60
  %495 = shl nuw nsw i32 %494, 1, !dbg !60
  %496 = shl nuw nsw i32 %492, 4, !dbg !60
  %497 = or disjoint i32 %496, %493, !dbg !60
  %498 = mul nuw nsw i32 %497, 40, !dbg !60
  %499 = or disjoint i32 %498, %495, !dbg !60
  %500 = zext nneg i32 %499 to i64, !dbg !60
  %501 = getelementptr half, ptr addrspace(3) @global_smem, i64 %500, !dbg !60
  %502 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !60
  store <2 x half> %502, ptr addrspace(3) %501, align 4, !dbg !60
  %503 = add nuw nsw i32 %498, 320, !dbg !60
  %504 = or disjoint i32 %503, %495, !dbg !60
  %505 = zext nneg i32 %504 to i64, !dbg !60
  %506 = getelementptr half, ptr addrspace(3) @global_smem, i64 %505, !dbg !60
  %507 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !60
  store <2 x half> %507, ptr addrspace(3) %506, align 4, !dbg !60
  %508 = or disjoint i32 %495, 8, !dbg !60
  %509 = add nuw nsw i32 %498, %508, !dbg !60
  %510 = zext nneg i32 %509 to i64, !dbg !60
  %511 = getelementptr half, ptr addrspace(3) @global_smem, i64 %510, !dbg !60
  %512 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !60
  store <2 x half> %512, ptr addrspace(3) %511, align 4, !dbg !60
  %513 = add nuw nsw i32 %503, %508, !dbg !60
  %514 = zext nneg i32 %513 to i64, !dbg !60
  %515 = getelementptr half, ptr addrspace(3) @global_smem, i64 %514, !dbg !60
  %516 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !60
  store <2 x half> %516, ptr addrspace(3) %515, align 4, !dbg !60
  %517 = or disjoint i32 %495, 16, !dbg !60
  %518 = add nuw nsw i32 %498, %517, !dbg !60
  %519 = zext nneg i32 %518 to i64, !dbg !60
  %520 = getelementptr half, ptr addrspace(3) @global_smem, i64 %519, !dbg !60
  %521 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !60
  store <2 x half> %521, ptr addrspace(3) %520, align 4, !dbg !60
  %522 = add nuw nsw i32 %503, %517, !dbg !60
  %523 = zext nneg i32 %522 to i64, !dbg !60
  %524 = getelementptr half, ptr addrspace(3) @global_smem, i64 %523, !dbg !60
  %525 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !60
  store <2 x half> %525, ptr addrspace(3) %524, align 4, !dbg !60
  %526 = or disjoint i32 %495, 24, !dbg !60
  %527 = add nuw nsw i32 %498, %526, !dbg !60
  %528 = zext nneg i32 %527 to i64, !dbg !60
  %529 = getelementptr half, ptr addrspace(3) @global_smem, i64 %528, !dbg !60
  %530 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !60
  store <2 x half> %530, ptr addrspace(3) %529, align 4, !dbg !60
  %531 = add nuw nsw i32 %503, %526, !dbg !60
  %532 = zext nneg i32 %531 to i64, !dbg !60
  %533 = getelementptr half, ptr addrspace(3) @global_smem, i64 %532, !dbg !60
  %534 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !60
  store <2 x half> %534, ptr addrspace(3) %533, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %535 = shl nuw nsw i32 %492, 3, !dbg !60
  %536 = or disjoint i32 %535, %493, !dbg !60
  %537 = shl nuw nsw i32 %494, 3, !dbg !60
  %538 = mul nuw nsw i32 %536, 40, !dbg !60
  %539 = add nuw nsw i32 %538, %537, !dbg !60
  %540 = zext nneg i32 %539 to i64, !dbg !60
  %541 = getelementptr half, ptr addrspace(3) @global_smem, i64 %540, !dbg !60
  %542 = load <4 x i32>, ptr addrspace(3) %541, align 16, !dbg !60
  %543 = getelementptr i8, ptr addrspace(3) %541, i64 2560, !dbg !60
  %544 = load <4 x i32>, ptr addrspace(3) %543, align 16, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %545 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !60
  store <2 x half> %545, ptr addrspace(3) %501, align 4, !dbg !60
  %546 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !60
  store <2 x half> %546, ptr addrspace(3) %506, align 4, !dbg !60
  %547 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !60
  store <2 x half> %547, ptr addrspace(3) %511, align 4, !dbg !60
  %548 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !60
  store <2 x half> %548, ptr addrspace(3) %515, align 4, !dbg !60
  %549 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !60
  store <2 x half> %549, ptr addrspace(3) %520, align 4, !dbg !60
  %550 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !60
  store <2 x half> %550, ptr addrspace(3) %524, align 4, !dbg !60
  %551 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !60
  store <2 x half> %551, ptr addrspace(3) %529, align 4, !dbg !60
  %552 = shufflevector <32 x half> %460, <32 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !60
  store <2 x half> %552, ptr addrspace(3) %533, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %553 = load <4 x i32>, ptr addrspace(3) %541, align 16, !dbg !60
  %554 = load <4 x i32>, ptr addrspace(3) %543, align 16, !dbg !60
  %.extract = extractelement <4 x i32> %542, i64 0, !dbg !60
  %.extract243 = extractelement <4 x i32> %542, i64 1, !dbg !60
  %.extract245 = extractelement <4 x i32> %542, i64 2, !dbg !60
  %.extract247 = extractelement <4 x i32> %542, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract243, i32 %.extract245, i32 %.extract247, ptr addrspace(1) %479, i1 %488) #2, !dbg !60
  %.extract249 = extractelement <4 x i32> %544, i64 0, !dbg !60
  %.extract251 = extractelement <4 x i32> %544, i64 1, !dbg !60
  %.extract253 = extractelement <4 x i32> %544, i64 2, !dbg !60
  %.extract255 = extractelement <4 x i32> %544, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract249, i32 %.extract251, i32 %.extract253, i32 %.extract255, ptr addrspace(1) %480, i1 %489) #2, !dbg !60
  %.extract257 = extractelement <4 x i32> %553, i64 0, !dbg !60
  %.extract259 = extractelement <4 x i32> %553, i64 1, !dbg !60
  %.extract261 = extractelement <4 x i32> %553, i64 2, !dbg !60
  %.extract263 = extractelement <4 x i32> %553, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract257, i32 %.extract259, i32 %.extract261, i32 %.extract263, ptr addrspace(1) %481, i1 %490) #2, !dbg !60
  %.extract265 = extractelement <4 x i32> %554, i64 0, !dbg !60
  %.extract267 = extractelement <4 x i32> %554, i64 1, !dbg !60
  %.extract269 = extractelement <4 x i32> %554, i64 2, !dbg !60
  %.extract271 = extractelement <4 x i32> %554, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract265, i32 %.extract267, i32 %.extract269, i32 %.extract271, ptr addrspace(1) %482, i1 %491) #2, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matrix_multiplication.py", directory: "/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication")
!4 = !{ptr @matmul_kernel, !"kernel", i32 1}
!5 = !{ptr @matmul_kernel, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !3, file: !3, line: 260, type: !8, scopeLine: 260, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 292, column: 24, scope: !7)
!11 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !7, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/data_ssd1/zjy_home/frameworks/cuda/triton/python/triton/language")
!14 = !DILocation(line: 293, column: 27, scope: !7)
!15 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !17)
!17 = !DILocation(line: 294, column: 27, scope: !7)
!18 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !17)
!19 = !DILocation(line: 295, column: 38, scope: !7)
!20 = !DILocation(line: 296, column: 22, scope: !7)
!21 = !DILocation(line: 297, column: 29, scope: !7)
!22 = !DILocation(line: 299, column: 20, scope: !7)
!23 = !DILocation(line: 299, column: 33, scope: !7)
!24 = !DILocation(line: 304, column: 40, scope: !7)
!25 = !DILocation(line: 302, column: 8, scope: !7)
!26 = !DILocation(line: 313, column: 23, scope: !7)
!27 = !DILocation(line: 313, column: 51, scope: !7)
!28 = !DILocation(line: 313, column: 38, scope: !7)
!29 = !DILocation(line: 313, column: 68, scope: !7)
!30 = !DILocation(line: 314, column: 23, scope: !7)
!31 = !DILocation(line: 314, column: 51, scope: !7)
!32 = !DILocation(line: 314, column: 38, scope: !7)
!33 = !DILocation(line: 314, column: 68, scope: !7)
!34 = !DILocation(line: 316, column: 41, scope: !7)
!35 = !DILocation(line: 316, column: 60, scope: !7)
!36 = !DILocation(line: 316, column: 53, scope: !7)
!37 = !DILocation(line: 316, column: 22, scope: !7)
!38 = !DILocation(line: 318, column: 71, scope: !7)
!39 = !DILocation(line: 318, column: 52, scope: !7)
!40 = !DILocation(line: 318, column: 22, scope: !7)
!41 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !42)
!42 = !DILocation(line: 327, column: 33, scope: !7)
!43 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !42)
!44 = !DILocation(line: 330, column: 20, scope: !7)
!45 = !DILocation(line: 327, column: 22, scope: !7)
!46 = !DILocation(line: 330, column: 51, scope: !7)
!47 = !DILocation(line: 331, column: 51, scope: !7)
!48 = !DILocation(line: 331, column: 20, scope: !7)
!49 = !DILocation(line: 335, column: 18, scope: !7)
!50 = !DILocation(line: 336, column: 18, scope: !7)
!51 = !DILocation(line: 330, column: 55, scope: !7)
!52 = !DILocation(line: 333, column: 35, scope: !7)
!53 = !DILocation(line: 341, column: 23, scope: !7)
!54 = !DILocation(line: 347, column: 33, scope: !7)
!55 = !DILocation(line: 347, column: 21, scope: !7)
!56 = !DILocation(line: 347, column: 52, scope: !7)
!57 = !DILocation(line: 348, column: 33, scope: !7)
!58 = !DILocation(line: 348, column: 58, scope: !7)
!59 = !DILocation(line: 348, column: 39, scope: !7)
!60 = !DILocation(line: 349, column: 21, scope: !7)
!61 = !DILocation(line: 349, column: 4, scope: !7)
