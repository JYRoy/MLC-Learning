; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %11 = add i32 %3, 63, !dbg !11
  %12 = sdiv i32 %11, 64, !dbg !15
  %13 = add i32 %4, 31, !dbg !16
  %14 = sdiv i32 %13, 32, !dbg !18
  %15 = shl nsw i32 %14, 3, !dbg !19
  %.frozen = freeze i32 %10
  %.frozen296 = freeze i32 %15
  %16 = sdiv i32 %.frozen, %.frozen296, !dbg !20
  %17 = shl i32 %16, 3, !dbg !21
  %18 = sub i32 %12, %17, !dbg !22
  %19 = tail call i32 @llvm.smin.i32(i32 %18, i32 8), !dbg !23
  %20 = mul i32 %16, %.frozen296
  %.decomposed = sub i32 %.frozen, %20
  %.frozen297 = freeze i32 %19
  %21 = sdiv i32 %.decomposed, %.frozen297, !dbg !24
  %22 = mul i32 %21, %.frozen297
  %.decomposed298 = sub i32 %.decomposed, %22
  %23 = add i32 %.decomposed298, %17, !dbg !25
  %24 = shl i32 %23, 6, !dbg !26
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !27
  %26 = and i32 %25, 31, !dbg !27
  %27 = lshr i32 %25, 5, !dbg !27
  %28 = lshr i32 %25, 2, !dbg !27
  %29 = and i32 %28, 15, !dbg !27
  %30 = or disjoint i32 %29, 16, !dbg !27
  %31 = or disjoint i32 %29, 32, !dbg !27
  %32 = or disjoint i32 %29, 48, !dbg !27
  %33 = or disjoint i32 %24, %29, !dbg !28
  %34 = or disjoint i32 %24, %30, !dbg !28
  %35 = or disjoint i32 %24, %31, !dbg !28
  %36 = or disjoint i32 %24, %32, !dbg !28
  %37 = srem i32 %33, %3, !dbg !29
  %38 = srem i32 %34, %3, !dbg !29
  %39 = srem i32 %35, %3, !dbg !29
  %40 = srem i32 %36, %3, !dbg !29
  %41 = shl i32 %21, 5, !dbg !30
  %42 = shl i32 %25, 3, !dbg !31
  %43 = and i32 %42, 24, !dbg !31
  %44 = or disjoint i32 %41, %43, !dbg !32
  %45 = srem i32 %44, %4, !dbg !33
  %46 = mul i32 %37, %6, !dbg !34
  %47 = mul i32 %38, %6, !dbg !34
  %48 = mul i32 %39, %6, !dbg !34
  %49 = mul i32 %40, %6, !dbg !34
  %50 = add i32 %46, %43, !dbg !35
  %51 = add i32 %47, %43, !dbg !35
  %52 = add i32 %48, %43, !dbg !35
  %53 = add i32 %49, %43, !dbg !35
  %54 = sext i32 %50 to i64, !dbg !36
  %55 = getelementptr half, ptr addrspace(1) %0, i64 %54, !dbg !36
  %56 = sext i32 %51 to i64, !dbg !36
  %57 = getelementptr half, ptr addrspace(1) %0, i64 %56, !dbg !36
  %58 = sext i32 %52 to i64, !dbg !36
  %59 = getelementptr half, ptr addrspace(1) %0, i64 %58, !dbg !36
  %60 = sext i32 %53 to i64, !dbg !36
  %61 = getelementptr half, ptr addrspace(1) %0, i64 %60, !dbg !36
  %62 = mul i32 %29, %7, !dbg !37
  %63 = mul i32 %30, %7, !dbg !37
  %64 = add i32 %45, %62, !dbg !38
  %65 = add i32 %45, %63, !dbg !38
  %66 = sext i32 %64 to i64, !dbg !39
  %67 = getelementptr half, ptr addrspace(1) %1, i64 %66, !dbg !39
  %68 = sext i32 %65 to i64, !dbg !39
  %69 = getelementptr half, ptr addrspace(1) %1, i64 %68, !dbg !39
  %70 = add i32 %5, 31, !dbg !40
  %71 = sdiv i32 %70, 32, !dbg !42
  %72 = shl i32 %7, 5, !dbg !43
  %73 = icmp sgt i32 %70, 31, !dbg !44
  %74 = icmp slt i32 %43, %5, !dbg !45
  %75 = and i1 %74, %73, !dbg !44
  %76 = shl nuw nsw i32 %29, 5, !dbg !46
  %77 = xor i32 %42, %25, !dbg !46
  %78 = and i32 %77, 24, !dbg !46
  %79 = or disjoint i32 %76, %78, !dbg !46
  %80 = zext nneg i32 %79 to i64, !dbg !46
  %81 = getelementptr half, ptr addrspace(3) @global_smem, i64 %80, !dbg !46
  %82 = shl nuw nsw i32 %30, 5, !dbg !46
  %83 = or disjoint i32 %82, %78, !dbg !46
  %84 = zext nneg i32 %83 to i64, !dbg !46
  %85 = getelementptr half, ptr addrspace(3) @global_smem, i64 %84, !dbg !46
  %86 = shl nuw nsw i32 %31, 5, !dbg !46
  %87 = or disjoint i32 %86, %78, !dbg !46
  %88 = zext nneg i32 %87 to i64, !dbg !46
  %89 = getelementptr half, ptr addrspace(3) @global_smem, i64 %88, !dbg !46
  %90 = shl nuw nsw i32 %32, 5, !dbg !46
  %91 = or disjoint i32 %90, %78, !dbg !46
  %92 = zext nneg i32 %91 to i64, !dbg !46
  %93 = getelementptr half, ptr addrspace(3) @global_smem, i64 %92, !dbg !46
  %94 = select i1 %75, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %81, ptr addrspace(1) %55, i32 %94, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %85, ptr addrspace(1) %57, i32 %94, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %89, ptr addrspace(1) %59, i32 %94, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %93, ptr addrspace(1) %61, i32 %94, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %95 = icmp slt i32 %29, %5, !dbg !47
  %96 = icmp slt i32 %30, %5, !dbg !47
  %97 = and i1 %95, %73, !dbg !44
  %98 = and i1 %96, %73, !dbg !44
  %99 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %80, !dbg !48
  %100 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %84, !dbg !48
  %101 = select i1 %97, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %67, i32 %101, i1 true) #2, !dbg !48
  %102 = select i1 %98, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %69, i32 %102, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %103 = icmp sgt i32 %70, 63, !dbg !44
  %104 = getelementptr i8, ptr addrspace(1) %55, i64 64, !dbg !49
  %105 = getelementptr i8, ptr addrspace(1) %57, i64 64, !dbg !49
  %106 = getelementptr i8, ptr addrspace(1) %59, i64 64, !dbg !49
  %107 = getelementptr i8, ptr addrspace(1) %61, i64 64, !dbg !49
  %108 = sext i32 %72 to i64, !dbg !50
  %109 = getelementptr half, ptr addrspace(1) %67, i64 %108, !dbg !50
  %110 = getelementptr half, ptr addrspace(1) %69, i64 %108, !dbg !50
  %111 = add i32 %5, -32, !dbg !51
  %112 = icmp slt i32 %43, %111, !dbg !45
  %113 = and i1 %103, %112, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %114 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %80, !dbg !46
  %115 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %84, !dbg !46
  %116 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %88, !dbg !46
  %117 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %92, !dbg !46
  %118 = select i1 %113, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %114, ptr addrspace(1) %104, i32 %118, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %115, ptr addrspace(1) %105, i32 %118, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %116, ptr addrspace(1) %106, i32 %118, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %117, ptr addrspace(1) %107, i32 %118, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %119 = icmp slt i32 %29, %111, !dbg !47
  %120 = icmp slt i32 %30, %111, !dbg !47
  %121 = and i1 %103, %119, !dbg !44
  %122 = and i1 %103, %120, !dbg !44
  %123 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 18432), i64 %80, !dbg !48
  %124 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 18432), i64 %84, !dbg !48
  %125 = select i1 %121, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %123, ptr addrspace(1) %109, i32 %125, i1 true) #2, !dbg !48
  %126 = select i1 %122, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %124, ptr addrspace(1) %110, i32 %126, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %127 = icmp sgt i32 %70, 95, !dbg !44
  %128 = getelementptr i8, ptr addrspace(1) %55, i64 128, !dbg !49
  %129 = getelementptr i8, ptr addrspace(1) %57, i64 128, !dbg !49
  %130 = getelementptr i8, ptr addrspace(1) %59, i64 128, !dbg !49
  %131 = getelementptr i8, ptr addrspace(1) %61, i64 128, !dbg !49
  %132 = getelementptr half, ptr addrspace(1) %109, i64 %108, !dbg !50
  %133 = getelementptr half, ptr addrspace(1) %110, i64 %108, !dbg !50
  %134 = add i32 %5, -64, !dbg !51
  %135 = icmp slt i32 %43, %134, !dbg !45
  %136 = and i1 %127, %135, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %137 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %80, !dbg !46
  %138 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %84, !dbg !46
  %139 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %88, !dbg !46
  %140 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %92, !dbg !46
  %141 = select i1 %136, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %137, ptr addrspace(1) %128, i32 %141, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %138, ptr addrspace(1) %129, i32 %141, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %139, ptr addrspace(1) %130, i32 %141, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %140, ptr addrspace(1) %131, i32 %141, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %142 = icmp slt i32 %29, %134, !dbg !47
  %143 = icmp slt i32 %30, %134, !dbg !47
  %144 = and i1 %127, %142, !dbg !44
  %145 = and i1 %127, %143, !dbg !44
  %146 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %80, !dbg !48
  %147 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %84, !dbg !48
  %148 = select i1 %144, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %146, ptr addrspace(1) %132, i32 %148, i1 true) #2, !dbg !48
  %149 = select i1 %145, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %147, ptr addrspace(1) %133, i32 %149, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %150 = icmp sgt i32 %70, 127, !dbg !44
  %151 = getelementptr i8, ptr addrspace(1) %55, i64 192, !dbg !49
  %152 = getelementptr i8, ptr addrspace(1) %57, i64 192, !dbg !49
  %153 = getelementptr i8, ptr addrspace(1) %59, i64 192, !dbg !49
  %154 = getelementptr i8, ptr addrspace(1) %61, i64 192, !dbg !49
  %155 = getelementptr half, ptr addrspace(1) %132, i64 %108, !dbg !50
  %156 = getelementptr half, ptr addrspace(1) %133, i64 %108, !dbg !50
  %157 = add i32 %5, -96, !dbg !51
  %158 = icmp slt i32 %43, %157, !dbg !45
  %159 = and i1 %150, %158, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %160 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %80, !dbg !46
  %161 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %84, !dbg !46
  %162 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %88, !dbg !46
  %163 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %92, !dbg !46
  %164 = select i1 %159, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %160, ptr addrspace(1) %151, i32 %164, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %161, ptr addrspace(1) %152, i32 %164, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %162, ptr addrspace(1) %153, i32 %164, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %163, ptr addrspace(1) %154, i32 %164, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %165 = icmp slt i32 %29, %157, !dbg !47
  %166 = icmp slt i32 %30, %157, !dbg !47
  %167 = and i1 %150, %165, !dbg !44
  %168 = and i1 %150, %166, !dbg !44
  %169 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 22528), i64 %80, !dbg !48
  %170 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 22528), i64 %84, !dbg !48
  %171 = select i1 %167, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %169, ptr addrspace(1) %155, i32 %171, i1 true) #2, !dbg !48
  %172 = select i1 %168, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %170, ptr addrspace(1) %156, i32 %172, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %173 = and i32 %27, 1, !dbg !46
  %174 = lshr i32 %26, 4, !dbg !46
  %175 = lshr i32 %25, 1, !dbg !46
  %176 = and i32 %175, 3, !dbg !46
  %177 = shl nuw nsw i32 %173, 4, !dbg !46
  %178 = and i32 %25, 15, !dbg !46
  %179 = or disjoint i32 %178, %177, !dbg !46
  %180 = xor i32 %174, %176, !dbg !46
  %181 = shl nuw nsw i32 %179, 5, !dbg !46
  %182 = shl nuw nsw i32 %180, 3, !dbg !46
  %183 = or disjoint i32 %181, %182, !dbg !46
  %184 = zext nneg i32 %183 to i64, !dbg !46
  %185 = getelementptr half, ptr addrspace(3) @global_smem, i64 %184, !dbg !46
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %185) #2, !dbg !46
  %187 = getelementptr i8, ptr addrspace(3) %185, i64 2048, !dbg !46
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %187) #2, !dbg !46
  %189 = shl nuw nsw i32 %178, 5, !dbg !48
  %190 = or disjoint i32 %182, %189, !dbg !48
  %191 = zext nneg i32 %190 to i64, !dbg !48
  %192 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %191, !dbg !48
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %192) #2, !dbg !48
  %194 = or disjoint i32 %174, 2, !dbg !48
  %195 = xor i32 %194, %176, !dbg !48
  %196 = shl nuw nsw i32 %195, 3, !dbg !48
  %197 = or disjoint i32 %196, %189, !dbg !48
  %198 = zext nneg i32 %197 to i64, !dbg !48
  %199 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %198, !dbg !48
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %199) #2, !dbg !48
  br i1 %73, label %.lr.ph, label %._crit_edge, !dbg !44

.lr.ph:                                           ; preds = %9
  %201 = add nsw i32 %71, -4
  %.neg175 = add nsw i32 %5, -128
  %202 = shl nuw nsw i32 %179, 5
  %203 = or disjoint i32 %202, %196
  %204 = zext nneg i32 %203 to i64
  %205 = shl nuw nsw i32 %178, 5
  %206 = or disjoint i32 %205, %182
  %207 = zext nneg i32 %206 to i64
  %208 = or disjoint i32 %205, %196
  %209 = zext nneg i32 %208 to i64
  br label %210, !dbg !44

210:                                              ; preds = %.lr.ph, %210
  %.pn = phi { i32, i32, i32, i32 } [ %200, %.lr.ph ], [ %418, %210 ]
  %.pn191 = phi { i32, i32, i32, i32 } [ %193, %.lr.ph ], [ %416, %210 ]
  %.pn195 = phi { i32, i32, i32, i32 } [ %188, %.lr.ph ], [ %414, %210 ]
  %.pn199 = phi { i32, i32, i32, i32 } [ %186, %.lr.ph ], [ %412, %210 ]
  %211 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), %.lr.ph ], [ %410, %210 ]
  %212 = phi ptr addrspace(3) [ @global_smem, %.lr.ph ], [ %407, %210 ]
  %213 = phi i32 [ 0, %.lr.ph ], [ %404, %210 ]
  %214 = phi i32 [ 3, %.lr.ph ], [ %378, %210 ]
  %.pn80181 = phi ptr addrspace(1) [ %156, %.lr.ph ], [ %375, %210 ]
  %.pn96180 = phi ptr addrspace(1) [ %155, %.lr.ph ], [ %374, %210 ]
  %.pn16179 = phi ptr addrspace(1) [ %154, %.lr.ph ], [ %373, %210 ]
  %.pn32178 = phi ptr addrspace(1) [ %153, %.lr.ph ], [ %372, %210 ]
  %.pn48177 = phi ptr addrspace(1) [ %152, %.lr.ph ], [ %371, %210 ]
  %.pn64176 = phi ptr addrspace(1) [ %151, %.lr.ph ], [ %370, %210 ]
  %215 = phi float [ 0.000000e+00, %.lr.ph ], [ %331, %210 ]
  %216 = phi float [ 0.000000e+00, %.lr.ph ], [ %332, %210 ]
  %217 = phi float [ 0.000000e+00, %.lr.ph ], [ %333, %210 ]
  %218 = phi float [ 0.000000e+00, %.lr.ph ], [ %334, %210 ]
  %219 = phi float [ 0.000000e+00, %.lr.ph ], [ %336, %210 ]
  %220 = phi float [ 0.000000e+00, %.lr.ph ], [ %337, %210 ]
  %221 = phi float [ 0.000000e+00, %.lr.ph ], [ %338, %210 ]
  %222 = phi float [ 0.000000e+00, %.lr.ph ], [ %339, %210 ]
  %223 = phi float [ 0.000000e+00, %.lr.ph ], [ %341, %210 ]
  %224 = phi float [ 0.000000e+00, %.lr.ph ], [ %342, %210 ]
  %225 = phi float [ 0.000000e+00, %.lr.ph ], [ %343, %210 ]
  %226 = phi float [ 0.000000e+00, %.lr.ph ], [ %344, %210 ]
  %227 = phi float [ 0.000000e+00, %.lr.ph ], [ %346, %210 ]
  %228 = phi float [ 0.000000e+00, %.lr.ph ], [ %347, %210 ]
  %229 = phi float [ 0.000000e+00, %.lr.ph ], [ %348, %210 ]
  %230 = phi float [ 0.000000e+00, %.lr.ph ], [ %349, %210 ]
  %231 = phi float [ 0.000000e+00, %.lr.ph ], [ %351, %210 ]
  %232 = phi float [ 0.000000e+00, %.lr.ph ], [ %352, %210 ]
  %233 = phi float [ 0.000000e+00, %.lr.ph ], [ %353, %210 ]
  %234 = phi float [ 0.000000e+00, %.lr.ph ], [ %354, %210 ]
  %235 = phi float [ 0.000000e+00, %.lr.ph ], [ %356, %210 ]
  %236 = phi float [ 0.000000e+00, %.lr.ph ], [ %357, %210 ]
  %237 = phi float [ 0.000000e+00, %.lr.ph ], [ %358, %210 ]
  %238 = phi float [ 0.000000e+00, %.lr.ph ], [ %359, %210 ]
  %239 = phi float [ 0.000000e+00, %.lr.ph ], [ %361, %210 ]
  %240 = phi float [ 0.000000e+00, %.lr.ph ], [ %362, %210 ]
  %241 = phi float [ 0.000000e+00, %.lr.ph ], [ %363, %210 ]
  %242 = phi float [ 0.000000e+00, %.lr.ph ], [ %364, %210 ]
  %243 = phi float [ 0.000000e+00, %.lr.ph ], [ %366, %210 ]
  %244 = phi float [ 0.000000e+00, %.lr.ph ], [ %367, %210 ]
  %245 = phi float [ 0.000000e+00, %.lr.ph ], [ %368, %210 ]
  %246 = phi float [ 0.000000e+00, %.lr.ph ], [ %369, %210 ]
  %247 = phi i32 [ 0, %.lr.ph ], [ %419, %210 ]
  %248 = extractvalue { i32, i32, i32, i32 } %.pn199, 3, !dbg !44
  %249 = extractvalue { i32, i32, i32, i32 } %.pn199, 2, !dbg !44
  %250 = extractvalue { i32, i32, i32, i32 } %.pn199, 1, !dbg !44
  %251 = extractvalue { i32, i32, i32, i32 } %.pn199, 0, !dbg !44
  %252 = extractvalue { i32, i32, i32, i32 } %.pn195, 3, !dbg !44
  %253 = extractvalue { i32, i32, i32, i32 } %.pn195, 2, !dbg !44
  %254 = extractvalue { i32, i32, i32, i32 } %.pn195, 1, !dbg !44
  %255 = extractvalue { i32, i32, i32, i32 } %.pn195, 0, !dbg !44
  %256 = extractvalue { i32, i32, i32, i32 } %.pn191, 3, !dbg !44
  %257 = extractvalue { i32, i32, i32, i32 } %.pn191, 2, !dbg !44
  %258 = extractvalue { i32, i32, i32, i32 } %.pn191, 1, !dbg !44
  %259 = extractvalue { i32, i32, i32, i32 } %.pn191, 0, !dbg !44
  %260 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !44
  %261 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !44
  %262 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !44
  %263 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !44
  %264 = icmp slt i32 %247, %201, !dbg !44
  %265 = getelementptr half, ptr addrspace(3) %212, i64 %204, !dbg !46
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %265) #2, !dbg !46
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !46
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !46
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !46
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !46
  %271 = getelementptr i8, ptr addrspace(3) %265, i64 2048, !dbg !46
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %271) #2, !dbg !46
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !46
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !46
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !46
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !46
  %277 = getelementptr i8, ptr addrspace(3) %211, i64 1024, !dbg !48
  %278 = getelementptr half, ptr addrspace(3) %277, i64 %207, !dbg !48
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %278) #2, !dbg !48
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !48
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !48
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !48
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !48
  %284 = getelementptr half, ptr addrspace(3) %277, i64 %209, !dbg !48
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %284) #2, !dbg !48
  %286 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !48
  %287 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !48
  %288 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !48
  %289 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !48
  %290 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %215, float %216, float %217, float %218, i32 %251, i32 %250, i32 %249, i32 %248, i32 %259, i32 %258) #2, !dbg !52
  %291 = extractvalue { float, float, float, float } %290, 0, !dbg !52
  %292 = extractvalue { float, float, float, float } %290, 1, !dbg !52
  %293 = extractvalue { float, float, float, float } %290, 2, !dbg !52
  %294 = extractvalue { float, float, float, float } %290, 3, !dbg !52
  %295 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %219, float %220, float %221, float %222, i32 %251, i32 %250, i32 %249, i32 %248, i32 %257, i32 %256) #2, !dbg !52
  %296 = extractvalue { float, float, float, float } %295, 0, !dbg !52
  %297 = extractvalue { float, float, float, float } %295, 1, !dbg !52
  %298 = extractvalue { float, float, float, float } %295, 2, !dbg !52
  %299 = extractvalue { float, float, float, float } %295, 3, !dbg !52
  %300 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %223, float %224, float %225, float %226, i32 %251, i32 %250, i32 %249, i32 %248, i32 %263, i32 %262) #2, !dbg !52
  %301 = extractvalue { float, float, float, float } %300, 0, !dbg !52
  %302 = extractvalue { float, float, float, float } %300, 1, !dbg !52
  %303 = extractvalue { float, float, float, float } %300, 2, !dbg !52
  %304 = extractvalue { float, float, float, float } %300, 3, !dbg !52
  %305 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %227, float %228, float %229, float %230, i32 %251, i32 %250, i32 %249, i32 %248, i32 %261, i32 %260) #2, !dbg !52
  %306 = extractvalue { float, float, float, float } %305, 0, !dbg !52
  %307 = extractvalue { float, float, float, float } %305, 1, !dbg !52
  %308 = extractvalue { float, float, float, float } %305, 2, !dbg !52
  %309 = extractvalue { float, float, float, float } %305, 3, !dbg !52
  %310 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %231, float %232, float %233, float %234, i32 %255, i32 %254, i32 %253, i32 %252, i32 %259, i32 %258) #2, !dbg !52
  %311 = extractvalue { float, float, float, float } %310, 0, !dbg !52
  %312 = extractvalue { float, float, float, float } %310, 1, !dbg !52
  %313 = extractvalue { float, float, float, float } %310, 2, !dbg !52
  %314 = extractvalue { float, float, float, float } %310, 3, !dbg !52
  %315 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %235, float %236, float %237, float %238, i32 %255, i32 %254, i32 %253, i32 %252, i32 %257, i32 %256) #2, !dbg !52
  %316 = extractvalue { float, float, float, float } %315, 0, !dbg !52
  %317 = extractvalue { float, float, float, float } %315, 1, !dbg !52
  %318 = extractvalue { float, float, float, float } %315, 2, !dbg !52
  %319 = extractvalue { float, float, float, float } %315, 3, !dbg !52
  %320 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %239, float %240, float %241, float %242, i32 %255, i32 %254, i32 %253, i32 %252, i32 %263, i32 %262) #2, !dbg !52
  %321 = extractvalue { float, float, float, float } %320, 0, !dbg !52
  %322 = extractvalue { float, float, float, float } %320, 1, !dbg !52
  %323 = extractvalue { float, float, float, float } %320, 2, !dbg !52
  %324 = extractvalue { float, float, float, float } %320, 3, !dbg !52
  %325 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %243, float %244, float %245, float %246, i32 %255, i32 %254, i32 %253, i32 %252, i32 %261, i32 %260) #2, !dbg !52
  %326 = extractvalue { float, float, float, float } %325, 0, !dbg !52
  %327 = extractvalue { float, float, float, float } %325, 1, !dbg !52
  %328 = extractvalue { float, float, float, float } %325, 2, !dbg !52
  %329 = extractvalue { float, float, float, float } %325, 3, !dbg !52
  %330 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %291, float %292, float %293, float %294, i32 %267, i32 %268, i32 %269, i32 %270, i32 %280, i32 %281) #2, !dbg !52
  %331 = extractvalue { float, float, float, float } %330, 0, !dbg !52
  %332 = extractvalue { float, float, float, float } %330, 1, !dbg !52
  %333 = extractvalue { float, float, float, float } %330, 2, !dbg !52
  %334 = extractvalue { float, float, float, float } %330, 3, !dbg !52
  %335 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %296, float %297, float %298, float %299, i32 %267, i32 %268, i32 %269, i32 %270, i32 %282, i32 %283) #2, !dbg !52
  %336 = extractvalue { float, float, float, float } %335, 0, !dbg !52
  %337 = extractvalue { float, float, float, float } %335, 1, !dbg !52
  %338 = extractvalue { float, float, float, float } %335, 2, !dbg !52
  %339 = extractvalue { float, float, float, float } %335, 3, !dbg !52
  %340 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %301, float %302, float %303, float %304, i32 %267, i32 %268, i32 %269, i32 %270, i32 %286, i32 %287) #2, !dbg !52
  %341 = extractvalue { float, float, float, float } %340, 0, !dbg !52
  %342 = extractvalue { float, float, float, float } %340, 1, !dbg !52
  %343 = extractvalue { float, float, float, float } %340, 2, !dbg !52
  %344 = extractvalue { float, float, float, float } %340, 3, !dbg !52
  %345 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %306, float %307, float %308, float %309, i32 %267, i32 %268, i32 %269, i32 %270, i32 %288, i32 %289) #2, !dbg !52
  %346 = extractvalue { float, float, float, float } %345, 0, !dbg !52
  %347 = extractvalue { float, float, float, float } %345, 1, !dbg !52
  %348 = extractvalue { float, float, float, float } %345, 2, !dbg !52
  %349 = extractvalue { float, float, float, float } %345, 3, !dbg !52
  %350 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %311, float %312, float %313, float %314, i32 %273, i32 %274, i32 %275, i32 %276, i32 %280, i32 %281) #2, !dbg !52
  %351 = extractvalue { float, float, float, float } %350, 0, !dbg !52
  %352 = extractvalue { float, float, float, float } %350, 1, !dbg !52
  %353 = extractvalue { float, float, float, float } %350, 2, !dbg !52
  %354 = extractvalue { float, float, float, float } %350, 3, !dbg !52
  %355 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %316, float %317, float %318, float %319, i32 %273, i32 %274, i32 %275, i32 %276, i32 %282, i32 %283) #2, !dbg !52
  %356 = extractvalue { float, float, float, float } %355, 0, !dbg !52
  %357 = extractvalue { float, float, float, float } %355, 1, !dbg !52
  %358 = extractvalue { float, float, float, float } %355, 2, !dbg !52
  %359 = extractvalue { float, float, float, float } %355, 3, !dbg !52
  %360 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %321, float %322, float %323, float %324, i32 %273, i32 %274, i32 %275, i32 %276, i32 %286, i32 %287) #2, !dbg !52
  %361 = extractvalue { float, float, float, float } %360, 0, !dbg !52
  %362 = extractvalue { float, float, float, float } %360, 1, !dbg !52
  %363 = extractvalue { float, float, float, float } %360, 2, !dbg !52
  %364 = extractvalue { float, float, float, float } %360, 3, !dbg !52
  %365 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %326, float %327, float %328, float %329, i32 %273, i32 %274, i32 %275, i32 %276, i32 %288, i32 %289) #2, !dbg !52
  %366 = extractvalue { float, float, float, float } %365, 0, !dbg !52
  %367 = extractvalue { float, float, float, float } %365, 1, !dbg !52
  %368 = extractvalue { float, float, float, float } %365, 2, !dbg !52
  %369 = extractvalue { float, float, float, float } %365, 3, !dbg !52
  %370 = getelementptr i8, ptr addrspace(1) %.pn64176, i64 64, !dbg !49
  %371 = getelementptr i8, ptr addrspace(1) %.pn48177, i64 64, !dbg !49
  %372 = getelementptr i8, ptr addrspace(1) %.pn32178, i64 64, !dbg !49
  %373 = getelementptr i8, ptr addrspace(1) %.pn16179, i64 64, !dbg !49
  %374 = getelementptr half, ptr addrspace(1) %.pn96180, i64 %108, !dbg !50
  %375 = getelementptr half, ptr addrspace(1) %.pn80181, i64 %108, !dbg !50
  %376 = add i32 %214, 1, !dbg !44
  %377 = icmp slt i32 %376, 4, !dbg !44
  %378 = select i1 %377, i32 %376, i32 0, !dbg !44
  %379 = shl i32 %247, 5, !dbg !51
  %380 = sub i32 %.neg175, %379, !dbg !51
  %381 = icmp slt i32 %43, %380, !dbg !45
  %382 = shl i32 %378, 11, !dbg !46
  %383 = sext i32 %382 to i64, !dbg !46
  %384 = getelementptr half, ptr addrspace(3) @global_smem, i64 %383, !dbg !46
  %385 = and i1 %264, %381, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %386 = getelementptr half, ptr addrspace(3) %384, i64 %80, !dbg !46
  %387 = getelementptr half, ptr addrspace(3) %384, i64 %84, !dbg !46
  %388 = getelementptr half, ptr addrspace(3) %384, i64 %88, !dbg !46
  %389 = getelementptr half, ptr addrspace(3) %384, i64 %92, !dbg !46
  %390 = select i1 %385, i32 16, i32 0, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %386, ptr addrspace(1) %370, i32 %390, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %387, ptr addrspace(1) %371, i32 %390, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %388, ptr addrspace(1) %372, i32 %390, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %389, ptr addrspace(1) %373, i32 %390, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %391 = icmp slt i32 %29, %380, !dbg !47
  %392 = icmp slt i32 %30, %380, !dbg !47
  %393 = shl i32 %378, 10, !dbg !48
  %394 = sext i32 %393 to i64, !dbg !48
  %395 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %394, !dbg !48
  %396 = and i1 %264, %391, !dbg !44
  %397 = and i1 %264, %392, !dbg !44
  %398 = getelementptr half, ptr addrspace(3) %395, i64 %80, !dbg !48
  %399 = getelementptr half, ptr addrspace(3) %395, i64 %84, !dbg !48
  %400 = select i1 %396, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %398, ptr addrspace(1) %374, i32 %400, i1 true) #2, !dbg !48
  %401 = select i1 %397, i32 16, i32 0, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %399, ptr addrspace(1) %375, i32 %401, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %402 = add i32 %213, 1, !dbg !44
  %403 = icmp slt i32 %402, 4, !dbg !44
  %404 = select i1 %403, i32 %402, i32 0, !dbg !44
  %405 = shl i32 %404, 11, !dbg !46
  %406 = sext i32 %405 to i64, !dbg !46
  %407 = getelementptr half, ptr addrspace(3) @global_smem, i64 %406, !dbg !46
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %408 = shl i32 %404, 10, !dbg !48
  %409 = sext i32 %408 to i64, !dbg !48
  %410 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %409, !dbg !48
  %411 = getelementptr half, ptr addrspace(3) %407, i64 %184, !dbg !46
  %412 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %411) #2, !dbg !46
  %413 = getelementptr i8, ptr addrspace(3) %411, i64 2048, !dbg !46
  %414 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %413) #2, !dbg !46
  %415 = getelementptr half, ptr addrspace(3) %410, i64 %191, !dbg !48
  %416 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %415) #2, !dbg !48
  %417 = getelementptr half, ptr addrspace(3) %410, i64 %198, !dbg !48
  %418 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %417) #2, !dbg !48
  %419 = add nuw nsw i32 %247, 1, !dbg !44
  %420 = icmp slt i32 %419, %71, !dbg !44
  br i1 %420, label %210, label %._crit_edge.loopexit, !dbg !44

._crit_edge.loopexit:                             ; preds = %210
  %421 = insertelement <32 x float> poison, float %331, i64 0, !dbg !53
  %422 = insertelement <32 x float> %421, float %332, i64 1, !dbg !53
  %423 = insertelement <32 x float> %422, float %333, i64 2, !dbg !53
  %424 = insertelement <32 x float> %423, float %334, i64 3, !dbg !53
  %425 = insertelement <32 x float> %424, float %336, i64 4, !dbg !53
  %426 = insertelement <32 x float> %425, float %337, i64 5, !dbg !53
  %427 = insertelement <32 x float> %426, float %338, i64 6, !dbg !53
  %428 = insertelement <32 x float> %427, float %339, i64 7, !dbg !53
  %429 = insertelement <32 x float> %428, float %341, i64 8, !dbg !53
  %430 = insertelement <32 x float> %429, float %342, i64 9, !dbg !53
  %431 = insertelement <32 x float> %430, float %343, i64 10, !dbg !53
  %432 = insertelement <32 x float> %431, float %344, i64 11, !dbg !53
  %433 = insertelement <32 x float> %432, float %346, i64 12, !dbg !53
  %434 = insertelement <32 x float> %433, float %347, i64 13, !dbg !53
  %435 = insertelement <32 x float> %434, float %348, i64 14, !dbg !53
  %436 = insertelement <32 x float> %435, float %349, i64 15, !dbg !53
  %437 = insertelement <32 x float> %436, float %351, i64 16, !dbg !53
  %438 = insertelement <32 x float> %437, float %352, i64 17, !dbg !53
  %439 = insertelement <32 x float> %438, float %353, i64 18, !dbg !53
  %440 = insertelement <32 x float> %439, float %354, i64 19, !dbg !53
  %441 = insertelement <32 x float> %440, float %356, i64 20, !dbg !53
  %442 = insertelement <32 x float> %441, float %357, i64 21, !dbg !53
  %443 = insertelement <32 x float> %442, float %358, i64 22, !dbg !53
  %444 = insertelement <32 x float> %443, float %359, i64 23, !dbg !53
  %445 = insertelement <32 x float> %444, float %361, i64 24, !dbg !53
  %446 = insertelement <32 x float> %445, float %362, i64 25, !dbg !53
  %447 = insertelement <32 x float> %446, float %363, i64 26, !dbg !53
  %448 = insertelement <32 x float> %447, float %364, i64 27, !dbg !53
  %449 = insertelement <32 x float> %448, float %366, i64 28, !dbg !53
  %450 = insertelement <32 x float> %449, float %367, i64 29, !dbg !53
  %451 = insertelement <32 x float> %450, float %368, i64 30, !dbg !53
  %452 = insertelement <32 x float> %451, float %369, i64 31, !dbg !53
  %453 = fptrunc <32 x float> %452 to <32 x half>, !dbg !53
  br label %._crit_edge, !dbg !44

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %454 = phi <32 x half> [ zeroinitializer, %9 ], [ %453, %._crit_edge.loopexit ]
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %455 = mul i32 %33, %8, !dbg !54
  %456 = mul i32 %34, %8, !dbg !54
  %457 = mul i32 %35, %8, !dbg !54
  %458 = mul i32 %36, %8, !dbg !54
  %459 = sext i32 %455 to i64, !dbg !55
  %460 = getelementptr half, ptr addrspace(1) %2, i64 %459, !dbg !55
  %461 = sext i32 %456 to i64, !dbg !55
  %462 = getelementptr half, ptr addrspace(1) %2, i64 %461, !dbg !55
  %463 = sext i32 %457 to i64, !dbg !55
  %464 = getelementptr half, ptr addrspace(1) %2, i64 %463, !dbg !55
  %465 = sext i32 %458 to i64, !dbg !55
  %466 = getelementptr half, ptr addrspace(1) %2, i64 %465, !dbg !55
  %467 = sext i32 %44 to i64, !dbg !56
  %468 = getelementptr half, ptr addrspace(1) %460, i64 %467, !dbg !56
  %469 = getelementptr half, ptr addrspace(1) %462, i64 %467, !dbg !56
  %470 = getelementptr half, ptr addrspace(1) %464, i64 %467, !dbg !56
  %471 = getelementptr half, ptr addrspace(1) %466, i64 %467, !dbg !56
  %472 = icmp slt i32 %33, %3, !dbg !57
  %473 = icmp slt i32 %34, %3, !dbg !57
  %474 = icmp slt i32 %35, %3, !dbg !57
  %475 = icmp slt i32 %36, %3, !dbg !57
  %476 = icmp slt i32 %44, %4, !dbg !58
  %477 = and i1 %472, %476, !dbg !59
  %478 = and i1 %473, %476, !dbg !59
  %479 = and i1 %474, %476, !dbg !59
  %480 = and i1 %475, %476, !dbg !59
  %481 = lshr i32 %26, 2, !dbg !60
  %482 = and i32 %25, 3, !dbg !60
  %483 = shl nuw nsw i32 %482, 1, !dbg !60
  %484 = or disjoint i32 %177, %481, !dbg !60
  %485 = mul nuw nsw i32 %484, 40, !dbg !60
  %486 = or disjoint i32 %485, %483, !dbg !60
  %487 = zext nneg i32 %486 to i64, !dbg !60
  %488 = getelementptr half, ptr addrspace(3) @global_smem, i64 %487, !dbg !60
  %489 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !60
  store <2 x half> %489, ptr addrspace(3) %488, align 4, !dbg !60
  %490 = add nuw nsw i32 %485, 320, !dbg !60
  %491 = or disjoint i32 %490, %483, !dbg !60
  %492 = zext nneg i32 %491 to i64, !dbg !60
  %493 = getelementptr half, ptr addrspace(3) @global_smem, i64 %492, !dbg !60
  %494 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !60
  store <2 x half> %494, ptr addrspace(3) %493, align 4, !dbg !60
  %495 = or disjoint i32 %483, 8, !dbg !60
  %496 = add nuw nsw i32 %485, %495, !dbg !60
  %497 = zext nneg i32 %496 to i64, !dbg !60
  %498 = getelementptr half, ptr addrspace(3) @global_smem, i64 %497, !dbg !60
  %499 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !60
  store <2 x half> %499, ptr addrspace(3) %498, align 4, !dbg !60
  %500 = add nuw nsw i32 %490, %495, !dbg !60
  %501 = zext nneg i32 %500 to i64, !dbg !60
  %502 = getelementptr half, ptr addrspace(3) @global_smem, i64 %501, !dbg !60
  %503 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !60
  store <2 x half> %503, ptr addrspace(3) %502, align 4, !dbg !60
  %504 = or disjoint i32 %483, 16, !dbg !60
  %505 = add nuw nsw i32 %485, %504, !dbg !60
  %506 = zext nneg i32 %505 to i64, !dbg !60
  %507 = getelementptr half, ptr addrspace(3) @global_smem, i64 %506, !dbg !60
  %508 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !60
  store <2 x half> %508, ptr addrspace(3) %507, align 4, !dbg !60
  %509 = add nuw nsw i32 %490, %504, !dbg !60
  %510 = zext nneg i32 %509 to i64, !dbg !60
  %511 = getelementptr half, ptr addrspace(3) @global_smem, i64 %510, !dbg !60
  %512 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !60
  store <2 x half> %512, ptr addrspace(3) %511, align 4, !dbg !60
  %513 = or disjoint i32 %483, 24, !dbg !60
  %514 = add nuw nsw i32 %485, %513, !dbg !60
  %515 = zext nneg i32 %514 to i64, !dbg !60
  %516 = getelementptr half, ptr addrspace(3) @global_smem, i64 %515, !dbg !60
  %517 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !60
  store <2 x half> %517, ptr addrspace(3) %516, align 4, !dbg !60
  %518 = add nuw nsw i32 %490, %513, !dbg !60
  %519 = zext nneg i32 %518 to i64, !dbg !60
  %520 = getelementptr half, ptr addrspace(3) @global_smem, i64 %519, !dbg !60
  %521 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !60
  store <2 x half> %521, ptr addrspace(3) %520, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %522 = shl nuw nsw i32 %173, 3, !dbg !60
  %523 = or disjoint i32 %522, %481, !dbg !60
  %524 = shl nuw nsw i32 %482, 3, !dbg !60
  %525 = mul nuw nsw i32 %523, 40, !dbg !60
  %526 = add nuw nsw i32 %525, %524, !dbg !60
  %527 = zext nneg i32 %526 to i64, !dbg !60
  %528 = getelementptr half, ptr addrspace(3) @global_smem, i64 %527, !dbg !60
  %529 = load <4 x i32>, ptr addrspace(3) %528, align 16, !dbg !60
  %530 = getelementptr i8, ptr addrspace(3) %528, i64 1280, !dbg !60
  %531 = load <4 x i32>, ptr addrspace(3) %530, align 16, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %532 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !60
  store <2 x half> %532, ptr addrspace(3) %488, align 4, !dbg !60
  %533 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !60
  store <2 x half> %533, ptr addrspace(3) %493, align 4, !dbg !60
  %534 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !60
  store <2 x half> %534, ptr addrspace(3) %498, align 4, !dbg !60
  %535 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !60
  store <2 x half> %535, ptr addrspace(3) %502, align 4, !dbg !60
  %536 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !60
  store <2 x half> %536, ptr addrspace(3) %507, align 4, !dbg !60
  %537 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !60
  store <2 x half> %537, ptr addrspace(3) %511, align 4, !dbg !60
  %538 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !60
  store <2 x half> %538, ptr addrspace(3) %516, align 4, !dbg !60
  %539 = shufflevector <32 x half> %454, <32 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !60
  store <2 x half> %539, ptr addrspace(3) %520, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %540 = load <4 x i32>, ptr addrspace(3) %528, align 16, !dbg !60
  %541 = load <4 x i32>, ptr addrspace(3) %530, align 16, !dbg !60
  %.extract = extractelement <4 x i32> %529, i64 0, !dbg !60
  %.extract146 = extractelement <4 x i32> %529, i64 1, !dbg !60
  %.extract148 = extractelement <4 x i32> %529, i64 2, !dbg !60
  %.extract150 = extractelement <4 x i32> %529, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract146, i32 %.extract148, i32 %.extract150, ptr addrspace(1) %468, i1 %477) #2, !dbg !60
  %.extract152 = extractelement <4 x i32> %531, i64 0, !dbg !60
  %.extract154 = extractelement <4 x i32> %531, i64 1, !dbg !60
  %.extract156 = extractelement <4 x i32> %531, i64 2, !dbg !60
  %.extract158 = extractelement <4 x i32> %531, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract152, i32 %.extract154, i32 %.extract156, i32 %.extract158, ptr addrspace(1) %469, i1 %478) #2, !dbg !60
  %.extract160 = extractelement <4 x i32> %540, i64 0, !dbg !60
  %.extract162 = extractelement <4 x i32> %540, i64 1, !dbg !60
  %.extract164 = extractelement <4 x i32> %540, i64 2, !dbg !60
  %.extract166 = extractelement <4 x i32> %540, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract160, i32 %.extract162, i32 %.extract164, i32 %.extract166, ptr addrspace(1) %470, i1 %479) #2, !dbg !60
  %.extract168 = extractelement <4 x i32> %541, i64 0, !dbg !60
  %.extract170 = extractelement <4 x i32> %541, i64 1, !dbg !60
  %.extract172 = extractelement <4 x i32> %541, i64 2, !dbg !60
  %.extract174 = extractelement <4 x i32> %541, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract168, i32 %.extract170, i32 %.extract172, i32 %.extract174, ptr addrspace(1) %471, i1 %480) #2, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matrix_multiplication.py", directory: "/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication")
!4 = !{ptr @matmul_kernel, !"kernel", i32 1}
!5 = !{ptr @matmul_kernel, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !3, file: !3, line: 260, type: !8, scopeLine: 260, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 292, column: 24, scope: !7)
!11 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !7, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/data_ssd1/zjy_home/frameworks/cuda/triton/python/triton/language")
!14 = !DILocation(line: 293, column: 27, scope: !7)
!15 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !17)
!17 = !DILocation(line: 294, column: 27, scope: !7)
!18 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !17)
!19 = !DILocation(line: 295, column: 38, scope: !7)
!20 = !DILocation(line: 296, column: 22, scope: !7)
!21 = !DILocation(line: 297, column: 29, scope: !7)
!22 = !DILocation(line: 299, column: 20, scope: !7)
!23 = !DILocation(line: 299, column: 33, scope: !7)
!24 = !DILocation(line: 304, column: 40, scope: !7)
!25 = !DILocation(line: 302, column: 8, scope: !7)
!26 = !DILocation(line: 313, column: 23, scope: !7)
!27 = !DILocation(line: 313, column: 51, scope: !7)
!28 = !DILocation(line: 313, column: 38, scope: !7)
!29 = !DILocation(line: 313, column: 68, scope: !7)
!30 = !DILocation(line: 314, column: 23, scope: !7)
!31 = !DILocation(line: 314, column: 51, scope: !7)
!32 = !DILocation(line: 314, column: 38, scope: !7)
!33 = !DILocation(line: 314, column: 68, scope: !7)
!34 = !DILocation(line: 316, column: 41, scope: !7)
!35 = !DILocation(line: 316, column: 53, scope: !7)
!36 = !DILocation(line: 316, column: 22, scope: !7)
!37 = !DILocation(line: 318, column: 40, scope: !7)
!38 = !DILocation(line: 318, column: 52, scope: !7)
!39 = !DILocation(line: 318, column: 22, scope: !7)
!40 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !41)
!41 = !DILocation(line: 327, column: 33, scope: !7)
!42 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !41)
!43 = !DILocation(line: 336, column: 33, scope: !7)
!44 = !DILocation(line: 327, column: 22, scope: !7)
!45 = !DILocation(line: 330, column: 51, scope: !7)
!46 = !DILocation(line: 330, column: 20, scope: !7)
!47 = !DILocation(line: 331, column: 51, scope: !7)
!48 = !DILocation(line: 331, column: 20, scope: !7)
!49 = !DILocation(line: 335, column: 18, scope: !7)
!50 = !DILocation(line: 336, column: 18, scope: !7)
!51 = !DILocation(line: 330, column: 55, scope: !7)
!52 = !DILocation(line: 333, column: 35, scope: !7)
!53 = !DILocation(line: 341, column: 23, scope: !7)
!54 = !DILocation(line: 347, column: 33, scope: !7)
!55 = !DILocation(line: 347, column: 21, scope: !7)
!56 = !DILocation(line: 347, column: 52, scope: !7)
!57 = !DILocation(line: 348, column: 33, scope: !7)
!58 = !DILocation(line: 348, column: 58, scope: !7)
!59 = !DILocation(line: 348, column: 39, scope: !7)
!60 = !DILocation(line: 349, column: 21, scope: !7)
!61 = !DILocation(line: 349, column: 4, scope: !7)
