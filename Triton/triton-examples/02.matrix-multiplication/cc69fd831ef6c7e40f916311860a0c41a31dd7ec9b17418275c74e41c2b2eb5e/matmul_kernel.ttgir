#blocked = #triton_gpu.blocked<{sizePerThread = [1, 16], threadsPerWarp = [16, 2], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [16, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":260:0)
#mma = #triton_gpu.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 1], instrShape = [16, 8]}>
#shared = #triton_gpu.shared<{vec = 16, perPhase = 4, maxPhase = 2, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 16, perPhase = 4, maxPhase = 2, order = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:80", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":260:0), %arg1: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":260:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":260:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":260:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":260:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":260:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":260:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":260:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":260:0)) attributes {noinline = false} {
    %c96_i32 = arith.constant 96 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<64x32xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<32> : tensor<32x32xi32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c63_i32 : i32 loc(#loc56)
    %2 = arith.divsi %1, %c64_i32 : i32 loc(#loc57)
    %3 = arith.addi %arg4, %c31_i32 : i32 loc(#loc58)
    %4 = arith.divsi %3, %c32_i32 : i32 loc(#loc59)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc7)
    %6 = arith.divsi %0, %5 : i32 loc(#loc8)
    %7 = arith.muli %6, %c8_i32 : i32 loc(#loc9)
    %8 = arith.subi %2, %7 : i32 loc(#loc10)
    %9 = arith.minsi %8, %c8_i32 : i32 loc(#loc11)
    %10 = arith.remsi %0, %5 : i32 loc(#loc12)
    %11 = arith.remsi %10, %9 : i32 loc(#loc13)
    %12 = arith.addi %7, %11 : i32 loc(#loc14)
    %13 = arith.divsi %10, %9 : i32 loc(#loc15)
    %14 = arith.muli %12, %c64_i32 : i32 loc(#loc16)
    %15 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc17)
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc17)
    %17 = tt.splat %14 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %18 = tt.splat %14 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc18)
    %19 = arith.addi %17, %15 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %20 = arith.addi %18, %16 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc18)
    %21 = tt.splat %arg3 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc19)
    %22 = arith.remsi %19, %21 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc19)
    %23 = arith.muli %13, %c32_i32 : i32 loc(#loc20)
    %24 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc21)
    %25 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc21)
    %26 = tt.splat %23 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc22)
    %27 = tt.splat %23 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc22)
    %28 = arith.addi %26, %24 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc22)
    %29 = arith.addi %27, %25 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc22)
    %30 = tt.splat %arg4 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc23)
    %31 = arith.remsi %28, %30 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc23)
    %32 = tt.expand_dims %22 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc24)
    %33 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc25)
    %34 = arith.muli %32, %33 : tensor<64x1xi32, #blocked> loc(#loc25)
    %35 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc26)
    %36 = tt.expand_dims %35 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc26)
    %37 = tt.broadcast %34 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc27)
    %38 = tt.broadcast %36 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc27)
    %39 = arith.addi %37, %38 : tensor<64x32xi32, #blocked> loc(#loc27)
    %40 = tt.splat %arg0 : !tt.ptr<f8E5M2> -> tensor<64x32x!tt.ptr<f8E5M2>, #blocked> loc(#loc28)
    %41 = tt.addptr %40, %39 : tensor<64x32x!tt.ptr<f8E5M2>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc28)
    %42 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %43 = tt.expand_dims %42 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc29)
    %44 = tt.expand_dims %31 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc30)
    %45 = tt.splat %arg7 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc31)
    %46 = arith.muli %44, %45 : tensor<1x32xi32, #blocked1> loc(#loc31)
    %47 = tt.broadcast %43 : tensor<32x1xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc32)
    %48 = tt.broadcast %46 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc32)
    %49 = arith.addi %47, %48 : tensor<32x32xi32, #blocked1> loc(#loc32)
    %50 = tt.splat %arg1 : !tt.ptr<f8E5M2> -> tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> loc(#loc33)
    %51 = tt.addptr %50, %49 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc33)
    %52 = arith.addi %arg5, %c31_i32 : i32 loc(#loc60)
    %53 = arith.divsi %52, %c32_i32 : i32 loc(#loc61)
    %54 = tt.fp_to_fp %cst, rounding = rtne : tensor<64x32xf32, #blocked> -> tensor<64x32xf8E5M2, #blocked> loc(#loc35)
    %55 = tt.fp_to_fp %cst_0, rounding = rtne : tensor<32x32xf32, #blocked1> -> tensor<32x32xf8E5M2, #blocked1> loc(#loc36)
    %56 = triton_gpu.local_alloc  : () -> !tt.memdesc<4x64x32xf8E5M2, #shared, mutable> loc(#loc35)
    %57 = triton_gpu.local_alloc  : () -> !tt.memdesc<4x32x32xf8E5M2, #shared1, mutable> loc(#loc36)
    %58 = arith.cmpi sgt, %53, %c0_i32 : i32 loc(#loc37)
    %59 = tt.splat %arg5 : i32 -> tensor<1x32xi32, #blocked> loc(#loc38)
    %60 = arith.cmpi slt, %36, %59 : tensor<1x32xi32, #blocked> loc(#loc38)
    %61 = tt.broadcast %60 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc35)
    %62 = triton_gpu.memdesc_subview %56[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x64x32xf8E5M2, #shared, mutable> -> !tt.memdesc<64x32xf8E5M2, #shared, mutable> loc(#loc35)
    %63 = tt.splat %58 : i1 -> tensor<64x32xi1, #blocked> loc(#loc37)
    %64 = arith.andi %63, %61 : tensor<64x32xi1, #blocked> loc(#loc37)
    %65 = triton_gpu.async_copy_global_to_local %41, %62 mask %64 other %54 : tensor<64x32x!tt.ptr<f8E5M2>, #blocked> -> <64x32xf8E5M2, #shared, mutable> loc(#loc35)
    %66 = triton_gpu.async_commit_group %65 loc(#loc35)
    %67 = tt.splat %arg5 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc39)
    %68 = arith.cmpi slt, %43, %67 : tensor<32x1xi32, #blocked1> loc(#loc39)
    %69 = tt.broadcast %68 : tensor<32x1xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc36)
    %70 = triton_gpu.memdesc_subview %57[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xf8E5M2, #shared1, mutable> -> !tt.memdesc<32x32xf8E5M2, #shared1, mutable> loc(#loc36)
    %71 = tt.splat %58 : i1 -> tensor<32x32xi1, #blocked1> loc(#loc37)
    %72 = arith.andi %71, %69 : tensor<32x32xi1, #blocked1> loc(#loc37)
    %73 = triton_gpu.async_copy_global_to_local %51, %70 mask %72 other %55 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> -> <32x32xf8E5M2, #shared1, mutable> loc(#loc36)
    %74 = triton_gpu.async_commit_group %73 loc(#loc36)
    %75 = arith.cmpi sgt, %53, %c1_i32 : i32 loc(#loc37)
    %76 = tt.addptr %41, %cst_1 : tensor<64x32x!tt.ptr<f8E5M2>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc40)
    %77 = tt.addptr %51, %cst_2 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc41)
    %78 = arith.subi %arg5, %c32_i32 : i32 loc(#loc42)
    %79 = tt.splat %78 : i32 -> tensor<1x32xi32, #blocked> loc(#loc38)
    %80 = arith.cmpi slt, %36, %79 : tensor<1x32xi32, #blocked> loc(#loc38)
    %81 = tt.broadcast %80 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc35)
    %82 = triton_gpu.memdesc_subview %56[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x64x32xf8E5M2, #shared, mutable> -> !tt.memdesc<64x32xf8E5M2, #shared, mutable> loc(#loc35)
    %83 = tt.splat %75 : i1 -> tensor<64x32xi1, #blocked> loc(#loc37)
    %84 = arith.andi %83, %81 : tensor<64x32xi1, #blocked> loc(#loc37)
    %85 = triton_gpu.async_copy_global_to_local %76, %82 mask %84 other %54 : tensor<64x32x!tt.ptr<f8E5M2>, #blocked> -> <64x32xf8E5M2, #shared, mutable> loc(#loc35)
    %86 = triton_gpu.async_commit_group %85 loc(#loc35)
    %87 = tt.splat %78 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc39)
    %88 = arith.cmpi slt, %43, %87 : tensor<32x1xi32, #blocked1> loc(#loc39)
    %89 = tt.broadcast %88 : tensor<32x1xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc36)
    %90 = triton_gpu.memdesc_subview %57[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xf8E5M2, #shared1, mutable> -> !tt.memdesc<32x32xf8E5M2, #shared1, mutable> loc(#loc36)
    %91 = tt.splat %75 : i1 -> tensor<32x32xi1, #blocked1> loc(#loc37)
    %92 = arith.andi %91, %89 : tensor<32x32xi1, #blocked1> loc(#loc37)
    %93 = triton_gpu.async_copy_global_to_local %77, %90 mask %92 other %55 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> -> <32x32xf8E5M2, #shared1, mutable> loc(#loc36)
    %94 = triton_gpu.async_commit_group %93 loc(#loc36)
    %95 = arith.cmpi sgt, %53, %c2_i32 : i32 loc(#loc37)
    %96 = tt.addptr %76, %cst_1 : tensor<64x32x!tt.ptr<f8E5M2>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc40)
    %97 = tt.addptr %77, %cst_2 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc41)
    %98 = arith.subi %arg5, %c64_i32 : i32 loc(#loc42)
    %99 = tt.splat %98 : i32 -> tensor<1x32xi32, #blocked> loc(#loc38)
    %100 = arith.cmpi slt, %36, %99 : tensor<1x32xi32, #blocked> loc(#loc38)
    %101 = tt.broadcast %100 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc35)
    %102 = triton_gpu.memdesc_subview %56[%c2_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x64x32xf8E5M2, #shared, mutable> -> !tt.memdesc<64x32xf8E5M2, #shared, mutable> loc(#loc35)
    %103 = tt.splat %95 : i1 -> tensor<64x32xi1, #blocked> loc(#loc37)
    %104 = arith.andi %103, %101 : tensor<64x32xi1, #blocked> loc(#loc37)
    %105 = triton_gpu.async_copy_global_to_local %96, %102 mask %104 other %54 : tensor<64x32x!tt.ptr<f8E5M2>, #blocked> -> <64x32xf8E5M2, #shared, mutable> loc(#loc35)
    %106 = triton_gpu.async_commit_group %105 loc(#loc35)
    %107 = tt.splat %98 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc39)
    %108 = arith.cmpi slt, %43, %107 : tensor<32x1xi32, #blocked1> loc(#loc39)
    %109 = tt.broadcast %108 : tensor<32x1xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc36)
    %110 = triton_gpu.memdesc_subview %57[%c2_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xf8E5M2, #shared1, mutable> -> !tt.memdesc<32x32xf8E5M2, #shared1, mutable> loc(#loc36)
    %111 = tt.splat %95 : i1 -> tensor<32x32xi1, #blocked1> loc(#loc37)
    %112 = arith.andi %111, %109 : tensor<32x32xi1, #blocked1> loc(#loc37)
    %113 = triton_gpu.async_copy_global_to_local %97, %110 mask %112 other %55 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> -> <32x32xf8E5M2, #shared1, mutable> loc(#loc36)
    %114 = triton_gpu.async_commit_group %113 loc(#loc36)
    %115 = arith.cmpi sgt, %53, %c3_i32 : i32 loc(#loc37)
    %116 = tt.addptr %96, %cst_1 : tensor<64x32x!tt.ptr<f8E5M2>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc40)
    %117 = tt.addptr %97, %cst_2 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc41)
    %118 = arith.subi %arg5, %c96_i32 : i32 loc(#loc42)
    %119 = tt.splat %118 : i32 -> tensor<1x32xi32, #blocked> loc(#loc38)
    %120 = arith.cmpi slt, %36, %119 : tensor<1x32xi32, #blocked> loc(#loc38)
    %121 = tt.broadcast %120 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc35)
    %122 = triton_gpu.memdesc_subview %56[%c3_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x64x32xf8E5M2, #shared, mutable> -> !tt.memdesc<64x32xf8E5M2, #shared, mutable> loc(#loc35)
    %123 = tt.splat %115 : i1 -> tensor<64x32xi1, #blocked> loc(#loc37)
    %124 = arith.andi %123, %121 : tensor<64x32xi1, #blocked> loc(#loc37)
    %125 = triton_gpu.async_copy_global_to_local %116, %122 mask %124 other %54 : tensor<64x32x!tt.ptr<f8E5M2>, #blocked> -> <64x32xf8E5M2, #shared, mutable> loc(#loc35)
    %126 = triton_gpu.async_commit_group %125 loc(#loc35)
    %127 = tt.splat %118 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc39)
    %128 = arith.cmpi slt, %43, %127 : tensor<32x1xi32, #blocked1> loc(#loc39)
    %129 = tt.broadcast %128 : tensor<32x1xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc36)
    %130 = triton_gpu.memdesc_subview %57[%c3_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xf8E5M2, #shared1, mutable> -> !tt.memdesc<32x32xf8E5M2, #shared1, mutable> loc(#loc36)
    %131 = tt.splat %115 : i1 -> tensor<32x32xi1, #blocked1> loc(#loc37)
    %132 = arith.andi %131, %129 : tensor<32x32xi1, #blocked1> loc(#loc37)
    %133 = triton_gpu.async_copy_global_to_local %117, %130 mask %132 other %55 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> -> <32x32xf8E5M2, #shared1, mutable> loc(#loc36)
    %134 = triton_gpu.async_commit_group %133 loc(#loc36)
    %135 = triton_gpu.async_wait %74 {num = 6 : i32} loc(#loc35)
    %136:20 = scf.for %arg9 = %c0_i32 to %53 step %c1_i32 iter_args(%arg10 = %cst_3, %arg11 = %116, %arg12 = %117, %arg13 = %c3_i32, %arg14 = %c0_i32, %arg15 = %62, %arg16 = %135, %arg17 = %61, %arg18 = %81, %arg19 = %101, %arg20 = %121, %arg21 = %70, %arg22 = %135, %arg23 = %69, %arg24 = %89, %arg25 = %109, %arg26 = %129, %arg27 = %94, %arg28 = %114, %arg29 = %134) -> (tensor<64x32xf32, #mma>, tensor<64x32x!tt.ptr<f8E5M2>, #blocked>, tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, i32, i32, !tt.memdesc<64x32xf8E5M2, #shared, mutable>, !triton_gpu.async.token, tensor<64x32xi1, #blocked>, tensor<64x32xi1, #blocked>, tensor<64x32xi1, #blocked>, tensor<64x32xi1, #blocked>, !tt.memdesc<32x32xf8E5M2, #shared1, mutable>, !triton_gpu.async.token, tensor<32x32xi1, #blocked1>, tensor<32x32xi1, #blocked1>, tensor<32x32xi1, #blocked1>, tensor<32x32xi1, #blocked1>, !triton_gpu.async.token, !triton_gpu.async.token, !triton_gpu.async.token)  : i32 {
      %156 = arith.subi %53, %c4_i32 : i32 loc(#loc37)
      %157 = arith.cmpi slt, %arg9, %156 : i32 loc(#loc37)
      %158 = triton_gpu.local_load %arg15 token %arg16 : !tt.memdesc<64x32xf8E5M2, #shared, mutable> -> tensor<64x32xf8E5M2, #blocked> loc(#loc35)
      %159 = arith.select %arg17, %158, %54 : tensor<64x32xi1, #blocked>, tensor<64x32xf8E5M2, #blocked> loc(#loc35)
      %160 = triton_gpu.local_alloc %159 : (tensor<64x32xf8E5M2, #blocked>) -> !tt.memdesc<64x32xf8E5M2, #shared> loc(#loc43)
      %161 = triton_gpu.local_load %arg21 token %arg22 : !tt.memdesc<32x32xf8E5M2, #shared1, mutable> -> tensor<32x32xf8E5M2, #blocked1> loc(#loc36)
      %162 = arith.select %arg23, %161, %55 : tensor<32x32xi1, #blocked1>, tensor<32x32xf8E5M2, #blocked1> loc(#loc36)
      %163 = triton_gpu.local_alloc %162 : (tensor<32x32xf8E5M2, #blocked1>) -> !tt.memdesc<32x32xf8E5M2, #shared1> loc(#loc43)
      %164 = triton_gpu.local_load %160 : !tt.memdesc<64x32xf8E5M2, #shared> -> tensor<64x32xf8E5M2, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc43)
      %165 = tt.fp_to_fp %164 : tensor<64x32xf8E5M2, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc43)
      %166 = triton_gpu.local_load %163 : !tt.memdesc<32x32xf8E5M2, #shared1> -> tensor<32x32xf8E5M2, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc43)
      %167 = tt.fp_to_fp %166 : tensor<32x32xf8E5M2, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<32x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc43)
      %168 = tt.dot %165, %167, %arg10, inputPrecision = tf32 : tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<32x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x32xf32, #mma> loc(#loc43)
      %169 = tt.addptr %arg11, %cst_1 : tensor<64x32x!tt.ptr<f8E5M2>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc40)
      %170 = tt.addptr %arg12, %cst_2 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc41)
      %171 = arith.addi %arg13, %c1_i32 : i32 loc(#loc37)
      %172 = arith.cmpi slt, %171, %c4_i32 : i32 loc(#loc37)
      %173 = arith.select %172, %171, %c0_i32 : i32 loc(#loc37)
      %174 = arith.addi %arg9, %c4_i32 : i32 loc(#loc37)
      %175 = arith.muli %174, %c32_i32 : i32 loc(#loc44)
      %176 = arith.subi %arg5, %175 : i32 loc(#loc42)
      %177 = tt.splat %176 : i32 -> tensor<1x32xi32, #blocked> loc(#loc38)
      %178 = arith.cmpi slt, %36, %177 : tensor<1x32xi32, #blocked> loc(#loc38)
      %179 = tt.broadcast %178 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc35)
      %180 = triton_gpu.memdesc_subview %56[%173, %c0_i32, %c0_i32] : !tt.memdesc<4x64x32xf8E5M2, #shared, mutable> -> !tt.memdesc<64x32xf8E5M2, #shared, mutable> loc(#loc35)
      %181 = tt.splat %157 : i1 -> tensor<64x32xi1, #blocked> loc(#loc37)
      %182 = arith.andi %181, %179 : tensor<64x32xi1, #blocked> loc(#loc37)
      %183 = triton_gpu.async_copy_global_to_local %169, %180 mask %182 other %54 : tensor<64x32x!tt.ptr<f8E5M2>, #blocked> -> <64x32xf8E5M2, #shared, mutable> loc(#loc35)
      %184 = triton_gpu.async_commit_group %183 loc(#loc35)
      %185 = tt.splat %176 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc39)
      %186 = arith.cmpi slt, %43, %185 : tensor<32x1xi32, #blocked1> loc(#loc39)
      %187 = tt.broadcast %186 : tensor<32x1xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc36)
      %188 = triton_gpu.memdesc_subview %57[%173, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xf8E5M2, #shared1, mutable> -> !tt.memdesc<32x32xf8E5M2, #shared1, mutable> loc(#loc36)
      %189 = tt.splat %157 : i1 -> tensor<32x32xi1, #blocked1> loc(#loc37)
      %190 = arith.andi %189, %187 : tensor<32x32xi1, #blocked1> loc(#loc37)
      %191 = triton_gpu.async_copy_global_to_local %170, %188 mask %190 other %55 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> -> <32x32xf8E5M2, #shared1, mutable> loc(#loc36)
      %192 = triton_gpu.async_commit_group %191 loc(#loc36)
      %193 = arith.addi %arg14, %c1_i32 : i32 loc(#loc37)
      %194 = arith.cmpi slt, %193, %c4_i32 : i32 loc(#loc37)
      %195 = arith.select %194, %193, %c0_i32 : i32 loc(#loc37)
      %196 = triton_gpu.memdesc_subview %56[%195, %c0_i32, %c0_i32] : !tt.memdesc<4x64x32xf8E5M2, #shared, mutable> -> !tt.memdesc<64x32xf8E5M2, #shared, mutable> loc(#loc35)
      %197 = triton_gpu.async_wait %arg27 {num = 6 : i32} loc(#loc35)
      %198 = triton_gpu.memdesc_subview %57[%195, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xf8E5M2, #shared1, mutable> -> !tt.memdesc<32x32xf8E5M2, #shared1, mutable> loc(#loc36)
      scf.yield %168, %169, %170, %173, %195, %196, %197, %arg18, %arg19, %arg20, %179, %198, %197, %arg24, %arg25, %arg26, %187, %arg28, %arg29, %192 : tensor<64x32xf32, #mma>, tensor<64x32x!tt.ptr<f8E5M2>, #blocked>, tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, i32, i32, !tt.memdesc<64x32xf8E5M2, #shared, mutable>, !triton_gpu.async.token, tensor<64x32xi1, #blocked>, tensor<64x32xi1, #blocked>, tensor<64x32xi1, #blocked>, tensor<64x32xi1, #blocked>, !tt.memdesc<32x32xf8E5M2, #shared1, mutable>, !triton_gpu.async.token, tensor<32x32xi1, #blocked1>, tensor<32x32xi1, #blocked1>, tensor<32x32xi1, #blocked1>, tensor<32x32xi1, #blocked1>, !triton_gpu.async.token, !triton_gpu.async.token, !triton_gpu.async.token loc(#loc37)
    } loc(#loc37)
    %137 = triton_gpu.async_wait  {num = 0 : i32} loc(#loc37)
    triton_gpu.local_dealloc %56 : !tt.memdesc<4x64x32xf8E5M2, #shared, mutable> loc(#loc37)
    triton_gpu.local_dealloc %57 : !tt.memdesc<4x32x32xf8E5M2, #shared1, mutable> loc(#loc37)
    %138 = arith.truncf %136#0 : tensor<64x32xf32, #mma> to tensor<64x32xf16, #mma> loc(#loc45)
    %139 = tt.expand_dims %20 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi32, #blocked2> loc(#loc46)
    %140 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc47)
    %141 = arith.muli %140, %139 : tensor<64x1xi32, #blocked2> loc(#loc47)
    %142 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked2> loc(#loc48)
    %143 = tt.addptr %142, %141 : tensor<64x1x!tt.ptr<f16>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc48)
    %144 = tt.expand_dims %29 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc49)
    %145 = tt.broadcast %143 : tensor<64x1x!tt.ptr<f16>, #blocked2> -> tensor<64x32x!tt.ptr<f16>, #blocked2> loc(#loc50)
    %146 = tt.broadcast %144 : tensor<1x32xi32, #blocked2> -> tensor<64x32xi32, #blocked2> loc(#loc50)
    %147 = tt.addptr %145, %146 : tensor<64x32x!tt.ptr<f16>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc50)
    %148 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc51)
    %149 = arith.cmpi slt, %139, %148 : tensor<64x1xi32, #blocked2> loc(#loc51)
    %150 = tt.splat %arg4 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc52)
    %151 = arith.cmpi slt, %144, %150 : tensor<1x32xi32, #blocked2> loc(#loc52)
    %152 = tt.broadcast %149 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc53)
    %153 = tt.broadcast %151 : tensor<1x32xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc53)
    %154 = arith.andi %152, %153 : tensor<64x32xi1, #blocked2> loc(#loc53)
    %155 = triton_gpu.convert_layout %138 : tensor<64x32xf16, #mma> -> tensor<64x32xf16, #blocked2> loc(#loc54)
    tt.store %147, %155, %154 : tensor<64x32x!tt.ptr<f16>, #blocked2> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":292:24)
#loc3 = loc("/data_ssd1/zjy_home/frameworks/cuda/triton/python/triton/language/standard.py":44:22)
#loc4 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":293:27)
#loc5 = loc("/data_ssd1/zjy_home/frameworks/cuda/triton/python/triton/language/standard.py":44:28)
#loc6 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":294:27)
#loc7 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":295:38)
#loc8 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":296:22)
#loc9 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":297:29)
#loc10 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":299:20)
#loc11 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":299:33)
#loc12 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":302:15)
#loc13 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":302:35)
#loc14 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":302:8)
#loc15 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":304:40)
#loc16 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":313:23)
#loc17 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":313:51)
#loc18 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":313:38)
#loc19 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":313:68)
#loc20 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":314:23)
#loc21 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":314:51)
#loc22 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":314:38)
#loc23 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":314:68)
#loc24 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":316:30)
#loc25 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":316:41)
#loc26 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":316:60)
#loc27 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":316:53)
#loc28 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":316:22)
#loc29 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":318:29)
#loc30 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":318:60)
#loc31 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":318:71)
#loc32 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":318:52)
#loc33 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":318:22)
#loc34 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":327:33)
#loc35 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":330:20)
#loc36 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":331:20)
#loc37 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":327:22)
#loc38 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":330:51)
#loc39 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":331:51)
#loc40 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":335:18)
#loc41 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":336:18)
#loc42 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":330:55)
#loc43 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":333:35)
#loc44 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":330:59)
#loc45 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":341:23)
#loc46 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":347:41)
#loc47 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":347:33)
#loc48 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":347:21)
#loc49 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":347:72)
#loc50 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":347:52)
#loc51 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":348:33)
#loc52 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":348:58)
#loc53 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":348:39)
#loc54 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":349:21)
#loc55 = loc("/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication/matrix_multiplication.py":349:4)
#loc56 = loc(callsite(#loc3 at #loc4))
#loc57 = loc(callsite(#loc5 at #loc4))
#loc58 = loc(callsite(#loc3 at #loc6))
#loc59 = loc(callsite(#loc5 at #loc6))
#loc60 = loc(callsite(#loc3 at #loc34))
#loc61 = loc(callsite(#loc5 at #loc34))
