; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %11 = add i32 %3, 63, !dbg !11
  %12 = sdiv i32 %11, 64, !dbg !15
  %13 = add i32 %4, 31, !dbg !16
  %14 = sdiv i32 %13, 32, !dbg !18
  %15 = shl nsw i32 %14, 3, !dbg !19
  %.frozen = freeze i32 %10
  %.frozen474 = freeze i32 %15
  %16 = sdiv i32 %.frozen, %.frozen474, !dbg !20
  %17 = shl i32 %16, 3, !dbg !21
  %18 = sub i32 %12, %17, !dbg !22
  %19 = tail call i32 @llvm.smin.i32(i32 %18, i32 8), !dbg !23
  %20 = mul i32 %16, %.frozen474
  %.decomposed = sub i32 %.frozen, %20
  %.frozen475 = freeze i32 %19
  %21 = sdiv i32 %.decomposed, %.frozen475, !dbg !24
  %22 = mul i32 %21, %.frozen475
  %.decomposed476 = sub i32 %.decomposed, %22
  %23 = add i32 %.decomposed476, %17, !dbg !25
  %24 = shl i32 %23, 6, !dbg !26
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !27
  %26 = and i32 %25, 31, !dbg !27
  %27 = lshr i32 %25, 5, !dbg !27
  %28 = lshr i32 %25, 1, !dbg !27
  %29 = and i32 %28, 31, !dbg !27
  %30 = or disjoint i32 %29, 32, !dbg !27
  %31 = or disjoint i32 %24, %29, !dbg !28
  %32 = or disjoint i32 %24, %30, !dbg !28
  %33 = srem i32 %31, %3, !dbg !29
  %34 = srem i32 %32, %3, !dbg !29
  %35 = shl i32 %21, 5, !dbg !30
  %36 = or disjoint i32 %35, %29, !dbg !31
  %37 = srem i32 %36, %4, !dbg !32
  %38 = mul i32 %33, %6, !dbg !33
  %39 = mul i32 %34, %6, !dbg !33
  %40 = shl i32 %25, 4, !dbg !34
  %41 = and i32 %40, 16, !dbg !34
  %42 = add i32 %38, %41, !dbg !35
  %43 = add i32 %39, %41, !dbg !35
  %44 = sext i32 %42 to i64, !dbg !36
  %45 = getelementptr i8, ptr addrspace(1) %0, i64 %44, !dbg !36
  %46 = sext i32 %43 to i64, !dbg !36
  %47 = getelementptr i8, ptr addrspace(1) %0, i64 %46, !dbg !36
  %48 = mul i32 %37, %7, !dbg !37
  %49 = add i32 %48, %41, !dbg !38
  %50 = sext i32 %49 to i64, !dbg !39
  %51 = getelementptr i8, ptr addrspace(1) %1, i64 %50, !dbg !39
  %52 = add i32 %5, 31, !dbg !40
  %53 = sdiv i32 %52, 32, !dbg !42
  %54 = tail call half asm "cvt.rz.f16.f32 $0, $1;", "=h,r"(float 0.000000e+00) #2, !dbg !43
  %55 = insertelement <2 x half> poison, half %54, i64 0, !dbg !43
  %56 = shufflevector <2 x half> %55, <2 x half> poison, <2 x i32> zeroinitializer, !dbg !43
  %57 = bitcast <2 x half> %56 to i32, !dbg !43
  %58 = tail call <4 x i8> asm "{                            \0A.reg .b32 a<2>;              \0Aand.b32 a0, $1, 0xfffefffe;  \0Aand.b32 a1, $2, 0xfffefffe;  \0Aadd.u32 a0, a0, 0x00800080;  \0Aadd.u32 a1, a1, 0x00800080;  \0Aprmt.b32 $0, a0, a1, 0x7531; \0A\09}", "=r,r,r"(i32 %57, i32 %57) #2, !dbg !43
  %59 = shufflevector <4 x i8> %58, <4 x i8> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !43
  %60 = icmp sgt i32 %52, 31, !dbg !44
  %61 = icmp slt i32 %41, %5, !dbg !45
  %62 = and i1 %61, %60, !dbg !44
  %63 = lshr i32 %25, 3, !dbg !43
  %64 = shl nuw nsw i32 %29, 5, !dbg !43
  %65 = xor i32 %63, %25, !dbg !43
  %66 = shl i32 %65, 4, !dbg !43
  %67 = and i32 %66, 16, !dbg !43
  %68 = or disjoint i32 %64, %67, !dbg !43
  %69 = zext nneg i32 %68 to i64, !dbg !43
  %70 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %69, !dbg !43
  %71 = shl nuw nsw i32 %30, 5, !dbg !43
  %72 = or disjoint i32 %71, %67, !dbg !43
  %73 = zext nneg i32 %72 to i64, !dbg !43
  %74 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %73, !dbg !43
  %75 = select i1 %62, i32 16, i32 0, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %45, i32 %75, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %74, ptr addrspace(1) %47, i32 %75, i1 true) #2, !dbg !43
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !43
  %76 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %69, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %76, ptr addrspace(1) %51, i32 %75, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %77 = icmp sgt i32 %52, 63, !dbg !44
  %78 = getelementptr i8, ptr addrspace(1) %45, i64 32, !dbg !47
  %79 = getelementptr i8, ptr addrspace(1) %47, i64 32, !dbg !47
  %80 = getelementptr i8, ptr addrspace(1) %51, i64 32, !dbg !48
  %81 = add i32 %5, -32, !dbg !49
  %82 = icmp slt i32 %41, %81, !dbg !45
  %83 = and i1 %77, %82, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %84 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %69, !dbg !43
  %85 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %73, !dbg !43
  %86 = select i1 %83, i32 16, i32 0, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %84, ptr addrspace(1) %78, i32 %86, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %85, ptr addrspace(1) %79, i32 %86, i1 true) #2, !dbg !43
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !43
  %87 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 9216), i64 %69, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %87, ptr addrspace(1) %80, i32 %86, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %88 = icmp sgt i32 %52, 95, !dbg !44
  %89 = getelementptr i8, ptr addrspace(1) %45, i64 64, !dbg !47
  %90 = getelementptr i8, ptr addrspace(1) %47, i64 64, !dbg !47
  %91 = getelementptr i8, ptr addrspace(1) %51, i64 64, !dbg !48
  %92 = add i32 %5, -64, !dbg !49
  %93 = icmp slt i32 %41, %92, !dbg !45
  %94 = and i1 %88, %93, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %95 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %69, !dbg !43
  %96 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %73, !dbg !43
  %97 = select i1 %94, i32 16, i32 0, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %95, ptr addrspace(1) %89, i32 %97, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %96, ptr addrspace(1) %90, i32 %97, i1 true) #2, !dbg !43
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !43
  %98 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 10240), i64 %69, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %98, ptr addrspace(1) %91, i32 %97, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %99 = icmp sgt i32 %52, 127, !dbg !44
  %100 = getelementptr i8, ptr addrspace(1) %45, i64 96, !dbg !47
  %101 = getelementptr i8, ptr addrspace(1) %47, i64 96, !dbg !47
  %102 = getelementptr i8, ptr addrspace(1) %51, i64 96, !dbg !48
  %103 = add i32 %5, -96, !dbg !49
  %104 = icmp slt i32 %41, %103, !dbg !45
  %105 = and i1 %99, %104, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %106 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %69, !dbg !43
  %107 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %73, !dbg !43
  %108 = select i1 %105, i32 16, i32 0, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %106, ptr addrspace(1) %100, i32 %108, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %107, ptr addrspace(1) %101, i32 %108, i1 true) #2, !dbg !43
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !43
  %109 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 11264), i64 %69, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %109, ptr addrspace(1) %102, i32 %108, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  br i1 %60, label %.lr.ph, label %._crit_edge, !dbg !44

.lr.ph:                                           ; preds = %9
  %110 = and i32 %63, 1, !dbg !43
  %111 = add nsw i32 %53, -4
  %112 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %69
  %113 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %73
  %114 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 14336), i64 %69
  %115 = and i32 %25, 7
  %116 = lshr i32 %26, 4
  %117 = shl nuw nsw i32 %27, 1
  %118 = and i32 %117, 2
  %119 = or disjoint i32 %118, %110
  %120 = lshr i32 %115, 2
  %121 = xor i32 %116, %120
  %122 = shl nuw nsw i32 %119, 8
  %123 = shl nuw nsw i32 %115, 5
  %124 = shl nuw nsw i32 %121, 4
  %125 = or disjoint i32 %122, %124
  %126 = or disjoint i32 %125, %123
  %127 = zext nneg i32 %126 to i64
  %128 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %127
  %129 = getelementptr i8, ptr addrspace(3) %128, i64 1024
  %130 = xor i32 %110, %120
  %131 = shl nuw nsw i32 %116, 8
  %132 = shl nuw nsw i32 %130, 4
  %133 = or disjoint i32 %132, %131
  %134 = or disjoint i32 %133, %123
  %135 = zext nneg i32 %134 to i64
  %136 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 14336), i64 %135
  %137 = getelementptr i8, ptr addrspace(3) %136, i64 512
  %.neg371 = add nsw i32 %5, -128
  %138 = shl nuw nsw i32 %29, 5
  %139 = or disjoint i32 %138, %67
  %140 = zext nneg i32 %139 to i64
  %141 = shl nuw nsw i32 %30, 5
  %142 = or disjoint i32 %141, %67
  %143 = zext nneg i32 %142 to i64
  %144 = shl nuw nsw i32 %29, 5
  %145 = or disjoint i32 %144, %67
  %146 = zext nneg i32 %145 to i64
  br label %147, !dbg !44

147:                                              ; preds = %.lr.ph, %147
  %148 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), %.lr.ph ], [ %403, %147 ]
  %.pn99378 = phi i1 [ %104, %.lr.ph ], [ %385, %147 ]
  %.pn99.pn377 = phi i1 [ %93, %.lr.ph ], [ %.pn99378, %147 ]
  %.pn99.pn.pn376 = phi i1 [ %82, %.lr.ph ], [ %.pn99.pn377, %147 ]
  %.pn99.pn.pn.pn375 = phi i1 [ %61, %.lr.ph ], [ %.pn99.pn.pn376, %147 ]
  %149 = phi ptr addrspace(3) [ @global_smem, %.lr.ph ], [ %400, %147 ]
  %150 = phi i32 [ 0, %.lr.ph ], [ %397, %147 ]
  %151 = phi i32 [ 3, %.lr.ph ], [ %382, %147 ]
  %.pn97374 = phi ptr addrspace(1) [ %102, %.lr.ph ], [ %379, %147 ]
  %.pn33373 = phi ptr addrspace(1) [ %101, %.lr.ph ], [ %378, %147 ]
  %.pn65372 = phi ptr addrspace(1) [ %100, %.lr.ph ], [ %377, %147 ]
  %152 = phi float [ 0.000000e+00, %.lr.ph ], [ %338, %147 ]
  %153 = phi float [ 0.000000e+00, %.lr.ph ], [ %339, %147 ]
  %154 = phi float [ 0.000000e+00, %.lr.ph ], [ %340, %147 ]
  %155 = phi float [ 0.000000e+00, %.lr.ph ], [ %341, %147 ]
  %156 = phi float [ 0.000000e+00, %.lr.ph ], [ %343, %147 ]
  %157 = phi float [ 0.000000e+00, %.lr.ph ], [ %344, %147 ]
  %158 = phi float [ 0.000000e+00, %.lr.ph ], [ %345, %147 ]
  %159 = phi float [ 0.000000e+00, %.lr.ph ], [ %346, %147 ]
  %160 = phi float [ 0.000000e+00, %.lr.ph ], [ %348, %147 ]
  %161 = phi float [ 0.000000e+00, %.lr.ph ], [ %349, %147 ]
  %162 = phi float [ 0.000000e+00, %.lr.ph ], [ %350, %147 ]
  %163 = phi float [ 0.000000e+00, %.lr.ph ], [ %351, %147 ]
  %164 = phi float [ 0.000000e+00, %.lr.ph ], [ %353, %147 ]
  %165 = phi float [ 0.000000e+00, %.lr.ph ], [ %354, %147 ]
  %166 = phi float [ 0.000000e+00, %.lr.ph ], [ %355, %147 ]
  %167 = phi float [ 0.000000e+00, %.lr.ph ], [ %356, %147 ]
  %168 = phi float [ 0.000000e+00, %.lr.ph ], [ %358, %147 ]
  %169 = phi float [ 0.000000e+00, %.lr.ph ], [ %359, %147 ]
  %170 = phi float [ 0.000000e+00, %.lr.ph ], [ %360, %147 ]
  %171 = phi float [ 0.000000e+00, %.lr.ph ], [ %361, %147 ]
  %172 = phi float [ 0.000000e+00, %.lr.ph ], [ %363, %147 ]
  %173 = phi float [ 0.000000e+00, %.lr.ph ], [ %364, %147 ]
  %174 = phi float [ 0.000000e+00, %.lr.ph ], [ %365, %147 ]
  %175 = phi float [ 0.000000e+00, %.lr.ph ], [ %366, %147 ]
  %176 = phi float [ 0.000000e+00, %.lr.ph ], [ %368, %147 ]
  %177 = phi float [ 0.000000e+00, %.lr.ph ], [ %369, %147 ]
  %178 = phi float [ 0.000000e+00, %.lr.ph ], [ %370, %147 ]
  %179 = phi float [ 0.000000e+00, %.lr.ph ], [ %371, %147 ]
  %180 = phi float [ 0.000000e+00, %.lr.ph ], [ %373, %147 ]
  %181 = phi float [ 0.000000e+00, %.lr.ph ], [ %374, %147 ]
  %182 = phi float [ 0.000000e+00, %.lr.ph ], [ %375, %147 ]
  %183 = phi float [ 0.000000e+00, %.lr.ph ], [ %376, %147 ]
  %184 = phi i32 [ 0, %.lr.ph ], [ %404, %147 ]
  %185 = icmp slt i32 %184, %111, !dbg !44
  %186 = getelementptr i8, ptr addrspace(3) %149, i64 %140, !dbg !43
  %187 = getelementptr i8, ptr addrspace(3) %149, i64 %143, !dbg !43
  %188 = load <16 x i8>, ptr addrspace(3) %186, align 16, !dbg !43
  %189 = insertelement <16 x i1> poison, i1 %.pn99.pn.pn.pn375, i64 0, !dbg !43
  %190 = shufflevector <16 x i1> %189, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !43
  %191 = select <16 x i1> %190, <16 x i8> %188, <16 x i8> %59, !dbg !43
  %192 = load <16 x i8>, ptr addrspace(3) %187, align 16, !dbg !43
  %193 = select <16 x i1> %190, <16 x i8> %192, <16 x i8> %59, !dbg !43
  store <16 x i8> %191, ptr addrspace(3) %112, align 16, !dbg !50
  store <16 x i8> %193, ptr addrspace(3) %113, align 16, !dbg !50
  %194 = getelementptr i8, ptr addrspace(3) %148, i64 %146, !dbg !46
  %195 = load <16 x i8>, ptr addrspace(3) %194, align 16, !dbg !46
  %196 = select <16 x i1> %190, <16 x i8> %195, <16 x i8> %59, !dbg !46
  store <16 x i8> %196, ptr addrspace(3) %114, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %128) #2, !dbg !50
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !50
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !50
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !50
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !50
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %129) #2, !dbg !50
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !50
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !50
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !50
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !50
  %207 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %198) #2, !dbg !50
  %208 = extractvalue { <2 x half>, <2 x half> } %207, 0, !dbg !50
  %209 = extractvalue { <2 x half>, <2 x half> } %207, 1, !dbg !50
  %210 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %200) #2, !dbg !50
  %211 = extractvalue { <2 x half>, <2 x half> } %210, 0, !dbg !50
  %212 = extractvalue { <2 x half>, <2 x half> } %210, 1, !dbg !50
  %213 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %199) #2, !dbg !50
  %214 = extractvalue { <2 x half>, <2 x half> } %213, 0, !dbg !50
  %215 = extractvalue { <2 x half>, <2 x half> } %213, 1, !dbg !50
  %216 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %201) #2, !dbg !50
  %217 = extractvalue { <2 x half>, <2 x half> } %216, 0, !dbg !50
  %218 = extractvalue { <2 x half>, <2 x half> } %216, 1, !dbg !50
  %219 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %203) #2, !dbg !50
  %220 = extractvalue { <2 x half>, <2 x half> } %219, 0, !dbg !50
  %221 = extractvalue { <2 x half>, <2 x half> } %219, 1, !dbg !50
  %222 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %205) #2, !dbg !50
  %223 = extractvalue { <2 x half>, <2 x half> } %222, 0, !dbg !50
  %224 = extractvalue { <2 x half>, <2 x half> } %222, 1, !dbg !50
  %225 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %204) #2, !dbg !50
  %226 = extractvalue { <2 x half>, <2 x half> } %225, 0, !dbg !50
  %227 = extractvalue { <2 x half>, <2 x half> } %225, 1, !dbg !50
  %228 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %206) #2, !dbg !50
  %229 = extractvalue { <2 x half>, <2 x half> } %228, 0, !dbg !50
  %230 = extractvalue { <2 x half>, <2 x half> } %228, 1, !dbg !50
  %231 = bitcast <2 x half> %208 to i32, !dbg !50
  %232 = bitcast <2 x half> %209 to i32, !dbg !50
  %233 = bitcast <2 x half> %214 to i32, !dbg !50
  %234 = bitcast <2 x half> %215 to i32, !dbg !50
  %235 = bitcast <2 x half> %211 to i32, !dbg !50
  %236 = bitcast <2 x half> %212 to i32, !dbg !50
  %237 = bitcast <2 x half> %217 to i32, !dbg !50
  %238 = bitcast <2 x half> %218 to i32, !dbg !50
  %239 = bitcast <2 x half> %220 to i32, !dbg !50
  %240 = bitcast <2 x half> %221 to i32, !dbg !50
  %241 = bitcast <2 x half> %226 to i32, !dbg !50
  %242 = bitcast <2 x half> %227 to i32, !dbg !50
  %243 = bitcast <2 x half> %223 to i32, !dbg !50
  %244 = bitcast <2 x half> %224 to i32, !dbg !50
  %245 = bitcast <2 x half> %229 to i32, !dbg !50
  %246 = bitcast <2 x half> %230 to i32, !dbg !50
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %136) #2, !dbg !50
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !50
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !50
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !50
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !50
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %137) #2, !dbg !50
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !50
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !50
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !50
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !50
  %257 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %248) #2, !dbg !50
  %258 = extractvalue { <2 x half>, <2 x half> } %257, 0, !dbg !50
  %259 = extractvalue { <2 x half>, <2 x half> } %257, 1, !dbg !50
  %260 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %249) #2, !dbg !50
  %261 = extractvalue { <2 x half>, <2 x half> } %260, 0, !dbg !50
  %262 = extractvalue { <2 x half>, <2 x half> } %260, 1, !dbg !50
  %263 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %250) #2, !dbg !50
  %264 = extractvalue { <2 x half>, <2 x half> } %263, 0, !dbg !50
  %265 = extractvalue { <2 x half>, <2 x half> } %263, 1, !dbg !50
  %266 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %251) #2, !dbg !50
  %267 = extractvalue { <2 x half>, <2 x half> } %266, 0, !dbg !50
  %268 = extractvalue { <2 x half>, <2 x half> } %266, 1, !dbg !50
  %269 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %253) #2, !dbg !50
  %270 = extractvalue { <2 x half>, <2 x half> } %269, 0, !dbg !50
  %271 = extractvalue { <2 x half>, <2 x half> } %269, 1, !dbg !50
  %272 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %254) #2, !dbg !50
  %273 = extractvalue { <2 x half>, <2 x half> } %272, 0, !dbg !50
  %274 = extractvalue { <2 x half>, <2 x half> } %272, 1, !dbg !50
  %275 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %255) #2, !dbg !50
  %276 = extractvalue { <2 x half>, <2 x half> } %275, 0, !dbg !50
  %277 = extractvalue { <2 x half>, <2 x half> } %275, 1, !dbg !50
  %278 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %256) #2, !dbg !50
  %279 = extractvalue { <2 x half>, <2 x half> } %278, 0, !dbg !50
  %280 = extractvalue { <2 x half>, <2 x half> } %278, 1, !dbg !50
  %281 = bitcast <2 x half> %258 to i32, !dbg !50
  %282 = bitcast <2 x half> %259 to i32, !dbg !50
  %283 = bitcast <2 x half> %264 to i32, !dbg !50
  %284 = bitcast <2 x half> %265 to i32, !dbg !50
  %285 = bitcast <2 x half> %261 to i32, !dbg !50
  %286 = bitcast <2 x half> %262 to i32, !dbg !50
  %287 = bitcast <2 x half> %267 to i32, !dbg !50
  %288 = bitcast <2 x half> %268 to i32, !dbg !50
  %289 = bitcast <2 x half> %270 to i32, !dbg !50
  %290 = bitcast <2 x half> %271 to i32, !dbg !50
  %291 = bitcast <2 x half> %276 to i32, !dbg !50
  %292 = bitcast <2 x half> %277 to i32, !dbg !50
  %293 = bitcast <2 x half> %273 to i32, !dbg !50
  %294 = bitcast <2 x half> %274 to i32, !dbg !50
  %295 = bitcast <2 x half> %279 to i32, !dbg !50
  %296 = bitcast <2 x half> %280 to i32, !dbg !50
  %297 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %152, float %153, float %154, float %155, i32 %231, i32 %233, i32 %232, i32 %234, i32 %281, i32 %282) #2, !dbg !50
  %298 = extractvalue { float, float, float, float } %297, 0, !dbg !50
  %299 = extractvalue { float, float, float, float } %297, 1, !dbg !50
  %300 = extractvalue { float, float, float, float } %297, 2, !dbg !50
  %301 = extractvalue { float, float, float, float } %297, 3, !dbg !50
  %302 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %156, float %157, float %158, float %159, i32 %231, i32 %233, i32 %232, i32 %234, i32 %283, i32 %284) #2, !dbg !50
  %303 = extractvalue { float, float, float, float } %302, 0, !dbg !50
  %304 = extractvalue { float, float, float, float } %302, 1, !dbg !50
  %305 = extractvalue { float, float, float, float } %302, 2, !dbg !50
  %306 = extractvalue { float, float, float, float } %302, 3, !dbg !50
  %307 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %160, float %161, float %162, float %163, i32 %231, i32 %233, i32 %232, i32 %234, i32 %289, i32 %290) #2, !dbg !50
  %308 = extractvalue { float, float, float, float } %307, 0, !dbg !50
  %309 = extractvalue { float, float, float, float } %307, 1, !dbg !50
  %310 = extractvalue { float, float, float, float } %307, 2, !dbg !50
  %311 = extractvalue { float, float, float, float } %307, 3, !dbg !50
  %312 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %164, float %165, float %166, float %167, i32 %231, i32 %233, i32 %232, i32 %234, i32 %291, i32 %292) #2, !dbg !50
  %313 = extractvalue { float, float, float, float } %312, 0, !dbg !50
  %314 = extractvalue { float, float, float, float } %312, 1, !dbg !50
  %315 = extractvalue { float, float, float, float } %312, 2, !dbg !50
  %316 = extractvalue { float, float, float, float } %312, 3, !dbg !50
  %317 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %168, float %169, float %170, float %171, i32 %239, i32 %241, i32 %240, i32 %242, i32 %281, i32 %282) #2, !dbg !50
  %318 = extractvalue { float, float, float, float } %317, 0, !dbg !50
  %319 = extractvalue { float, float, float, float } %317, 1, !dbg !50
  %320 = extractvalue { float, float, float, float } %317, 2, !dbg !50
  %321 = extractvalue { float, float, float, float } %317, 3, !dbg !50
  %322 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %172, float %173, float %174, float %175, i32 %239, i32 %241, i32 %240, i32 %242, i32 %283, i32 %284) #2, !dbg !50
  %323 = extractvalue { float, float, float, float } %322, 0, !dbg !50
  %324 = extractvalue { float, float, float, float } %322, 1, !dbg !50
  %325 = extractvalue { float, float, float, float } %322, 2, !dbg !50
  %326 = extractvalue { float, float, float, float } %322, 3, !dbg !50
  %327 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %176, float %177, float %178, float %179, i32 %239, i32 %241, i32 %240, i32 %242, i32 %289, i32 %290) #2, !dbg !50
  %328 = extractvalue { float, float, float, float } %327, 0, !dbg !50
  %329 = extractvalue { float, float, float, float } %327, 1, !dbg !50
  %330 = extractvalue { float, float, float, float } %327, 2, !dbg !50
  %331 = extractvalue { float, float, float, float } %327, 3, !dbg !50
  %332 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %180, float %181, float %182, float %183, i32 %239, i32 %241, i32 %240, i32 %242, i32 %291, i32 %292) #2, !dbg !50
  %333 = extractvalue { float, float, float, float } %332, 0, !dbg !50
  %334 = extractvalue { float, float, float, float } %332, 1, !dbg !50
  %335 = extractvalue { float, float, float, float } %332, 2, !dbg !50
  %336 = extractvalue { float, float, float, float } %332, 3, !dbg !50
  %337 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %298, float %299, float %300, float %301, i32 %235, i32 %237, i32 %236, i32 %238, i32 %285, i32 %286) #2, !dbg !50
  %338 = extractvalue { float, float, float, float } %337, 0, !dbg !50
  %339 = extractvalue { float, float, float, float } %337, 1, !dbg !50
  %340 = extractvalue { float, float, float, float } %337, 2, !dbg !50
  %341 = extractvalue { float, float, float, float } %337, 3, !dbg !50
  %342 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %303, float %304, float %305, float %306, i32 %235, i32 %237, i32 %236, i32 %238, i32 %287, i32 %288) #2, !dbg !50
  %343 = extractvalue { float, float, float, float } %342, 0, !dbg !50
  %344 = extractvalue { float, float, float, float } %342, 1, !dbg !50
  %345 = extractvalue { float, float, float, float } %342, 2, !dbg !50
  %346 = extractvalue { float, float, float, float } %342, 3, !dbg !50
  %347 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %308, float %309, float %310, float %311, i32 %235, i32 %237, i32 %236, i32 %238, i32 %293, i32 %294) #2, !dbg !50
  %348 = extractvalue { float, float, float, float } %347, 0, !dbg !50
  %349 = extractvalue { float, float, float, float } %347, 1, !dbg !50
  %350 = extractvalue { float, float, float, float } %347, 2, !dbg !50
  %351 = extractvalue { float, float, float, float } %347, 3, !dbg !50
  %352 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %313, float %314, float %315, float %316, i32 %235, i32 %237, i32 %236, i32 %238, i32 %295, i32 %296) #2, !dbg !50
  %353 = extractvalue { float, float, float, float } %352, 0, !dbg !50
  %354 = extractvalue { float, float, float, float } %352, 1, !dbg !50
  %355 = extractvalue { float, float, float, float } %352, 2, !dbg !50
  %356 = extractvalue { float, float, float, float } %352, 3, !dbg !50
  %357 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %318, float %319, float %320, float %321, i32 %243, i32 %245, i32 %244, i32 %246, i32 %285, i32 %286) #2, !dbg !50
  %358 = extractvalue { float, float, float, float } %357, 0, !dbg !50
  %359 = extractvalue { float, float, float, float } %357, 1, !dbg !50
  %360 = extractvalue { float, float, float, float } %357, 2, !dbg !50
  %361 = extractvalue { float, float, float, float } %357, 3, !dbg !50
  %362 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %323, float %324, float %325, float %326, i32 %243, i32 %245, i32 %244, i32 %246, i32 %287, i32 %288) #2, !dbg !50
  %363 = extractvalue { float, float, float, float } %362, 0, !dbg !50
  %364 = extractvalue { float, float, float, float } %362, 1, !dbg !50
  %365 = extractvalue { float, float, float, float } %362, 2, !dbg !50
  %366 = extractvalue { float, float, float, float } %362, 3, !dbg !50
  %367 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %328, float %329, float %330, float %331, i32 %243, i32 %245, i32 %244, i32 %246, i32 %293, i32 %294) #2, !dbg !50
  %368 = extractvalue { float, float, float, float } %367, 0, !dbg !50
  %369 = extractvalue { float, float, float, float } %367, 1, !dbg !50
  %370 = extractvalue { float, float, float, float } %367, 2, !dbg !50
  %371 = extractvalue { float, float, float, float } %367, 3, !dbg !50
  %372 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %333, float %334, float %335, float %336, i32 %243, i32 %245, i32 %244, i32 %246, i32 %295, i32 %296) #2, !dbg !50
  %373 = extractvalue { float, float, float, float } %372, 0, !dbg !50
  %374 = extractvalue { float, float, float, float } %372, 1, !dbg !50
  %375 = extractvalue { float, float, float, float } %372, 2, !dbg !50
  %376 = extractvalue { float, float, float, float } %372, 3, !dbg !50
  %377 = getelementptr i8, ptr addrspace(1) %.pn65372, i64 32, !dbg !47
  %378 = getelementptr i8, ptr addrspace(1) %.pn33373, i64 32, !dbg !47
  %379 = getelementptr i8, ptr addrspace(1) %.pn97374, i64 32, !dbg !48
  %380 = add i32 %151, 1, !dbg !44
  %381 = icmp slt i32 %380, 4, !dbg !44
  %382 = select i1 %381, i32 %380, i32 0, !dbg !44
  %383 = shl i32 %184, 5, !dbg !49
  %384 = sub i32 %.neg371, %383, !dbg !49
  %385 = icmp slt i32 %41, %384, !dbg !45
  %386 = shl i32 %382, 11, !dbg !43
  %387 = sext i32 %386 to i64, !dbg !43
  %388 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %387, !dbg !43
  %389 = and i1 %185, %385, !dbg !44
  %390 = getelementptr i8, ptr addrspace(3) %388, i64 %69, !dbg !43
  %391 = getelementptr i8, ptr addrspace(3) %388, i64 %73, !dbg !43
  %392 = select i1 %389, i32 16, i32 0, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %390, ptr addrspace(1) %377, i32 %392, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %391, ptr addrspace(1) %378, i32 %392, i1 true) #2, !dbg !43
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !43
  %393 = shl i32 %382, 10, !dbg !46
  %394 = sext i32 %393 to i64, !dbg !46
  %gep = getelementptr i8, ptr addrspace(3) %76, i64 %394, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %379, i32 %392, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %395 = add i32 %150, 1, !dbg !44
  %396 = icmp slt i32 %395, 4, !dbg !44
  %397 = select i1 %396, i32 %395, i32 0, !dbg !44
  %398 = shl i32 %397, 11, !dbg !43
  %399 = sext i32 %398 to i64, !dbg !43
  %400 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %399, !dbg !43
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %401 = shl i32 %397, 10, !dbg !46
  %402 = sext i32 %401 to i64, !dbg !46
  %403 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %402, !dbg !46
  %404 = add nuw nsw i32 %184, 1, !dbg !44
  %405 = icmp slt i32 %404, %53, !dbg !44
  br i1 %405, label %147, label %._crit_edge.loopexit, !dbg !44

._crit_edge.loopexit:                             ; preds = %147
  %406 = insertelement <32 x float> poison, float %338, i64 0, !dbg !51
  %407 = insertelement <32 x float> %406, float %339, i64 1, !dbg !51
  %408 = insertelement <32 x float> %407, float %340, i64 2, !dbg !51
  %409 = insertelement <32 x float> %408, float %341, i64 3, !dbg !51
  %410 = insertelement <32 x float> %409, float %343, i64 4, !dbg !51
  %411 = insertelement <32 x float> %410, float %344, i64 5, !dbg !51
  %412 = insertelement <32 x float> %411, float %345, i64 6, !dbg !51
  %413 = insertelement <32 x float> %412, float %346, i64 7, !dbg !51
  %414 = insertelement <32 x float> %413, float %348, i64 8, !dbg !51
  %415 = insertelement <32 x float> %414, float %349, i64 9, !dbg !51
  %416 = insertelement <32 x float> %415, float %350, i64 10, !dbg !51
  %417 = insertelement <32 x float> %416, float %351, i64 11, !dbg !51
  %418 = insertelement <32 x float> %417, float %353, i64 12, !dbg !51
  %419 = insertelement <32 x float> %418, float %354, i64 13, !dbg !51
  %420 = insertelement <32 x float> %419, float %355, i64 14, !dbg !51
  %421 = insertelement <32 x float> %420, float %356, i64 15, !dbg !51
  %422 = insertelement <32 x float> %421, float %358, i64 16, !dbg !51
  %423 = insertelement <32 x float> %422, float %359, i64 17, !dbg !51
  %424 = insertelement <32 x float> %423, float %360, i64 18, !dbg !51
  %425 = insertelement <32 x float> %424, float %361, i64 19, !dbg !51
  %426 = insertelement <32 x float> %425, float %363, i64 20, !dbg !51
  %427 = insertelement <32 x float> %426, float %364, i64 21, !dbg !51
  %428 = insertelement <32 x float> %427, float %365, i64 22, !dbg !51
  %429 = insertelement <32 x float> %428, float %366, i64 23, !dbg !51
  %430 = insertelement <32 x float> %429, float %368, i64 24, !dbg !51
  %431 = insertelement <32 x float> %430, float %369, i64 25, !dbg !51
  %432 = insertelement <32 x float> %431, float %370, i64 26, !dbg !51
  %433 = insertelement <32 x float> %432, float %371, i64 27, !dbg !51
  %434 = insertelement <32 x float> %433, float %373, i64 28, !dbg !51
  %435 = insertelement <32 x float> %434, float %374, i64 29, !dbg !51
  %436 = insertelement <32 x float> %435, float %375, i64 30, !dbg !51
  %437 = insertelement <32 x float> %436, float %376, i64 31, !dbg !51
  %438 = fptrunc <32 x float> %437 to <32 x half>, !dbg !51
  br label %._crit_edge, !dbg !52

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %439 = phi <32 x half> [ zeroinitializer, %9 ], [ %438, %._crit_edge.loopexit ]
  %440 = shl i32 %25, 3, !dbg !52
  %441 = and i32 %440, 24, !dbg !52
  %442 = or disjoint i32 %35, %441, !dbg !31
  %443 = lshr i32 %25, 2, !dbg !27
  %444 = and i32 %443, 7, !dbg !27
  %445 = lshr i32 %25, 2, !dbg !27
  %446 = and i32 %445, 8, !dbg !27
  %447 = or disjoint i32 %444, %446, !dbg !27
  %448 = or disjoint i32 %447, %24, !dbg !28
  %449 = or disjoint i32 %448, 48, !dbg !28
  %450 = or disjoint i32 %448, 32, !dbg !28
  %451 = or disjoint i32 %448, 16, !dbg !28
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %452 = mul i32 %448, %8, !dbg !53
  %453 = mul i32 %451, %8, !dbg !53
  %454 = mul i32 %450, %8, !dbg !53
  %455 = mul i32 %449, %8, !dbg !53
  %456 = sext i32 %452 to i64, !dbg !54
  %457 = getelementptr half, ptr addrspace(1) %2, i64 %456, !dbg !54
  %458 = sext i32 %453 to i64, !dbg !54
  %459 = getelementptr half, ptr addrspace(1) %2, i64 %458, !dbg !54
  %460 = sext i32 %454 to i64, !dbg !54
  %461 = getelementptr half, ptr addrspace(1) %2, i64 %460, !dbg !54
  %462 = sext i32 %455 to i64, !dbg !54
  %463 = getelementptr half, ptr addrspace(1) %2, i64 %462, !dbg !54
  %464 = sext i32 %442 to i64, !dbg !55
  %465 = getelementptr half, ptr addrspace(1) %457, i64 %464, !dbg !55
  %466 = getelementptr half, ptr addrspace(1) %459, i64 %464, !dbg !55
  %467 = getelementptr half, ptr addrspace(1) %461, i64 %464, !dbg !55
  %468 = getelementptr half, ptr addrspace(1) %463, i64 %464, !dbg !55
  %469 = icmp slt i32 %448, %3, !dbg !56
  %470 = icmp slt i32 %451, %3, !dbg !56
  %471 = icmp slt i32 %450, %3, !dbg !56
  %472 = icmp slt i32 %449, %3, !dbg !56
  %473 = icmp slt i32 %442, %4, !dbg !57
  %474 = and i1 %469, %473, !dbg !58
  %475 = and i1 %470, %473, !dbg !58
  %476 = and i1 %471, %473, !dbg !58
  %477 = and i1 %472, %473, !dbg !58
  %478 = and i32 %27, 1, !dbg !59
  %479 = lshr i32 %26, 2, !dbg !59
  %480 = and i32 %25, 3, !dbg !59
  %481 = shl nuw nsw i32 %480, 1, !dbg !59
  %482 = shl nuw nsw i32 %478, 4, !dbg !59
  %483 = or disjoint i32 %482, %479, !dbg !59
  %484 = mul nuw nsw i32 %483, 40, !dbg !59
  %485 = or disjoint i32 %484, %481, !dbg !59
  %486 = zext nneg i32 %485 to i64, !dbg !59
  %487 = getelementptr half, ptr addrspace(3) @global_smem, i64 %486, !dbg !59
  %488 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !59
  store <2 x half> %488, ptr addrspace(3) %487, align 4, !dbg !59
  %489 = add nuw nsw i32 %484, 320, !dbg !59
  %490 = or disjoint i32 %489, %481, !dbg !59
  %491 = zext nneg i32 %490 to i64, !dbg !59
  %492 = getelementptr half, ptr addrspace(3) @global_smem, i64 %491, !dbg !59
  %493 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !59
  store <2 x half> %493, ptr addrspace(3) %492, align 4, !dbg !59
  %494 = or disjoint i32 %481, 8, !dbg !59
  %495 = add nuw nsw i32 %484, %494, !dbg !59
  %496 = zext nneg i32 %495 to i64, !dbg !59
  %497 = getelementptr half, ptr addrspace(3) @global_smem, i64 %496, !dbg !59
  %498 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !59
  store <2 x half> %498, ptr addrspace(3) %497, align 4, !dbg !59
  %499 = add nuw nsw i32 %489, %494, !dbg !59
  %500 = zext nneg i32 %499 to i64, !dbg !59
  %501 = getelementptr half, ptr addrspace(3) @global_smem, i64 %500, !dbg !59
  %502 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !59
  store <2 x half> %502, ptr addrspace(3) %501, align 4, !dbg !59
  %503 = or disjoint i32 %481, 16, !dbg !59
  %504 = add nuw nsw i32 %484, %503, !dbg !59
  %505 = zext nneg i32 %504 to i64, !dbg !59
  %506 = getelementptr half, ptr addrspace(3) @global_smem, i64 %505, !dbg !59
  %507 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !59
  store <2 x half> %507, ptr addrspace(3) %506, align 4, !dbg !59
  %508 = add nuw nsw i32 %489, %503, !dbg !59
  %509 = zext nneg i32 %508 to i64, !dbg !59
  %510 = getelementptr half, ptr addrspace(3) @global_smem, i64 %509, !dbg !59
  %511 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !59
  store <2 x half> %511, ptr addrspace(3) %510, align 4, !dbg !59
  %512 = or disjoint i32 %481, 24, !dbg !59
  %513 = add nuw nsw i32 %484, %512, !dbg !59
  %514 = zext nneg i32 %513 to i64, !dbg !59
  %515 = getelementptr half, ptr addrspace(3) @global_smem, i64 %514, !dbg !59
  %516 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !59
  store <2 x half> %516, ptr addrspace(3) %515, align 4, !dbg !59
  %517 = add nuw nsw i32 %489, %512, !dbg !59
  %518 = zext nneg i32 %517 to i64, !dbg !59
  %519 = getelementptr half, ptr addrspace(3) @global_smem, i64 %518, !dbg !59
  %520 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !59
  store <2 x half> %520, ptr addrspace(3) %519, align 4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %521 = shl nuw nsw i32 %478, 3, !dbg !59
  %522 = or disjoint i32 %521, %479, !dbg !59
  %523 = shl nuw nsw i32 %480, 3, !dbg !59
  %524 = mul nuw nsw i32 %522, 40, !dbg !59
  %525 = add nuw nsw i32 %524, %523, !dbg !59
  %526 = zext nneg i32 %525 to i64, !dbg !59
  %527 = getelementptr half, ptr addrspace(3) @global_smem, i64 %526, !dbg !59
  %528 = load <4 x i32>, ptr addrspace(3) %527, align 16, !dbg !59
  %529 = getelementptr i8, ptr addrspace(3) %527, i64 1280, !dbg !59
  %530 = load <4 x i32>, ptr addrspace(3) %529, align 16, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %531 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !59
  store <2 x half> %531, ptr addrspace(3) %487, align 4, !dbg !59
  %532 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !59
  store <2 x half> %532, ptr addrspace(3) %492, align 4, !dbg !59
  %533 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !59
  store <2 x half> %533, ptr addrspace(3) %497, align 4, !dbg !59
  %534 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !59
  store <2 x half> %534, ptr addrspace(3) %501, align 4, !dbg !59
  %535 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !59
  store <2 x half> %535, ptr addrspace(3) %506, align 4, !dbg !59
  %536 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !59
  store <2 x half> %536, ptr addrspace(3) %510, align 4, !dbg !59
  %537 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !59
  store <2 x half> %537, ptr addrspace(3) %515, align 4, !dbg !59
  %538 = shufflevector <32 x half> %439, <32 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !59
  store <2 x half> %538, ptr addrspace(3) %519, align 4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %539 = load <4 x i32>, ptr addrspace(3) %527, align 16, !dbg !59
  %540 = load <4 x i32>, ptr addrspace(3) %529, align 16, !dbg !59
  %.extract = extractelement <4 x i32> %528, i64 0, !dbg !59
  %.extract342 = extractelement <4 x i32> %528, i64 1, !dbg !59
  %.extract344 = extractelement <4 x i32> %528, i64 2, !dbg !59
  %.extract346 = extractelement <4 x i32> %528, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract342, i32 %.extract344, i32 %.extract346, ptr addrspace(1) %465, i1 %474) #2, !dbg !59
  %.extract348 = extractelement <4 x i32> %530, i64 0, !dbg !59
  %.extract350 = extractelement <4 x i32> %530, i64 1, !dbg !59
  %.extract352 = extractelement <4 x i32> %530, i64 2, !dbg !59
  %.extract354 = extractelement <4 x i32> %530, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract348, i32 %.extract350, i32 %.extract352, i32 %.extract354, ptr addrspace(1) %466, i1 %475) #2, !dbg !59
  %.extract356 = extractelement <4 x i32> %539, i64 0, !dbg !59
  %.extract358 = extractelement <4 x i32> %539, i64 1, !dbg !59
  %.extract360 = extractelement <4 x i32> %539, i64 2, !dbg !59
  %.extract362 = extractelement <4 x i32> %539, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract356, i32 %.extract358, i32 %.extract360, i32 %.extract362, ptr addrspace(1) %467, i1 %476) #2, !dbg !59
  %.extract364 = extractelement <4 x i32> %540, i64 0, !dbg !59
  %.extract366 = extractelement <4 x i32> %540, i64 1, !dbg !59
  %.extract368 = extractelement <4 x i32> %540, i64 2, !dbg !59
  %.extract370 = extractelement <4 x i32> %540, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract364, i32 %.extract366, i32 %.extract368, i32 %.extract370, ptr addrspace(1) %468, i1 %477) #2, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matrix_multiplication.py", directory: "/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication")
!4 = !{ptr @matmul_kernel, !"kernel", i32 1}
!5 = !{ptr @matmul_kernel, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !3, file: !3, line: 260, type: !8, scopeLine: 260, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 292, column: 24, scope: !7)
!11 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !7, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/data_ssd1/zjy_home/frameworks/cuda/triton/python/triton/language")
!14 = !DILocation(line: 293, column: 27, scope: !7)
!15 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !17)
!17 = !DILocation(line: 294, column: 27, scope: !7)
!18 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !17)
!19 = !DILocation(line: 295, column: 38, scope: !7)
!20 = !DILocation(line: 296, column: 22, scope: !7)
!21 = !DILocation(line: 297, column: 29, scope: !7)
!22 = !DILocation(line: 299, column: 20, scope: !7)
!23 = !DILocation(line: 299, column: 33, scope: !7)
!24 = !DILocation(line: 304, column: 40, scope: !7)
!25 = !DILocation(line: 302, column: 8, scope: !7)
!26 = !DILocation(line: 313, column: 23, scope: !7)
!27 = !DILocation(line: 313, column: 51, scope: !7)
!28 = !DILocation(line: 313, column: 38, scope: !7)
!29 = !DILocation(line: 313, column: 68, scope: !7)
!30 = !DILocation(line: 314, column: 23, scope: !7)
!31 = !DILocation(line: 314, column: 38, scope: !7)
!32 = !DILocation(line: 314, column: 68, scope: !7)
!33 = !DILocation(line: 316, column: 41, scope: !7)
!34 = !DILocation(line: 316, column: 60, scope: !7)
!35 = !DILocation(line: 316, column: 53, scope: !7)
!36 = !DILocation(line: 316, column: 22, scope: !7)
!37 = !DILocation(line: 318, column: 71, scope: !7)
!38 = !DILocation(line: 318, column: 52, scope: !7)
!39 = !DILocation(line: 318, column: 22, scope: !7)
!40 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !41)
!41 = !DILocation(line: 327, column: 33, scope: !7)
!42 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !41)
!43 = !DILocation(line: 330, column: 20, scope: !7)
!44 = !DILocation(line: 327, column: 22, scope: !7)
!45 = !DILocation(line: 330, column: 51, scope: !7)
!46 = !DILocation(line: 331, column: 20, scope: !7)
!47 = !DILocation(line: 335, column: 18, scope: !7)
!48 = !DILocation(line: 336, column: 18, scope: !7)
!49 = !DILocation(line: 330, column: 55, scope: !7)
!50 = !DILocation(line: 333, column: 35, scope: !7)
!51 = !DILocation(line: 341, column: 23, scope: !7)
!52 = !DILocation(line: 314, column: 51, scope: !7)
!53 = !DILocation(line: 347, column: 33, scope: !7)
!54 = !DILocation(line: 347, column: 21, scope: !7)
!55 = !DILocation(line: 347, column: 52, scope: !7)
!56 = !DILocation(line: 348, column: 33, scope: !7)
!57 = !DILocation(line: 348, column: 58, scope: !7)
!58 = !DILocation(line: 348, column: 39, scope: !7)
!59 = !DILocation(line: 349, column: 21, scope: !7)
!60 = !DILocation(line: 349, column: 4, scope: !7)
