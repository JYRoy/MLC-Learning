; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %11 = add i32 %3, 127, !dbg !11
  %12 = sdiv i32 %11, 128, !dbg !15
  %13 = add i32 %4, 63, !dbg !16
  %14 = sdiv i32 %13, 64, !dbg !18
  %15 = shl nsw i32 %14, 3, !dbg !19
  %.frozen = freeze i32 %10
  %.frozen844 = freeze i32 %15
  %16 = sdiv i32 %.frozen, %.frozen844, !dbg !20
  %17 = shl i32 %16, 3, !dbg !21
  %18 = sub i32 %12, %17, !dbg !22
  %19 = tail call i32 @llvm.smin.i32(i32 %18, i32 8), !dbg !23
  %20 = mul i32 %16, %.frozen844
  %.decomposed = sub i32 %.frozen, %20
  %.frozen845 = freeze i32 %19
  %21 = sdiv i32 %.decomposed, %.frozen845, !dbg !24
  %22 = mul i32 %21, %.frozen845
  %.decomposed846 = sub i32 %.decomposed, %22
  %23 = add i32 %.decomposed846, %17, !dbg !25
  %24 = shl i32 %23, 7, !dbg !26
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !27
  %26 = and i32 %25, 31, !dbg !27
  %27 = lshr i32 %25, 5, !dbg !27
  %28 = lshr i32 %25, 2, !dbg !27
  %29 = and i32 %28, 31, !dbg !27
  %30 = or disjoint i32 %29, 32, !dbg !27
  %31 = or disjoint i32 %29, 64, !dbg !27
  %32 = or disjoint i32 %29, 96, !dbg !27
  %33 = or disjoint i32 %24, %29, !dbg !28
  %34 = or disjoint i32 %24, %30, !dbg !28
  %35 = or disjoint i32 %24, %31, !dbg !28
  %36 = or disjoint i32 %24, %32, !dbg !28
  %37 = srem i32 %33, %3, !dbg !29
  %38 = srem i32 %34, %3, !dbg !29
  %39 = srem i32 %35, %3, !dbg !29
  %40 = srem i32 %36, %3, !dbg !29
  %41 = shl i32 %21, 6, !dbg !30
  %42 = or disjoint i32 %41, %29, !dbg !31
  %43 = or disjoint i32 %41, %30, !dbg !31
  %44 = srem i32 %42, %4, !dbg !32
  %45 = srem i32 %43, %4, !dbg !32
  %46 = mul i32 %37, %6, !dbg !33
  %47 = mul i32 %38, %6, !dbg !33
  %48 = mul i32 %39, %6, !dbg !33
  %49 = mul i32 %40, %6, !dbg !33
  %50 = shl i32 %25, 4, !dbg !34
  %51 = and i32 %50, 48, !dbg !34
  %52 = add i32 %46, %51, !dbg !35
  %53 = add i32 %47, %51, !dbg !35
  %54 = add i32 %48, %51, !dbg !35
  %55 = add i32 %49, %51, !dbg !35
  %56 = sext i32 %52 to i64, !dbg !36
  %57 = getelementptr i8, ptr addrspace(1) %0, i64 %56, !dbg !36
  %58 = sext i32 %53 to i64, !dbg !36
  %59 = getelementptr i8, ptr addrspace(1) %0, i64 %58, !dbg !36
  %60 = sext i32 %54 to i64, !dbg !36
  %61 = getelementptr i8, ptr addrspace(1) %0, i64 %60, !dbg !36
  %62 = sext i32 %55 to i64, !dbg !36
  %63 = getelementptr i8, ptr addrspace(1) %0, i64 %62, !dbg !36
  %64 = mul i32 %44, %7, !dbg !37
  %65 = mul i32 %45, %7, !dbg !37
  %66 = add i32 %64, %51, !dbg !38
  %67 = add i32 %65, %51, !dbg !38
  %68 = sext i32 %66 to i64, !dbg !39
  %69 = getelementptr i8, ptr addrspace(1) %1, i64 %68, !dbg !39
  %70 = sext i32 %67 to i64, !dbg !39
  %71 = getelementptr i8, ptr addrspace(1) %1, i64 %70, !dbg !39
  %72 = add i32 %5, 63, !dbg !40
  %73 = sdiv i32 %72, 64, !dbg !42
  %74 = tail call half asm "cvt.rz.f16.f32 $0, $1;", "=h,r"(float 0.000000e+00) #2, !dbg !43
  %75 = insertelement <2 x half> poison, half %74, i64 0, !dbg !43
  %76 = shufflevector <2 x half> %75, <2 x half> poison, <2 x i32> zeroinitializer, !dbg !43
  %77 = bitcast <2 x half> %76 to i32, !dbg !43
  %78 = tail call <4 x i8> asm "{                            \0A.reg .b32 a<2>;              \0Aand.b32 a0, $1, 0xfffefffe;  \0Aand.b32 a1, $2, 0xfffefffe;  \0Aadd.u32 a0, a0, 0x00800080;  \0Aadd.u32 a1, a1, 0x00800080;  \0Aprmt.b32 $0, a0, a1, 0x7531; \0A\09}", "=r,r,r"(i32 %77, i32 %77) #2, !dbg !43
  %79 = shufflevector <4 x i8> %78, <4 x i8> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !43
  %80 = icmp sgt i32 %72, 63, !dbg !44
  %81 = icmp slt i32 %51, %5, !dbg !45
  %82 = and i1 %81, %80, !dbg !44
  %83 = shl nuw nsw i32 %29, 6, !dbg !43
  %84 = shl i32 %25, 1, !dbg !43
  %85 = xor i32 %50, %84, !dbg !43
  %86 = and i32 %85, 48, !dbg !43
  %87 = or disjoint i32 %83, %86, !dbg !43
  %88 = zext nneg i32 %87 to i64, !dbg !43
  %89 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %88, !dbg !43
  %90 = shl nuw nsw i32 %30, 6, !dbg !43
  %91 = or disjoint i32 %90, %86, !dbg !43
  %92 = zext nneg i32 %91 to i64, !dbg !43
  %93 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %92, !dbg !43
  %94 = shl nuw nsw i32 %31, 6, !dbg !43
  %95 = or disjoint i32 %94, %86, !dbg !43
  %96 = zext nneg i32 %95 to i64, !dbg !43
  %97 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %96, !dbg !43
  %98 = shl nuw nsw i32 %32, 6, !dbg !43
  %99 = or disjoint i32 %98, %86, !dbg !43
  %100 = zext nneg i32 %99 to i64, !dbg !43
  %101 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %100, !dbg !43
  %102 = select i1 %82, i32 16, i32 0, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %89, ptr addrspace(1) %57, i32 %102, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %93, ptr addrspace(1) %59, i32 %102, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %61, i32 %102, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %101, ptr addrspace(1) %63, i32 %102, i1 true) #2, !dbg !43
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !43
  %103 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %88, !dbg !46
  %104 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %92, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %103, ptr addrspace(1) %69, i32 %102, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %104, ptr addrspace(1) %71, i32 %102, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %105 = icmp sgt i32 %72, 127, !dbg !44
  %106 = getelementptr i8, ptr addrspace(1) %57, i64 64, !dbg !47
  %107 = getelementptr i8, ptr addrspace(1) %59, i64 64, !dbg !47
  %108 = getelementptr i8, ptr addrspace(1) %61, i64 64, !dbg !47
  %109 = getelementptr i8, ptr addrspace(1) %63, i64 64, !dbg !47
  %110 = getelementptr i8, ptr addrspace(1) %69, i64 64, !dbg !48
  %111 = getelementptr i8, ptr addrspace(1) %71, i64 64, !dbg !48
  %112 = add i32 %5, -64, !dbg !49
  %113 = icmp slt i32 %51, %112, !dbg !45
  %114 = and i1 %105, %113, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %115 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %88, !dbg !43
  %116 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %92, !dbg !43
  %117 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %96, !dbg !43
  %118 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %100, !dbg !43
  %119 = select i1 %114, i32 16, i32 0, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %115, ptr addrspace(1) %106, i32 %119, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %116, ptr addrspace(1) %107, i32 %119, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %117, ptr addrspace(1) %108, i32 %119, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %118, ptr addrspace(1) %109, i32 %119, i1 true) #2, !dbg !43
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !43
  %120 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 28672), i64 %88, !dbg !46
  %121 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 28672), i64 %92, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %120, ptr addrspace(1) %110, i32 %119, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %121, ptr addrspace(1) %111, i32 %119, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %122 = icmp sgt i32 %72, 191, !dbg !44
  %123 = getelementptr i8, ptr addrspace(1) %57, i64 128, !dbg !47
  %124 = getelementptr i8, ptr addrspace(1) %59, i64 128, !dbg !47
  %125 = getelementptr i8, ptr addrspace(1) %61, i64 128, !dbg !47
  %126 = getelementptr i8, ptr addrspace(1) %63, i64 128, !dbg !47
  %127 = getelementptr i8, ptr addrspace(1) %69, i64 128, !dbg !48
  %128 = getelementptr i8, ptr addrspace(1) %71, i64 128, !dbg !48
  %129 = add i32 %5, -128, !dbg !49
  %130 = icmp slt i32 %51, %129, !dbg !45
  %131 = and i1 %122, %130, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %132 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %88, !dbg !43
  %133 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %92, !dbg !43
  %134 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %96, !dbg !43
  %135 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %100, !dbg !43
  %136 = select i1 %131, i32 16, i32 0, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %132, ptr addrspace(1) %123, i32 %136, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %133, ptr addrspace(1) %124, i32 %136, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %134, ptr addrspace(1) %125, i32 %136, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %135, ptr addrspace(1) %126, i32 %136, i1 true) #2, !dbg !43
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !43
  %137 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %88, !dbg !46
  %138 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %92, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %137, ptr addrspace(1) %127, i32 %136, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %138, ptr addrspace(1) %128, i32 %136, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  br i1 %80, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !44

.._crit_edge_crit_edge:                           ; preds = %9
  %.pre = lshr i32 %25, 3, !dbg !27
  %.pre653 = and i32 %.pre, 1, !dbg !27
  br label %._crit_edge, !dbg !44

.lr.ph:                                           ; preds = %9
  %139 = add nsw i32 %73, -3
  %140 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %88
  %141 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %92
  %142 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %96
  %143 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %100
  %144 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 45056), i64 %88
  %145 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 45056), i64 %92
  %146 = and i32 %25, 7
  %147 = lshr i32 %25, 3
  %148 = and i32 %147, 1
  %149 = lshr i32 %26, 4
  %150 = shl nuw nsw i32 %27, 1
  %151 = and i32 %150, 6
  %152 = or disjoint i32 %151, %148
  %153 = lshr i32 %146, 1
  %154 = xor i32 %149, %153
  %155 = shl nuw nsw i32 %152, 9
  %156 = shl nuw nsw i32 %146, 6
  %157 = or disjoint i32 %155, %156
  %158 = shl nuw nsw i32 %154, 4
  %159 = or disjoint i32 %157, %158
  %160 = zext nneg i32 %159 to i64
  %161 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %160
  %162 = or disjoint i32 %149, 2
  %163 = xor i32 %162, %153
  %164 = shl nuw nsw i32 %163, 4
  %165 = or disjoint i32 %157, %164
  %166 = zext nneg i32 %165 to i64
  %167 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %166
  %168 = getelementptr i8, ptr addrspace(3) %161, i64 4096
  %169 = getelementptr i8, ptr addrspace(3) %167, i64 4096
  %170 = xor i32 %148, %153
  %171 = shl nuw nsw i32 %149, 9
  %172 = or disjoint i32 %171, %156
  %173 = shl nuw nsw i32 %170, 4
  %174 = or disjoint i32 %173, %172
  %175 = zext nneg i32 %174 to i64
  %176 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 45056), i64 %175
  %177 = or disjoint i32 %148, 2
  %178 = xor i32 %177, %153
  %179 = shl nuw nsw i32 %178, 4
  %180 = or disjoint i32 %179, %172
  %181 = zext nneg i32 %180 to i64
  %182 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 45056), i64 %181
  %183 = getelementptr i8, ptr addrspace(3) %176, i64 1024
  %184 = getelementptr i8, ptr addrspace(3) %182, i64 1024
  %185 = getelementptr i8, ptr addrspace(3) %176, i64 2048
  %186 = getelementptr i8, ptr addrspace(3) %182, i64 2048
  %187 = getelementptr i8, ptr addrspace(3) %176, i64 3072
  %188 = getelementptr i8, ptr addrspace(3) %182, i64 3072
  %.neg642 = add nsw i32 %5, -192
  %189 = shl nuw nsw i32 %29, 6
  %190 = or disjoint i32 %189, %86
  %191 = zext nneg i32 %190 to i64
  %192 = shl nuw nsw i32 %30, 6
  %193 = or disjoint i32 %192, %86
  %194 = zext nneg i32 %193 to i64
  %195 = shl nuw nsw i32 %31, 6
  %196 = or disjoint i32 %195, %86
  %197 = zext nneg i32 %196 to i64
  %198 = shl nuw nsw i32 %32, 6
  %199 = or disjoint i32 %198, %86
  %200 = zext nneg i32 %199 to i64
  %201 = shl nuw nsw i32 %29, 6
  %202 = or disjoint i32 %201, %86
  %203 = zext nneg i32 %202 to i64
  %204 = shl nuw nsw i32 %30, 6
  %205 = or disjoint i32 %204, %86
  %206 = zext nneg i32 %205 to i64
  br label %207, !dbg !44

207:                                              ; preds = %.lr.ph, %207
  %208 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), %.lr.ph ], [ %952, %207 ]
  %.pn195651 = phi i1 [ %130, %.lr.ph ], [ %929, %207 ]
  %.pn195.pn650 = phi i1 [ %113, %.lr.ph ], [ %.pn195651, %207 ]
  %.pn195.pn.pn649 = phi i1 [ %81, %.lr.ph ], [ %.pn195.pn650, %207 ]
  %209 = phi ptr addrspace(3) [ @global_smem, %.lr.ph ], [ %949, %207 ]
  %210 = phi i32 [ 0, %.lr.ph ], [ %946, %207 ]
  %211 = phi i32 [ 2, %.lr.ph ], [ %926, %207 ]
  %.pn161648 = phi ptr addrspace(1) [ %128, %.lr.ph ], [ %923, %207 ]
  %.pn193647 = phi ptr addrspace(1) [ %127, %.lr.ph ], [ %922, %207 ]
  %.pn33646 = phi ptr addrspace(1) [ %126, %.lr.ph ], [ %921, %207 ]
  %.pn65645 = phi ptr addrspace(1) [ %125, %.lr.ph ], [ %920, %207 ]
  %.pn97644 = phi ptr addrspace(1) [ %124, %.lr.ph ], [ %919, %207 ]
  %.pn129643 = phi ptr addrspace(1) [ %123, %.lr.ph ], [ %918, %207 ]
  %212 = phi float [ 0.000000e+00, %.lr.ph ], [ %839, %207 ]
  %213 = phi float [ 0.000000e+00, %.lr.ph ], [ %840, %207 ]
  %214 = phi float [ 0.000000e+00, %.lr.ph ], [ %841, %207 ]
  %215 = phi float [ 0.000000e+00, %.lr.ph ], [ %842, %207 ]
  %216 = phi float [ 0.000000e+00, %.lr.ph ], [ %844, %207 ]
  %217 = phi float [ 0.000000e+00, %.lr.ph ], [ %845, %207 ]
  %218 = phi float [ 0.000000e+00, %.lr.ph ], [ %846, %207 ]
  %219 = phi float [ 0.000000e+00, %.lr.ph ], [ %847, %207 ]
  %220 = phi float [ 0.000000e+00, %.lr.ph ], [ %849, %207 ]
  %221 = phi float [ 0.000000e+00, %.lr.ph ], [ %850, %207 ]
  %222 = phi float [ 0.000000e+00, %.lr.ph ], [ %851, %207 ]
  %223 = phi float [ 0.000000e+00, %.lr.ph ], [ %852, %207 ]
  %224 = phi float [ 0.000000e+00, %.lr.ph ], [ %854, %207 ]
  %225 = phi float [ 0.000000e+00, %.lr.ph ], [ %855, %207 ]
  %226 = phi float [ 0.000000e+00, %.lr.ph ], [ %856, %207 ]
  %227 = phi float [ 0.000000e+00, %.lr.ph ], [ %857, %207 ]
  %228 = phi float [ 0.000000e+00, %.lr.ph ], [ %859, %207 ]
  %229 = phi float [ 0.000000e+00, %.lr.ph ], [ %860, %207 ]
  %230 = phi float [ 0.000000e+00, %.lr.ph ], [ %861, %207 ]
  %231 = phi float [ 0.000000e+00, %.lr.ph ], [ %862, %207 ]
  %232 = phi float [ 0.000000e+00, %.lr.ph ], [ %864, %207 ]
  %233 = phi float [ 0.000000e+00, %.lr.ph ], [ %865, %207 ]
  %234 = phi float [ 0.000000e+00, %.lr.ph ], [ %866, %207 ]
  %235 = phi float [ 0.000000e+00, %.lr.ph ], [ %867, %207 ]
  %236 = phi float [ 0.000000e+00, %.lr.ph ], [ %869, %207 ]
  %237 = phi float [ 0.000000e+00, %.lr.ph ], [ %870, %207 ]
  %238 = phi float [ 0.000000e+00, %.lr.ph ], [ %871, %207 ]
  %239 = phi float [ 0.000000e+00, %.lr.ph ], [ %872, %207 ]
  %240 = phi float [ 0.000000e+00, %.lr.ph ], [ %874, %207 ]
  %241 = phi float [ 0.000000e+00, %.lr.ph ], [ %875, %207 ]
  %242 = phi float [ 0.000000e+00, %.lr.ph ], [ %876, %207 ]
  %243 = phi float [ 0.000000e+00, %.lr.ph ], [ %877, %207 ]
  %244 = phi float [ 0.000000e+00, %.lr.ph ], [ %879, %207 ]
  %245 = phi float [ 0.000000e+00, %.lr.ph ], [ %880, %207 ]
  %246 = phi float [ 0.000000e+00, %.lr.ph ], [ %881, %207 ]
  %247 = phi float [ 0.000000e+00, %.lr.ph ], [ %882, %207 ]
  %248 = phi float [ 0.000000e+00, %.lr.ph ], [ %884, %207 ]
  %249 = phi float [ 0.000000e+00, %.lr.ph ], [ %885, %207 ]
  %250 = phi float [ 0.000000e+00, %.lr.ph ], [ %886, %207 ]
  %251 = phi float [ 0.000000e+00, %.lr.ph ], [ %887, %207 ]
  %252 = phi float [ 0.000000e+00, %.lr.ph ], [ %889, %207 ]
  %253 = phi float [ 0.000000e+00, %.lr.ph ], [ %890, %207 ]
  %254 = phi float [ 0.000000e+00, %.lr.ph ], [ %891, %207 ]
  %255 = phi float [ 0.000000e+00, %.lr.ph ], [ %892, %207 ]
  %256 = phi float [ 0.000000e+00, %.lr.ph ], [ %894, %207 ]
  %257 = phi float [ 0.000000e+00, %.lr.ph ], [ %895, %207 ]
  %258 = phi float [ 0.000000e+00, %.lr.ph ], [ %896, %207 ]
  %259 = phi float [ 0.000000e+00, %.lr.ph ], [ %897, %207 ]
  %260 = phi float [ 0.000000e+00, %.lr.ph ], [ %899, %207 ]
  %261 = phi float [ 0.000000e+00, %.lr.ph ], [ %900, %207 ]
  %262 = phi float [ 0.000000e+00, %.lr.ph ], [ %901, %207 ]
  %263 = phi float [ 0.000000e+00, %.lr.ph ], [ %902, %207 ]
  %264 = phi float [ 0.000000e+00, %.lr.ph ], [ %904, %207 ]
  %265 = phi float [ 0.000000e+00, %.lr.ph ], [ %905, %207 ]
  %266 = phi float [ 0.000000e+00, %.lr.ph ], [ %906, %207 ]
  %267 = phi float [ 0.000000e+00, %.lr.ph ], [ %907, %207 ]
  %268 = phi float [ 0.000000e+00, %.lr.ph ], [ %909, %207 ]
  %269 = phi float [ 0.000000e+00, %.lr.ph ], [ %910, %207 ]
  %270 = phi float [ 0.000000e+00, %.lr.ph ], [ %911, %207 ]
  %271 = phi float [ 0.000000e+00, %.lr.ph ], [ %912, %207 ]
  %272 = phi float [ 0.000000e+00, %.lr.ph ], [ %914, %207 ]
  %273 = phi float [ 0.000000e+00, %.lr.ph ], [ %915, %207 ]
  %274 = phi float [ 0.000000e+00, %.lr.ph ], [ %916, %207 ]
  %275 = phi float [ 0.000000e+00, %.lr.ph ], [ %917, %207 ]
  %276 = phi i32 [ 0, %.lr.ph ], [ %953, %207 ]
  %277 = icmp slt i32 %276, %139, !dbg !44
  %278 = getelementptr i8, ptr addrspace(3) %209, i64 %191, !dbg !43
  %279 = getelementptr i8, ptr addrspace(3) %209, i64 %194, !dbg !43
  %280 = getelementptr i8, ptr addrspace(3) %209, i64 %197, !dbg !43
  %281 = getelementptr i8, ptr addrspace(3) %209, i64 %200, !dbg !43
  %282 = load <16 x i8>, ptr addrspace(3) %278, align 16, !dbg !43
  %283 = insertelement <16 x i1> poison, i1 %.pn195.pn.pn649, i64 0, !dbg !43
  %284 = shufflevector <16 x i1> %283, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !43
  %285 = select <16 x i1> %284, <16 x i8> %282, <16 x i8> %79, !dbg !43
  %286 = load <16 x i8>, ptr addrspace(3) %279, align 16, !dbg !43
  %287 = select <16 x i1> %284, <16 x i8> %286, <16 x i8> %79, !dbg !43
  %288 = load <16 x i8>, ptr addrspace(3) %280, align 16, !dbg !43
  %289 = select <16 x i1> %284, <16 x i8> %288, <16 x i8> %79, !dbg !43
  %290 = load <16 x i8>, ptr addrspace(3) %281, align 16, !dbg !43
  %291 = select <16 x i1> %284, <16 x i8> %290, <16 x i8> %79, !dbg !43
  store <16 x i8> %285, ptr addrspace(3) %140, align 16, !dbg !50
  store <16 x i8> %287, ptr addrspace(3) %141, align 16, !dbg !50
  store <16 x i8> %289, ptr addrspace(3) %142, align 16, !dbg !50
  store <16 x i8> %291, ptr addrspace(3) %143, align 16, !dbg !50
  %292 = getelementptr i8, ptr addrspace(3) %208, i64 %203, !dbg !46
  %293 = getelementptr i8, ptr addrspace(3) %208, i64 %206, !dbg !46
  %294 = load <16 x i8>, ptr addrspace(3) %292, align 16, !dbg !46
  %295 = select <16 x i1> %284, <16 x i8> %294, <16 x i8> %79, !dbg !46
  %296 = load <16 x i8>, ptr addrspace(3) %293, align 16, !dbg !46
  %297 = select <16 x i1> %284, <16 x i8> %296, <16 x i8> %79, !dbg !46
  store <16 x i8> %295, ptr addrspace(3) %144, align 16, !dbg !50
  store <16 x i8> %297, ptr addrspace(3) %145, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %161) #2, !dbg !50
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !50
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !50
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !50
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !50
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %167) #2, !dbg !50
  %304 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !50
  %305 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !50
  %306 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !50
  %307 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !50
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %168) #2, !dbg !50
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !50
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !50
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !50
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !50
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %169) #2, !dbg !50
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !50
  %315 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !50
  %316 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !50
  %317 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !50
  %318 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %299) #2, !dbg !50
  %319 = extractvalue { <2 x half>, <2 x half> } %318, 0, !dbg !50
  %320 = extractvalue { <2 x half>, <2 x half> } %318, 1, !dbg !50
  %321 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %301) #2, !dbg !50
  %322 = extractvalue { <2 x half>, <2 x half> } %321, 0, !dbg !50
  %323 = extractvalue { <2 x half>, <2 x half> } %321, 1, !dbg !50
  %324 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %300) #2, !dbg !50
  %325 = extractvalue { <2 x half>, <2 x half> } %324, 0, !dbg !50
  %326 = extractvalue { <2 x half>, <2 x half> } %324, 1, !dbg !50
  %327 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %302) #2, !dbg !50
  %328 = extractvalue { <2 x half>, <2 x half> } %327, 0, !dbg !50
  %329 = extractvalue { <2 x half>, <2 x half> } %327, 1, !dbg !50
  %330 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %304) #2, !dbg !50
  %331 = extractvalue { <2 x half>, <2 x half> } %330, 0, !dbg !50
  %332 = extractvalue { <2 x half>, <2 x half> } %330, 1, !dbg !50
  %333 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %306) #2, !dbg !50
  %334 = extractvalue { <2 x half>, <2 x half> } %333, 0, !dbg !50
  %335 = extractvalue { <2 x half>, <2 x half> } %333, 1, !dbg !50
  %336 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %305) #2, !dbg !50
  %337 = extractvalue { <2 x half>, <2 x half> } %336, 0, !dbg !50
  %338 = extractvalue { <2 x half>, <2 x half> } %336, 1, !dbg !50
  %339 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %307) #2, !dbg !50
  %340 = extractvalue { <2 x half>, <2 x half> } %339, 0, !dbg !50
  %341 = extractvalue { <2 x half>, <2 x half> } %339, 1, !dbg !50
  %342 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %309) #2, !dbg !50
  %343 = extractvalue { <2 x half>, <2 x half> } %342, 0, !dbg !50
  %344 = extractvalue { <2 x half>, <2 x half> } %342, 1, !dbg !50
  %345 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %311) #2, !dbg !50
  %346 = extractvalue { <2 x half>, <2 x half> } %345, 0, !dbg !50
  %347 = extractvalue { <2 x half>, <2 x half> } %345, 1, !dbg !50
  %348 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %310) #2, !dbg !50
  %349 = extractvalue { <2 x half>, <2 x half> } %348, 0, !dbg !50
  %350 = extractvalue { <2 x half>, <2 x half> } %348, 1, !dbg !50
  %351 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %312) #2, !dbg !50
  %352 = extractvalue { <2 x half>, <2 x half> } %351, 0, !dbg !50
  %353 = extractvalue { <2 x half>, <2 x half> } %351, 1, !dbg !50
  %354 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %314) #2, !dbg !50
  %355 = extractvalue { <2 x half>, <2 x half> } %354, 0, !dbg !50
  %356 = extractvalue { <2 x half>, <2 x half> } %354, 1, !dbg !50
  %357 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %316) #2, !dbg !50
  %358 = extractvalue { <2 x half>, <2 x half> } %357, 0, !dbg !50
  %359 = extractvalue { <2 x half>, <2 x half> } %357, 1, !dbg !50
  %360 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %315) #2, !dbg !50
  %361 = extractvalue { <2 x half>, <2 x half> } %360, 0, !dbg !50
  %362 = extractvalue { <2 x half>, <2 x half> } %360, 1, !dbg !50
  %363 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %317) #2, !dbg !50
  %364 = extractvalue { <2 x half>, <2 x half> } %363, 0, !dbg !50
  %365 = extractvalue { <2 x half>, <2 x half> } %363, 1, !dbg !50
  %366 = bitcast <2 x half> %319 to i32, !dbg !50
  %367 = bitcast <2 x half> %320 to i32, !dbg !50
  %368 = bitcast <2 x half> %325 to i32, !dbg !50
  %369 = bitcast <2 x half> %326 to i32, !dbg !50
  %370 = bitcast <2 x half> %322 to i32, !dbg !50
  %371 = bitcast <2 x half> %323 to i32, !dbg !50
  %372 = bitcast <2 x half> %328 to i32, !dbg !50
  %373 = bitcast <2 x half> %329 to i32, !dbg !50
  %374 = bitcast <2 x half> %331 to i32, !dbg !50
  %375 = bitcast <2 x half> %332 to i32, !dbg !50
  %376 = bitcast <2 x half> %337 to i32, !dbg !50
  %377 = bitcast <2 x half> %338 to i32, !dbg !50
  %378 = bitcast <2 x half> %334 to i32, !dbg !50
  %379 = bitcast <2 x half> %335 to i32, !dbg !50
  %380 = bitcast <2 x half> %340 to i32, !dbg !50
  %381 = bitcast <2 x half> %341 to i32, !dbg !50
  %382 = bitcast <2 x half> %343 to i32, !dbg !50
  %383 = bitcast <2 x half> %344 to i32, !dbg !50
  %384 = bitcast <2 x half> %349 to i32, !dbg !50
  %385 = bitcast <2 x half> %350 to i32, !dbg !50
  %386 = bitcast <2 x half> %346 to i32, !dbg !50
  %387 = bitcast <2 x half> %347 to i32, !dbg !50
  %388 = bitcast <2 x half> %352 to i32, !dbg !50
  %389 = bitcast <2 x half> %353 to i32, !dbg !50
  %390 = bitcast <2 x half> %355 to i32, !dbg !50
  %391 = bitcast <2 x half> %356 to i32, !dbg !50
  %392 = bitcast <2 x half> %361 to i32, !dbg !50
  %393 = bitcast <2 x half> %362 to i32, !dbg !50
  %394 = bitcast <2 x half> %358 to i32, !dbg !50
  %395 = bitcast <2 x half> %359 to i32, !dbg !50
  %396 = bitcast <2 x half> %364 to i32, !dbg !50
  %397 = bitcast <2 x half> %365 to i32, !dbg !50
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %176) #2, !dbg !50
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !50
  %400 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !50
  %401 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !50
  %402 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !50
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %182) #2, !dbg !50
  %404 = extractvalue { i32, i32, i32, i32 } %403, 0, !dbg !50
  %405 = extractvalue { i32, i32, i32, i32 } %403, 1, !dbg !50
  %406 = extractvalue { i32, i32, i32, i32 } %403, 2, !dbg !50
  %407 = extractvalue { i32, i32, i32, i32 } %403, 3, !dbg !50
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %183) #2, !dbg !50
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !50
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !50
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !50
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !50
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %184) #2, !dbg !50
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !50
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !50
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !50
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !50
  %418 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %185) #2, !dbg !50
  %419 = extractvalue { i32, i32, i32, i32 } %418, 0, !dbg !50
  %420 = extractvalue { i32, i32, i32, i32 } %418, 1, !dbg !50
  %421 = extractvalue { i32, i32, i32, i32 } %418, 2, !dbg !50
  %422 = extractvalue { i32, i32, i32, i32 } %418, 3, !dbg !50
  %423 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %186) #2, !dbg !50
  %424 = extractvalue { i32, i32, i32, i32 } %423, 0, !dbg !50
  %425 = extractvalue { i32, i32, i32, i32 } %423, 1, !dbg !50
  %426 = extractvalue { i32, i32, i32, i32 } %423, 2, !dbg !50
  %427 = extractvalue { i32, i32, i32, i32 } %423, 3, !dbg !50
  %428 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %187) #2, !dbg !50
  %429 = extractvalue { i32, i32, i32, i32 } %428, 0, !dbg !50
  %430 = extractvalue { i32, i32, i32, i32 } %428, 1, !dbg !50
  %431 = extractvalue { i32, i32, i32, i32 } %428, 2, !dbg !50
  %432 = extractvalue { i32, i32, i32, i32 } %428, 3, !dbg !50
  %433 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %188) #2, !dbg !50
  %434 = extractvalue { i32, i32, i32, i32 } %433, 0, !dbg !50
  %435 = extractvalue { i32, i32, i32, i32 } %433, 1, !dbg !50
  %436 = extractvalue { i32, i32, i32, i32 } %433, 2, !dbg !50
  %437 = extractvalue { i32, i32, i32, i32 } %433, 3, !dbg !50
  %438 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %399) #2, !dbg !50
  %439 = extractvalue { <2 x half>, <2 x half> } %438, 0, !dbg !50
  %440 = extractvalue { <2 x half>, <2 x half> } %438, 1, !dbg !50
  %441 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %400) #2, !dbg !50
  %442 = extractvalue { <2 x half>, <2 x half> } %441, 0, !dbg !50
  %443 = extractvalue { <2 x half>, <2 x half> } %441, 1, !dbg !50
  %444 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %401) #2, !dbg !50
  %445 = extractvalue { <2 x half>, <2 x half> } %444, 0, !dbg !50
  %446 = extractvalue { <2 x half>, <2 x half> } %444, 1, !dbg !50
  %447 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %402) #2, !dbg !50
  %448 = extractvalue { <2 x half>, <2 x half> } %447, 0, !dbg !50
  %449 = extractvalue { <2 x half>, <2 x half> } %447, 1, !dbg !50
  %450 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %404) #2, !dbg !50
  %451 = extractvalue { <2 x half>, <2 x half> } %450, 0, !dbg !50
  %452 = extractvalue { <2 x half>, <2 x half> } %450, 1, !dbg !50
  %453 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %405) #2, !dbg !50
  %454 = extractvalue { <2 x half>, <2 x half> } %453, 0, !dbg !50
  %455 = extractvalue { <2 x half>, <2 x half> } %453, 1, !dbg !50
  %456 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %406) #2, !dbg !50
  %457 = extractvalue { <2 x half>, <2 x half> } %456, 0, !dbg !50
  %458 = extractvalue { <2 x half>, <2 x half> } %456, 1, !dbg !50
  %459 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %407) #2, !dbg !50
  %460 = extractvalue { <2 x half>, <2 x half> } %459, 0, !dbg !50
  %461 = extractvalue { <2 x half>, <2 x half> } %459, 1, !dbg !50
  %462 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %409) #2, !dbg !50
  %463 = extractvalue { <2 x half>, <2 x half> } %462, 0, !dbg !50
  %464 = extractvalue { <2 x half>, <2 x half> } %462, 1, !dbg !50
  %465 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %410) #2, !dbg !50
  %466 = extractvalue { <2 x half>, <2 x half> } %465, 0, !dbg !50
  %467 = extractvalue { <2 x half>, <2 x half> } %465, 1, !dbg !50
  %468 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %411) #2, !dbg !50
  %469 = extractvalue { <2 x half>, <2 x half> } %468, 0, !dbg !50
  %470 = extractvalue { <2 x half>, <2 x half> } %468, 1, !dbg !50
  %471 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %412) #2, !dbg !50
  %472 = extractvalue { <2 x half>, <2 x half> } %471, 0, !dbg !50
  %473 = extractvalue { <2 x half>, <2 x half> } %471, 1, !dbg !50
  %474 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %414) #2, !dbg !50
  %475 = extractvalue { <2 x half>, <2 x half> } %474, 0, !dbg !50
  %476 = extractvalue { <2 x half>, <2 x half> } %474, 1, !dbg !50
  %477 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %415) #2, !dbg !50
  %478 = extractvalue { <2 x half>, <2 x half> } %477, 0, !dbg !50
  %479 = extractvalue { <2 x half>, <2 x half> } %477, 1, !dbg !50
  %480 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %416) #2, !dbg !50
  %481 = extractvalue { <2 x half>, <2 x half> } %480, 0, !dbg !50
  %482 = extractvalue { <2 x half>, <2 x half> } %480, 1, !dbg !50
  %483 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %417) #2, !dbg !50
  %484 = extractvalue { <2 x half>, <2 x half> } %483, 0, !dbg !50
  %485 = extractvalue { <2 x half>, <2 x half> } %483, 1, !dbg !50
  %486 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %419) #2, !dbg !50
  %487 = extractvalue { <2 x half>, <2 x half> } %486, 0, !dbg !50
  %488 = extractvalue { <2 x half>, <2 x half> } %486, 1, !dbg !50
  %489 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %420) #2, !dbg !50
  %490 = extractvalue { <2 x half>, <2 x half> } %489, 0, !dbg !50
  %491 = extractvalue { <2 x half>, <2 x half> } %489, 1, !dbg !50
  %492 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %421) #2, !dbg !50
  %493 = extractvalue { <2 x half>, <2 x half> } %492, 0, !dbg !50
  %494 = extractvalue { <2 x half>, <2 x half> } %492, 1, !dbg !50
  %495 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %422) #2, !dbg !50
  %496 = extractvalue { <2 x half>, <2 x half> } %495, 0, !dbg !50
  %497 = extractvalue { <2 x half>, <2 x half> } %495, 1, !dbg !50
  %498 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %424) #2, !dbg !50
  %499 = extractvalue { <2 x half>, <2 x half> } %498, 0, !dbg !50
  %500 = extractvalue { <2 x half>, <2 x half> } %498, 1, !dbg !50
  %501 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %425) #2, !dbg !50
  %502 = extractvalue { <2 x half>, <2 x half> } %501, 0, !dbg !50
  %503 = extractvalue { <2 x half>, <2 x half> } %501, 1, !dbg !50
  %504 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %426) #2, !dbg !50
  %505 = extractvalue { <2 x half>, <2 x half> } %504, 0, !dbg !50
  %506 = extractvalue { <2 x half>, <2 x half> } %504, 1, !dbg !50
  %507 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %427) #2, !dbg !50
  %508 = extractvalue { <2 x half>, <2 x half> } %507, 0, !dbg !50
  %509 = extractvalue { <2 x half>, <2 x half> } %507, 1, !dbg !50
  %510 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %429) #2, !dbg !50
  %511 = extractvalue { <2 x half>, <2 x half> } %510, 0, !dbg !50
  %512 = extractvalue { <2 x half>, <2 x half> } %510, 1, !dbg !50
  %513 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %430) #2, !dbg !50
  %514 = extractvalue { <2 x half>, <2 x half> } %513, 0, !dbg !50
  %515 = extractvalue { <2 x half>, <2 x half> } %513, 1, !dbg !50
  %516 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %431) #2, !dbg !50
  %517 = extractvalue { <2 x half>, <2 x half> } %516, 0, !dbg !50
  %518 = extractvalue { <2 x half>, <2 x half> } %516, 1, !dbg !50
  %519 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %432) #2, !dbg !50
  %520 = extractvalue { <2 x half>, <2 x half> } %519, 0, !dbg !50
  %521 = extractvalue { <2 x half>, <2 x half> } %519, 1, !dbg !50
  %522 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %434) #2, !dbg !50
  %523 = extractvalue { <2 x half>, <2 x half> } %522, 0, !dbg !50
  %524 = extractvalue { <2 x half>, <2 x half> } %522, 1, !dbg !50
  %525 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %435) #2, !dbg !50
  %526 = extractvalue { <2 x half>, <2 x half> } %525, 0, !dbg !50
  %527 = extractvalue { <2 x half>, <2 x half> } %525, 1, !dbg !50
  %528 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %436) #2, !dbg !50
  %529 = extractvalue { <2 x half>, <2 x half> } %528, 0, !dbg !50
  %530 = extractvalue { <2 x half>, <2 x half> } %528, 1, !dbg !50
  %531 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %437) #2, !dbg !50
  %532 = extractvalue { <2 x half>, <2 x half> } %531, 0, !dbg !50
  %533 = extractvalue { <2 x half>, <2 x half> } %531, 1, !dbg !50
  %534 = bitcast <2 x half> %439 to i32, !dbg !50
  %535 = bitcast <2 x half> %440 to i32, !dbg !50
  %536 = bitcast <2 x half> %445 to i32, !dbg !50
  %537 = bitcast <2 x half> %446 to i32, !dbg !50
  %538 = bitcast <2 x half> %442 to i32, !dbg !50
  %539 = bitcast <2 x half> %443 to i32, !dbg !50
  %540 = bitcast <2 x half> %448 to i32, !dbg !50
  %541 = bitcast <2 x half> %449 to i32, !dbg !50
  %542 = bitcast <2 x half> %451 to i32, !dbg !50
  %543 = bitcast <2 x half> %452 to i32, !dbg !50
  %544 = bitcast <2 x half> %457 to i32, !dbg !50
  %545 = bitcast <2 x half> %458 to i32, !dbg !50
  %546 = bitcast <2 x half> %454 to i32, !dbg !50
  %547 = bitcast <2 x half> %455 to i32, !dbg !50
  %548 = bitcast <2 x half> %460 to i32, !dbg !50
  %549 = bitcast <2 x half> %461 to i32, !dbg !50
  %550 = bitcast <2 x half> %463 to i32, !dbg !50
  %551 = bitcast <2 x half> %464 to i32, !dbg !50
  %552 = bitcast <2 x half> %469 to i32, !dbg !50
  %553 = bitcast <2 x half> %470 to i32, !dbg !50
  %554 = bitcast <2 x half> %466 to i32, !dbg !50
  %555 = bitcast <2 x half> %467 to i32, !dbg !50
  %556 = bitcast <2 x half> %472 to i32, !dbg !50
  %557 = bitcast <2 x half> %473 to i32, !dbg !50
  %558 = bitcast <2 x half> %475 to i32, !dbg !50
  %559 = bitcast <2 x half> %476 to i32, !dbg !50
  %560 = bitcast <2 x half> %481 to i32, !dbg !50
  %561 = bitcast <2 x half> %482 to i32, !dbg !50
  %562 = bitcast <2 x half> %478 to i32, !dbg !50
  %563 = bitcast <2 x half> %479 to i32, !dbg !50
  %564 = bitcast <2 x half> %484 to i32, !dbg !50
  %565 = bitcast <2 x half> %485 to i32, !dbg !50
  %566 = bitcast <2 x half> %487 to i32, !dbg !50
  %567 = bitcast <2 x half> %488 to i32, !dbg !50
  %568 = bitcast <2 x half> %493 to i32, !dbg !50
  %569 = bitcast <2 x half> %494 to i32, !dbg !50
  %570 = bitcast <2 x half> %490 to i32, !dbg !50
  %571 = bitcast <2 x half> %491 to i32, !dbg !50
  %572 = bitcast <2 x half> %496 to i32, !dbg !50
  %573 = bitcast <2 x half> %497 to i32, !dbg !50
  %574 = bitcast <2 x half> %499 to i32, !dbg !50
  %575 = bitcast <2 x half> %500 to i32, !dbg !50
  %576 = bitcast <2 x half> %505 to i32, !dbg !50
  %577 = bitcast <2 x half> %506 to i32, !dbg !50
  %578 = bitcast <2 x half> %502 to i32, !dbg !50
  %579 = bitcast <2 x half> %503 to i32, !dbg !50
  %580 = bitcast <2 x half> %508 to i32, !dbg !50
  %581 = bitcast <2 x half> %509 to i32, !dbg !50
  %582 = bitcast <2 x half> %511 to i32, !dbg !50
  %583 = bitcast <2 x half> %512 to i32, !dbg !50
  %584 = bitcast <2 x half> %517 to i32, !dbg !50
  %585 = bitcast <2 x half> %518 to i32, !dbg !50
  %586 = bitcast <2 x half> %514 to i32, !dbg !50
  %587 = bitcast <2 x half> %515 to i32, !dbg !50
  %588 = bitcast <2 x half> %520 to i32, !dbg !50
  %589 = bitcast <2 x half> %521 to i32, !dbg !50
  %590 = bitcast <2 x half> %523 to i32, !dbg !50
  %591 = bitcast <2 x half> %524 to i32, !dbg !50
  %592 = bitcast <2 x half> %529 to i32, !dbg !50
  %593 = bitcast <2 x half> %530 to i32, !dbg !50
  %594 = bitcast <2 x half> %526 to i32, !dbg !50
  %595 = bitcast <2 x half> %527 to i32, !dbg !50
  %596 = bitcast <2 x half> %532 to i32, !dbg !50
  %597 = bitcast <2 x half> %533 to i32, !dbg !50
  %598 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %212, float %213, float %214, float %215, i32 %366, i32 %368, i32 %367, i32 %369, i32 %534, i32 %535) #2, !dbg !50
  %599 = extractvalue { float, float, float, float } %598, 0, !dbg !50
  %600 = extractvalue { float, float, float, float } %598, 1, !dbg !50
  %601 = extractvalue { float, float, float, float } %598, 2, !dbg !50
  %602 = extractvalue { float, float, float, float } %598, 3, !dbg !50
  %603 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %216, float %217, float %218, float %219, i32 %366, i32 %368, i32 %367, i32 %369, i32 %536, i32 %537) #2, !dbg !50
  %604 = extractvalue { float, float, float, float } %603, 0, !dbg !50
  %605 = extractvalue { float, float, float, float } %603, 1, !dbg !50
  %606 = extractvalue { float, float, float, float } %603, 2, !dbg !50
  %607 = extractvalue { float, float, float, float } %603, 3, !dbg !50
  %608 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %220, float %221, float %222, float %223, i32 %366, i32 %368, i32 %367, i32 %369, i32 %550, i32 %551) #2, !dbg !50
  %609 = extractvalue { float, float, float, float } %608, 0, !dbg !50
  %610 = extractvalue { float, float, float, float } %608, 1, !dbg !50
  %611 = extractvalue { float, float, float, float } %608, 2, !dbg !50
  %612 = extractvalue { float, float, float, float } %608, 3, !dbg !50
  %613 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %224, float %225, float %226, float %227, i32 %366, i32 %368, i32 %367, i32 %369, i32 %552, i32 %553) #2, !dbg !50
  %614 = extractvalue { float, float, float, float } %613, 0, !dbg !50
  %615 = extractvalue { float, float, float, float } %613, 1, !dbg !50
  %616 = extractvalue { float, float, float, float } %613, 2, !dbg !50
  %617 = extractvalue { float, float, float, float } %613, 3, !dbg !50
  %618 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %228, float %229, float %230, float %231, i32 %366, i32 %368, i32 %367, i32 %369, i32 %566, i32 %567) #2, !dbg !50
  %619 = extractvalue { float, float, float, float } %618, 0, !dbg !50
  %620 = extractvalue { float, float, float, float } %618, 1, !dbg !50
  %621 = extractvalue { float, float, float, float } %618, 2, !dbg !50
  %622 = extractvalue { float, float, float, float } %618, 3, !dbg !50
  %623 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %232, float %233, float %234, float %235, i32 %366, i32 %368, i32 %367, i32 %369, i32 %568, i32 %569) #2, !dbg !50
  %624 = extractvalue { float, float, float, float } %623, 0, !dbg !50
  %625 = extractvalue { float, float, float, float } %623, 1, !dbg !50
  %626 = extractvalue { float, float, float, float } %623, 2, !dbg !50
  %627 = extractvalue { float, float, float, float } %623, 3, !dbg !50
  %628 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %236, float %237, float %238, float %239, i32 %366, i32 %368, i32 %367, i32 %369, i32 %582, i32 %583) #2, !dbg !50
  %629 = extractvalue { float, float, float, float } %628, 0, !dbg !50
  %630 = extractvalue { float, float, float, float } %628, 1, !dbg !50
  %631 = extractvalue { float, float, float, float } %628, 2, !dbg !50
  %632 = extractvalue { float, float, float, float } %628, 3, !dbg !50
  %633 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %240, float %241, float %242, float %243, i32 %366, i32 %368, i32 %367, i32 %369, i32 %584, i32 %585) #2, !dbg !50
  %634 = extractvalue { float, float, float, float } %633, 0, !dbg !50
  %635 = extractvalue { float, float, float, float } %633, 1, !dbg !50
  %636 = extractvalue { float, float, float, float } %633, 2, !dbg !50
  %637 = extractvalue { float, float, float, float } %633, 3, !dbg !50
  %638 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %244, float %245, float %246, float %247, i32 %382, i32 %384, i32 %383, i32 %385, i32 %534, i32 %535) #2, !dbg !50
  %639 = extractvalue { float, float, float, float } %638, 0, !dbg !50
  %640 = extractvalue { float, float, float, float } %638, 1, !dbg !50
  %641 = extractvalue { float, float, float, float } %638, 2, !dbg !50
  %642 = extractvalue { float, float, float, float } %638, 3, !dbg !50
  %643 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %248, float %249, float %250, float %251, i32 %382, i32 %384, i32 %383, i32 %385, i32 %536, i32 %537) #2, !dbg !50
  %644 = extractvalue { float, float, float, float } %643, 0, !dbg !50
  %645 = extractvalue { float, float, float, float } %643, 1, !dbg !50
  %646 = extractvalue { float, float, float, float } %643, 2, !dbg !50
  %647 = extractvalue { float, float, float, float } %643, 3, !dbg !50
  %648 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %252, float %253, float %254, float %255, i32 %382, i32 %384, i32 %383, i32 %385, i32 %550, i32 %551) #2, !dbg !50
  %649 = extractvalue { float, float, float, float } %648, 0, !dbg !50
  %650 = extractvalue { float, float, float, float } %648, 1, !dbg !50
  %651 = extractvalue { float, float, float, float } %648, 2, !dbg !50
  %652 = extractvalue { float, float, float, float } %648, 3, !dbg !50
  %653 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %256, float %257, float %258, float %259, i32 %382, i32 %384, i32 %383, i32 %385, i32 %552, i32 %553) #2, !dbg !50
  %654 = extractvalue { float, float, float, float } %653, 0, !dbg !50
  %655 = extractvalue { float, float, float, float } %653, 1, !dbg !50
  %656 = extractvalue { float, float, float, float } %653, 2, !dbg !50
  %657 = extractvalue { float, float, float, float } %653, 3, !dbg !50
  %658 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %260, float %261, float %262, float %263, i32 %382, i32 %384, i32 %383, i32 %385, i32 %566, i32 %567) #2, !dbg !50
  %659 = extractvalue { float, float, float, float } %658, 0, !dbg !50
  %660 = extractvalue { float, float, float, float } %658, 1, !dbg !50
  %661 = extractvalue { float, float, float, float } %658, 2, !dbg !50
  %662 = extractvalue { float, float, float, float } %658, 3, !dbg !50
  %663 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %264, float %265, float %266, float %267, i32 %382, i32 %384, i32 %383, i32 %385, i32 %568, i32 %569) #2, !dbg !50
  %664 = extractvalue { float, float, float, float } %663, 0, !dbg !50
  %665 = extractvalue { float, float, float, float } %663, 1, !dbg !50
  %666 = extractvalue { float, float, float, float } %663, 2, !dbg !50
  %667 = extractvalue { float, float, float, float } %663, 3, !dbg !50
  %668 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %268, float %269, float %270, float %271, i32 %382, i32 %384, i32 %383, i32 %385, i32 %582, i32 %583) #2, !dbg !50
  %669 = extractvalue { float, float, float, float } %668, 0, !dbg !50
  %670 = extractvalue { float, float, float, float } %668, 1, !dbg !50
  %671 = extractvalue { float, float, float, float } %668, 2, !dbg !50
  %672 = extractvalue { float, float, float, float } %668, 3, !dbg !50
  %673 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %272, float %273, float %274, float %275, i32 %382, i32 %384, i32 %383, i32 %385, i32 %584, i32 %585) #2, !dbg !50
  %674 = extractvalue { float, float, float, float } %673, 0, !dbg !50
  %675 = extractvalue { float, float, float, float } %673, 1, !dbg !50
  %676 = extractvalue { float, float, float, float } %673, 2, !dbg !50
  %677 = extractvalue { float, float, float, float } %673, 3, !dbg !50
  %678 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %599, float %600, float %601, float %602, i32 %370, i32 %372, i32 %371, i32 %373, i32 %538, i32 %539) #2, !dbg !50
  %679 = extractvalue { float, float, float, float } %678, 0, !dbg !50
  %680 = extractvalue { float, float, float, float } %678, 1, !dbg !50
  %681 = extractvalue { float, float, float, float } %678, 2, !dbg !50
  %682 = extractvalue { float, float, float, float } %678, 3, !dbg !50
  %683 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %604, float %605, float %606, float %607, i32 %370, i32 %372, i32 %371, i32 %373, i32 %540, i32 %541) #2, !dbg !50
  %684 = extractvalue { float, float, float, float } %683, 0, !dbg !50
  %685 = extractvalue { float, float, float, float } %683, 1, !dbg !50
  %686 = extractvalue { float, float, float, float } %683, 2, !dbg !50
  %687 = extractvalue { float, float, float, float } %683, 3, !dbg !50
  %688 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %609, float %610, float %611, float %612, i32 %370, i32 %372, i32 %371, i32 %373, i32 %554, i32 %555) #2, !dbg !50
  %689 = extractvalue { float, float, float, float } %688, 0, !dbg !50
  %690 = extractvalue { float, float, float, float } %688, 1, !dbg !50
  %691 = extractvalue { float, float, float, float } %688, 2, !dbg !50
  %692 = extractvalue { float, float, float, float } %688, 3, !dbg !50
  %693 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %614, float %615, float %616, float %617, i32 %370, i32 %372, i32 %371, i32 %373, i32 %556, i32 %557) #2, !dbg !50
  %694 = extractvalue { float, float, float, float } %693, 0, !dbg !50
  %695 = extractvalue { float, float, float, float } %693, 1, !dbg !50
  %696 = extractvalue { float, float, float, float } %693, 2, !dbg !50
  %697 = extractvalue { float, float, float, float } %693, 3, !dbg !50
  %698 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %619, float %620, float %621, float %622, i32 %370, i32 %372, i32 %371, i32 %373, i32 %570, i32 %571) #2, !dbg !50
  %699 = extractvalue { float, float, float, float } %698, 0, !dbg !50
  %700 = extractvalue { float, float, float, float } %698, 1, !dbg !50
  %701 = extractvalue { float, float, float, float } %698, 2, !dbg !50
  %702 = extractvalue { float, float, float, float } %698, 3, !dbg !50
  %703 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %624, float %625, float %626, float %627, i32 %370, i32 %372, i32 %371, i32 %373, i32 %572, i32 %573) #2, !dbg !50
  %704 = extractvalue { float, float, float, float } %703, 0, !dbg !50
  %705 = extractvalue { float, float, float, float } %703, 1, !dbg !50
  %706 = extractvalue { float, float, float, float } %703, 2, !dbg !50
  %707 = extractvalue { float, float, float, float } %703, 3, !dbg !50
  %708 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %629, float %630, float %631, float %632, i32 %370, i32 %372, i32 %371, i32 %373, i32 %586, i32 %587) #2, !dbg !50
  %709 = extractvalue { float, float, float, float } %708, 0, !dbg !50
  %710 = extractvalue { float, float, float, float } %708, 1, !dbg !50
  %711 = extractvalue { float, float, float, float } %708, 2, !dbg !50
  %712 = extractvalue { float, float, float, float } %708, 3, !dbg !50
  %713 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %634, float %635, float %636, float %637, i32 %370, i32 %372, i32 %371, i32 %373, i32 %588, i32 %589) #2, !dbg !50
  %714 = extractvalue { float, float, float, float } %713, 0, !dbg !50
  %715 = extractvalue { float, float, float, float } %713, 1, !dbg !50
  %716 = extractvalue { float, float, float, float } %713, 2, !dbg !50
  %717 = extractvalue { float, float, float, float } %713, 3, !dbg !50
  %718 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %639, float %640, float %641, float %642, i32 %386, i32 %388, i32 %387, i32 %389, i32 %538, i32 %539) #2, !dbg !50
  %719 = extractvalue { float, float, float, float } %718, 0, !dbg !50
  %720 = extractvalue { float, float, float, float } %718, 1, !dbg !50
  %721 = extractvalue { float, float, float, float } %718, 2, !dbg !50
  %722 = extractvalue { float, float, float, float } %718, 3, !dbg !50
  %723 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %644, float %645, float %646, float %647, i32 %386, i32 %388, i32 %387, i32 %389, i32 %540, i32 %541) #2, !dbg !50
  %724 = extractvalue { float, float, float, float } %723, 0, !dbg !50
  %725 = extractvalue { float, float, float, float } %723, 1, !dbg !50
  %726 = extractvalue { float, float, float, float } %723, 2, !dbg !50
  %727 = extractvalue { float, float, float, float } %723, 3, !dbg !50
  %728 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %649, float %650, float %651, float %652, i32 %386, i32 %388, i32 %387, i32 %389, i32 %554, i32 %555) #2, !dbg !50
  %729 = extractvalue { float, float, float, float } %728, 0, !dbg !50
  %730 = extractvalue { float, float, float, float } %728, 1, !dbg !50
  %731 = extractvalue { float, float, float, float } %728, 2, !dbg !50
  %732 = extractvalue { float, float, float, float } %728, 3, !dbg !50
  %733 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %654, float %655, float %656, float %657, i32 %386, i32 %388, i32 %387, i32 %389, i32 %556, i32 %557) #2, !dbg !50
  %734 = extractvalue { float, float, float, float } %733, 0, !dbg !50
  %735 = extractvalue { float, float, float, float } %733, 1, !dbg !50
  %736 = extractvalue { float, float, float, float } %733, 2, !dbg !50
  %737 = extractvalue { float, float, float, float } %733, 3, !dbg !50
  %738 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %659, float %660, float %661, float %662, i32 %386, i32 %388, i32 %387, i32 %389, i32 %570, i32 %571) #2, !dbg !50
  %739 = extractvalue { float, float, float, float } %738, 0, !dbg !50
  %740 = extractvalue { float, float, float, float } %738, 1, !dbg !50
  %741 = extractvalue { float, float, float, float } %738, 2, !dbg !50
  %742 = extractvalue { float, float, float, float } %738, 3, !dbg !50
  %743 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %664, float %665, float %666, float %667, i32 %386, i32 %388, i32 %387, i32 %389, i32 %572, i32 %573) #2, !dbg !50
  %744 = extractvalue { float, float, float, float } %743, 0, !dbg !50
  %745 = extractvalue { float, float, float, float } %743, 1, !dbg !50
  %746 = extractvalue { float, float, float, float } %743, 2, !dbg !50
  %747 = extractvalue { float, float, float, float } %743, 3, !dbg !50
  %748 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %669, float %670, float %671, float %672, i32 %386, i32 %388, i32 %387, i32 %389, i32 %586, i32 %587) #2, !dbg !50
  %749 = extractvalue { float, float, float, float } %748, 0, !dbg !50
  %750 = extractvalue { float, float, float, float } %748, 1, !dbg !50
  %751 = extractvalue { float, float, float, float } %748, 2, !dbg !50
  %752 = extractvalue { float, float, float, float } %748, 3, !dbg !50
  %753 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %674, float %675, float %676, float %677, i32 %386, i32 %388, i32 %387, i32 %389, i32 %588, i32 %589) #2, !dbg !50
  %754 = extractvalue { float, float, float, float } %753, 0, !dbg !50
  %755 = extractvalue { float, float, float, float } %753, 1, !dbg !50
  %756 = extractvalue { float, float, float, float } %753, 2, !dbg !50
  %757 = extractvalue { float, float, float, float } %753, 3, !dbg !50
  %758 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %679, float %680, float %681, float %682, i32 %374, i32 %376, i32 %375, i32 %377, i32 %542, i32 %543) #2, !dbg !50
  %759 = extractvalue { float, float, float, float } %758, 0, !dbg !50
  %760 = extractvalue { float, float, float, float } %758, 1, !dbg !50
  %761 = extractvalue { float, float, float, float } %758, 2, !dbg !50
  %762 = extractvalue { float, float, float, float } %758, 3, !dbg !50
  %763 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %684, float %685, float %686, float %687, i32 %374, i32 %376, i32 %375, i32 %377, i32 %544, i32 %545) #2, !dbg !50
  %764 = extractvalue { float, float, float, float } %763, 0, !dbg !50
  %765 = extractvalue { float, float, float, float } %763, 1, !dbg !50
  %766 = extractvalue { float, float, float, float } %763, 2, !dbg !50
  %767 = extractvalue { float, float, float, float } %763, 3, !dbg !50
  %768 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %689, float %690, float %691, float %692, i32 %374, i32 %376, i32 %375, i32 %377, i32 %558, i32 %559) #2, !dbg !50
  %769 = extractvalue { float, float, float, float } %768, 0, !dbg !50
  %770 = extractvalue { float, float, float, float } %768, 1, !dbg !50
  %771 = extractvalue { float, float, float, float } %768, 2, !dbg !50
  %772 = extractvalue { float, float, float, float } %768, 3, !dbg !50
  %773 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %694, float %695, float %696, float %697, i32 %374, i32 %376, i32 %375, i32 %377, i32 %560, i32 %561) #2, !dbg !50
  %774 = extractvalue { float, float, float, float } %773, 0, !dbg !50
  %775 = extractvalue { float, float, float, float } %773, 1, !dbg !50
  %776 = extractvalue { float, float, float, float } %773, 2, !dbg !50
  %777 = extractvalue { float, float, float, float } %773, 3, !dbg !50
  %778 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %699, float %700, float %701, float %702, i32 %374, i32 %376, i32 %375, i32 %377, i32 %574, i32 %575) #2, !dbg !50
  %779 = extractvalue { float, float, float, float } %778, 0, !dbg !50
  %780 = extractvalue { float, float, float, float } %778, 1, !dbg !50
  %781 = extractvalue { float, float, float, float } %778, 2, !dbg !50
  %782 = extractvalue { float, float, float, float } %778, 3, !dbg !50
  %783 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %704, float %705, float %706, float %707, i32 %374, i32 %376, i32 %375, i32 %377, i32 %576, i32 %577) #2, !dbg !50
  %784 = extractvalue { float, float, float, float } %783, 0, !dbg !50
  %785 = extractvalue { float, float, float, float } %783, 1, !dbg !50
  %786 = extractvalue { float, float, float, float } %783, 2, !dbg !50
  %787 = extractvalue { float, float, float, float } %783, 3, !dbg !50
  %788 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %709, float %710, float %711, float %712, i32 %374, i32 %376, i32 %375, i32 %377, i32 %590, i32 %591) #2, !dbg !50
  %789 = extractvalue { float, float, float, float } %788, 0, !dbg !50
  %790 = extractvalue { float, float, float, float } %788, 1, !dbg !50
  %791 = extractvalue { float, float, float, float } %788, 2, !dbg !50
  %792 = extractvalue { float, float, float, float } %788, 3, !dbg !50
  %793 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %714, float %715, float %716, float %717, i32 %374, i32 %376, i32 %375, i32 %377, i32 %592, i32 %593) #2, !dbg !50
  %794 = extractvalue { float, float, float, float } %793, 0, !dbg !50
  %795 = extractvalue { float, float, float, float } %793, 1, !dbg !50
  %796 = extractvalue { float, float, float, float } %793, 2, !dbg !50
  %797 = extractvalue { float, float, float, float } %793, 3, !dbg !50
  %798 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %719, float %720, float %721, float %722, i32 %390, i32 %392, i32 %391, i32 %393, i32 %542, i32 %543) #2, !dbg !50
  %799 = extractvalue { float, float, float, float } %798, 0, !dbg !50
  %800 = extractvalue { float, float, float, float } %798, 1, !dbg !50
  %801 = extractvalue { float, float, float, float } %798, 2, !dbg !50
  %802 = extractvalue { float, float, float, float } %798, 3, !dbg !50
  %803 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %724, float %725, float %726, float %727, i32 %390, i32 %392, i32 %391, i32 %393, i32 %544, i32 %545) #2, !dbg !50
  %804 = extractvalue { float, float, float, float } %803, 0, !dbg !50
  %805 = extractvalue { float, float, float, float } %803, 1, !dbg !50
  %806 = extractvalue { float, float, float, float } %803, 2, !dbg !50
  %807 = extractvalue { float, float, float, float } %803, 3, !dbg !50
  %808 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %729, float %730, float %731, float %732, i32 %390, i32 %392, i32 %391, i32 %393, i32 %558, i32 %559) #2, !dbg !50
  %809 = extractvalue { float, float, float, float } %808, 0, !dbg !50
  %810 = extractvalue { float, float, float, float } %808, 1, !dbg !50
  %811 = extractvalue { float, float, float, float } %808, 2, !dbg !50
  %812 = extractvalue { float, float, float, float } %808, 3, !dbg !50
  %813 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %734, float %735, float %736, float %737, i32 %390, i32 %392, i32 %391, i32 %393, i32 %560, i32 %561) #2, !dbg !50
  %814 = extractvalue { float, float, float, float } %813, 0, !dbg !50
  %815 = extractvalue { float, float, float, float } %813, 1, !dbg !50
  %816 = extractvalue { float, float, float, float } %813, 2, !dbg !50
  %817 = extractvalue { float, float, float, float } %813, 3, !dbg !50
  %818 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %739, float %740, float %741, float %742, i32 %390, i32 %392, i32 %391, i32 %393, i32 %574, i32 %575) #2, !dbg !50
  %819 = extractvalue { float, float, float, float } %818, 0, !dbg !50
  %820 = extractvalue { float, float, float, float } %818, 1, !dbg !50
  %821 = extractvalue { float, float, float, float } %818, 2, !dbg !50
  %822 = extractvalue { float, float, float, float } %818, 3, !dbg !50
  %823 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %744, float %745, float %746, float %747, i32 %390, i32 %392, i32 %391, i32 %393, i32 %576, i32 %577) #2, !dbg !50
  %824 = extractvalue { float, float, float, float } %823, 0, !dbg !50
  %825 = extractvalue { float, float, float, float } %823, 1, !dbg !50
  %826 = extractvalue { float, float, float, float } %823, 2, !dbg !50
  %827 = extractvalue { float, float, float, float } %823, 3, !dbg !50
  %828 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %749, float %750, float %751, float %752, i32 %390, i32 %392, i32 %391, i32 %393, i32 %590, i32 %591) #2, !dbg !50
  %829 = extractvalue { float, float, float, float } %828, 0, !dbg !50
  %830 = extractvalue { float, float, float, float } %828, 1, !dbg !50
  %831 = extractvalue { float, float, float, float } %828, 2, !dbg !50
  %832 = extractvalue { float, float, float, float } %828, 3, !dbg !50
  %833 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %754, float %755, float %756, float %757, i32 %390, i32 %392, i32 %391, i32 %393, i32 %592, i32 %593) #2, !dbg !50
  %834 = extractvalue { float, float, float, float } %833, 0, !dbg !50
  %835 = extractvalue { float, float, float, float } %833, 1, !dbg !50
  %836 = extractvalue { float, float, float, float } %833, 2, !dbg !50
  %837 = extractvalue { float, float, float, float } %833, 3, !dbg !50
  %838 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %759, float %760, float %761, float %762, i32 %378, i32 %380, i32 %379, i32 %381, i32 %546, i32 %547) #2, !dbg !50
  %839 = extractvalue { float, float, float, float } %838, 0, !dbg !50
  %840 = extractvalue { float, float, float, float } %838, 1, !dbg !50
  %841 = extractvalue { float, float, float, float } %838, 2, !dbg !50
  %842 = extractvalue { float, float, float, float } %838, 3, !dbg !50
  %843 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %764, float %765, float %766, float %767, i32 %378, i32 %380, i32 %379, i32 %381, i32 %548, i32 %549) #2, !dbg !50
  %844 = extractvalue { float, float, float, float } %843, 0, !dbg !50
  %845 = extractvalue { float, float, float, float } %843, 1, !dbg !50
  %846 = extractvalue { float, float, float, float } %843, 2, !dbg !50
  %847 = extractvalue { float, float, float, float } %843, 3, !dbg !50
  %848 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %769, float %770, float %771, float %772, i32 %378, i32 %380, i32 %379, i32 %381, i32 %562, i32 %563) #2, !dbg !50
  %849 = extractvalue { float, float, float, float } %848, 0, !dbg !50
  %850 = extractvalue { float, float, float, float } %848, 1, !dbg !50
  %851 = extractvalue { float, float, float, float } %848, 2, !dbg !50
  %852 = extractvalue { float, float, float, float } %848, 3, !dbg !50
  %853 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %774, float %775, float %776, float %777, i32 %378, i32 %380, i32 %379, i32 %381, i32 %564, i32 %565) #2, !dbg !50
  %854 = extractvalue { float, float, float, float } %853, 0, !dbg !50
  %855 = extractvalue { float, float, float, float } %853, 1, !dbg !50
  %856 = extractvalue { float, float, float, float } %853, 2, !dbg !50
  %857 = extractvalue { float, float, float, float } %853, 3, !dbg !50
  %858 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %779, float %780, float %781, float %782, i32 %378, i32 %380, i32 %379, i32 %381, i32 %578, i32 %579) #2, !dbg !50
  %859 = extractvalue { float, float, float, float } %858, 0, !dbg !50
  %860 = extractvalue { float, float, float, float } %858, 1, !dbg !50
  %861 = extractvalue { float, float, float, float } %858, 2, !dbg !50
  %862 = extractvalue { float, float, float, float } %858, 3, !dbg !50
  %863 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %784, float %785, float %786, float %787, i32 %378, i32 %380, i32 %379, i32 %381, i32 %580, i32 %581) #2, !dbg !50
  %864 = extractvalue { float, float, float, float } %863, 0, !dbg !50
  %865 = extractvalue { float, float, float, float } %863, 1, !dbg !50
  %866 = extractvalue { float, float, float, float } %863, 2, !dbg !50
  %867 = extractvalue { float, float, float, float } %863, 3, !dbg !50
  %868 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %789, float %790, float %791, float %792, i32 %378, i32 %380, i32 %379, i32 %381, i32 %594, i32 %595) #2, !dbg !50
  %869 = extractvalue { float, float, float, float } %868, 0, !dbg !50
  %870 = extractvalue { float, float, float, float } %868, 1, !dbg !50
  %871 = extractvalue { float, float, float, float } %868, 2, !dbg !50
  %872 = extractvalue { float, float, float, float } %868, 3, !dbg !50
  %873 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %794, float %795, float %796, float %797, i32 %378, i32 %380, i32 %379, i32 %381, i32 %596, i32 %597) #2, !dbg !50
  %874 = extractvalue { float, float, float, float } %873, 0, !dbg !50
  %875 = extractvalue { float, float, float, float } %873, 1, !dbg !50
  %876 = extractvalue { float, float, float, float } %873, 2, !dbg !50
  %877 = extractvalue { float, float, float, float } %873, 3, !dbg !50
  %878 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %799, float %800, float %801, float %802, i32 %394, i32 %396, i32 %395, i32 %397, i32 %546, i32 %547) #2, !dbg !50
  %879 = extractvalue { float, float, float, float } %878, 0, !dbg !50
  %880 = extractvalue { float, float, float, float } %878, 1, !dbg !50
  %881 = extractvalue { float, float, float, float } %878, 2, !dbg !50
  %882 = extractvalue { float, float, float, float } %878, 3, !dbg !50
  %883 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %804, float %805, float %806, float %807, i32 %394, i32 %396, i32 %395, i32 %397, i32 %548, i32 %549) #2, !dbg !50
  %884 = extractvalue { float, float, float, float } %883, 0, !dbg !50
  %885 = extractvalue { float, float, float, float } %883, 1, !dbg !50
  %886 = extractvalue { float, float, float, float } %883, 2, !dbg !50
  %887 = extractvalue { float, float, float, float } %883, 3, !dbg !50
  %888 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %809, float %810, float %811, float %812, i32 %394, i32 %396, i32 %395, i32 %397, i32 %562, i32 %563) #2, !dbg !50
  %889 = extractvalue { float, float, float, float } %888, 0, !dbg !50
  %890 = extractvalue { float, float, float, float } %888, 1, !dbg !50
  %891 = extractvalue { float, float, float, float } %888, 2, !dbg !50
  %892 = extractvalue { float, float, float, float } %888, 3, !dbg !50
  %893 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %814, float %815, float %816, float %817, i32 %394, i32 %396, i32 %395, i32 %397, i32 %564, i32 %565) #2, !dbg !50
  %894 = extractvalue { float, float, float, float } %893, 0, !dbg !50
  %895 = extractvalue { float, float, float, float } %893, 1, !dbg !50
  %896 = extractvalue { float, float, float, float } %893, 2, !dbg !50
  %897 = extractvalue { float, float, float, float } %893, 3, !dbg !50
  %898 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %819, float %820, float %821, float %822, i32 %394, i32 %396, i32 %395, i32 %397, i32 %578, i32 %579) #2, !dbg !50
  %899 = extractvalue { float, float, float, float } %898, 0, !dbg !50
  %900 = extractvalue { float, float, float, float } %898, 1, !dbg !50
  %901 = extractvalue { float, float, float, float } %898, 2, !dbg !50
  %902 = extractvalue { float, float, float, float } %898, 3, !dbg !50
  %903 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %824, float %825, float %826, float %827, i32 %394, i32 %396, i32 %395, i32 %397, i32 %580, i32 %581) #2, !dbg !50
  %904 = extractvalue { float, float, float, float } %903, 0, !dbg !50
  %905 = extractvalue { float, float, float, float } %903, 1, !dbg !50
  %906 = extractvalue { float, float, float, float } %903, 2, !dbg !50
  %907 = extractvalue { float, float, float, float } %903, 3, !dbg !50
  %908 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %829, float %830, float %831, float %832, i32 %394, i32 %396, i32 %395, i32 %397, i32 %594, i32 %595) #2, !dbg !50
  %909 = extractvalue { float, float, float, float } %908, 0, !dbg !50
  %910 = extractvalue { float, float, float, float } %908, 1, !dbg !50
  %911 = extractvalue { float, float, float, float } %908, 2, !dbg !50
  %912 = extractvalue { float, float, float, float } %908, 3, !dbg !50
  %913 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %834, float %835, float %836, float %837, i32 %394, i32 %396, i32 %395, i32 %397, i32 %596, i32 %597) #2, !dbg !50
  %914 = extractvalue { float, float, float, float } %913, 0, !dbg !50
  %915 = extractvalue { float, float, float, float } %913, 1, !dbg !50
  %916 = extractvalue { float, float, float, float } %913, 2, !dbg !50
  %917 = extractvalue { float, float, float, float } %913, 3, !dbg !50
  %918 = getelementptr i8, ptr addrspace(1) %.pn129643, i64 64, !dbg !47
  %919 = getelementptr i8, ptr addrspace(1) %.pn97644, i64 64, !dbg !47
  %920 = getelementptr i8, ptr addrspace(1) %.pn65645, i64 64, !dbg !47
  %921 = getelementptr i8, ptr addrspace(1) %.pn33646, i64 64, !dbg !47
  %922 = getelementptr i8, ptr addrspace(1) %.pn193647, i64 64, !dbg !48
  %923 = getelementptr i8, ptr addrspace(1) %.pn161648, i64 64, !dbg !48
  %924 = add i32 %211, 1, !dbg !44
  %925 = icmp slt i32 %924, 3, !dbg !44
  %926 = select i1 %925, i32 %924, i32 0, !dbg !44
  %927 = shl i32 %276, 6, !dbg !49
  %928 = sub i32 %.neg642, %927, !dbg !49
  %929 = icmp slt i32 %51, %928, !dbg !45
  %930 = shl i32 %926, 13, !dbg !43
  %931 = sext i32 %930 to i64, !dbg !43
  %932 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %931, !dbg !43
  %933 = and i1 %277, %929, !dbg !44
  %934 = getelementptr i8, ptr addrspace(3) %932, i64 %88, !dbg !43
  %935 = getelementptr i8, ptr addrspace(3) %932, i64 %92, !dbg !43
  %936 = getelementptr i8, ptr addrspace(3) %932, i64 %96, !dbg !43
  %937 = getelementptr i8, ptr addrspace(3) %932, i64 %100, !dbg !43
  %938 = select i1 %933, i32 16, i32 0, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %934, ptr addrspace(1) %918, i32 %938, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %935, ptr addrspace(1) %919, i32 %938, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %936, ptr addrspace(1) %920, i32 %938, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %937, ptr addrspace(1) %921, i32 %938, i1 true) #2, !dbg !43
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !43
  %939 = shl i32 %926, 12, !dbg !46
  %940 = sext i32 %939 to i64, !dbg !46
  %941 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %940, !dbg !46
  %942 = getelementptr i8, ptr addrspace(3) %941, i64 %88, !dbg !46
  %943 = getelementptr i8, ptr addrspace(3) %941, i64 %92, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %942, ptr addrspace(1) %922, i32 %938, i1 true) #2, !dbg !46
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %943, ptr addrspace(1) %923, i32 %938, i1 true) #2, !dbg !46
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !46
  %944 = add i32 %210, 1, !dbg !44
  %945 = icmp slt i32 %944, 3, !dbg !44
  %946 = select i1 %945, i32 %944, i32 0, !dbg !44
  %947 = shl i32 %946, 13, !dbg !43
  %948 = sext i32 %947 to i64, !dbg !43
  %949 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %948, !dbg !43
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %950 = shl i32 %946, 12, !dbg !46
  %951 = sext i32 %950 to i64, !dbg !46
  %952 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %951, !dbg !46
  %953 = add nuw nsw i32 %276, 1, !dbg !44
  %954 = icmp slt i32 %953, %73, !dbg !44
  br i1 %954, label %207, label %._crit_edge.loopexit, !dbg !44

._crit_edge.loopexit:                             ; preds = %207
  %955 = insertelement <64 x float> poison, float %839, i64 0, !dbg !51
  %956 = insertelement <64 x float> %955, float %840, i64 1, !dbg !51
  %957 = insertelement <64 x float> %956, float %841, i64 2, !dbg !51
  %958 = insertelement <64 x float> %957, float %842, i64 3, !dbg !51
  %959 = insertelement <64 x float> %958, float %844, i64 4, !dbg !51
  %960 = insertelement <64 x float> %959, float %845, i64 5, !dbg !51
  %961 = insertelement <64 x float> %960, float %846, i64 6, !dbg !51
  %962 = insertelement <64 x float> %961, float %847, i64 7, !dbg !51
  %963 = insertelement <64 x float> %962, float %849, i64 8, !dbg !51
  %964 = insertelement <64 x float> %963, float %850, i64 9, !dbg !51
  %965 = insertelement <64 x float> %964, float %851, i64 10, !dbg !51
  %966 = insertelement <64 x float> %965, float %852, i64 11, !dbg !51
  %967 = insertelement <64 x float> %966, float %854, i64 12, !dbg !51
  %968 = insertelement <64 x float> %967, float %855, i64 13, !dbg !51
  %969 = insertelement <64 x float> %968, float %856, i64 14, !dbg !51
  %970 = insertelement <64 x float> %969, float %857, i64 15, !dbg !51
  %971 = insertelement <64 x float> %970, float %859, i64 16, !dbg !51
  %972 = insertelement <64 x float> %971, float %860, i64 17, !dbg !51
  %973 = insertelement <64 x float> %972, float %861, i64 18, !dbg !51
  %974 = insertelement <64 x float> %973, float %862, i64 19, !dbg !51
  %975 = insertelement <64 x float> %974, float %864, i64 20, !dbg !51
  %976 = insertelement <64 x float> %975, float %865, i64 21, !dbg !51
  %977 = insertelement <64 x float> %976, float %866, i64 22, !dbg !51
  %978 = insertelement <64 x float> %977, float %867, i64 23, !dbg !51
  %979 = insertelement <64 x float> %978, float %869, i64 24, !dbg !51
  %980 = insertelement <64 x float> %979, float %870, i64 25, !dbg !51
  %981 = insertelement <64 x float> %980, float %871, i64 26, !dbg !51
  %982 = insertelement <64 x float> %981, float %872, i64 27, !dbg !51
  %983 = insertelement <64 x float> %982, float %874, i64 28, !dbg !51
  %984 = insertelement <64 x float> %983, float %875, i64 29, !dbg !51
  %985 = insertelement <64 x float> %984, float %876, i64 30, !dbg !51
  %986 = insertelement <64 x float> %985, float %877, i64 31, !dbg !51
  %987 = insertelement <64 x float> %986, float %879, i64 32, !dbg !51
  %988 = insertelement <64 x float> %987, float %880, i64 33, !dbg !51
  %989 = insertelement <64 x float> %988, float %881, i64 34, !dbg !51
  %990 = insertelement <64 x float> %989, float %882, i64 35, !dbg !51
  %991 = insertelement <64 x float> %990, float %884, i64 36, !dbg !51
  %992 = insertelement <64 x float> %991, float %885, i64 37, !dbg !51
  %993 = insertelement <64 x float> %992, float %886, i64 38, !dbg !51
  %994 = insertelement <64 x float> %993, float %887, i64 39, !dbg !51
  %995 = insertelement <64 x float> %994, float %889, i64 40, !dbg !51
  %996 = insertelement <64 x float> %995, float %890, i64 41, !dbg !51
  %997 = insertelement <64 x float> %996, float %891, i64 42, !dbg !51
  %998 = insertelement <64 x float> %997, float %892, i64 43, !dbg !51
  %999 = insertelement <64 x float> %998, float %894, i64 44, !dbg !51
  %1000 = insertelement <64 x float> %999, float %895, i64 45, !dbg !51
  %1001 = insertelement <64 x float> %1000, float %896, i64 46, !dbg !51
  %1002 = insertelement <64 x float> %1001, float %897, i64 47, !dbg !51
  %1003 = insertelement <64 x float> %1002, float %899, i64 48, !dbg !51
  %1004 = insertelement <64 x float> %1003, float %900, i64 49, !dbg !51
  %1005 = insertelement <64 x float> %1004, float %901, i64 50, !dbg !51
  %1006 = insertelement <64 x float> %1005, float %902, i64 51, !dbg !51
  %1007 = insertelement <64 x float> %1006, float %904, i64 52, !dbg !51
  %1008 = insertelement <64 x float> %1007, float %905, i64 53, !dbg !51
  %1009 = insertelement <64 x float> %1008, float %906, i64 54, !dbg !51
  %1010 = insertelement <64 x float> %1009, float %907, i64 55, !dbg !51
  %1011 = insertelement <64 x float> %1010, float %909, i64 56, !dbg !51
  %1012 = insertelement <64 x float> %1011, float %910, i64 57, !dbg !51
  %1013 = insertelement <64 x float> %1012, float %911, i64 58, !dbg !51
  %1014 = insertelement <64 x float> %1013, float %912, i64 59, !dbg !51
  %1015 = insertelement <64 x float> %1014, float %914, i64 60, !dbg !51
  %1016 = insertelement <64 x float> %1015, float %915, i64 61, !dbg !51
  %1017 = insertelement <64 x float> %1016, float %916, i64 62, !dbg !51
  %1018 = insertelement <64 x float> %1017, float %917, i64 63, !dbg !51
  %1019 = fptrunc <64 x float> %1018 to <64 x half>, !dbg !51
  br label %._crit_edge, !dbg !52

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.lobit2.pre-phi = phi i32 [ %.pre653, %.._crit_edge_crit_edge ], [ %148, %._crit_edge.loopexit ], !dbg !27
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge_crit_edge ], [ %147, %._crit_edge.loopexit ], !dbg !27
  %1020 = phi <64 x half> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %1019, %._crit_edge.loopexit ]
  %1021 = shl i32 %25, 3, !dbg !52
  %1022 = and i32 %1021, 56, !dbg !52
  %1023 = or disjoint i32 %41, %1022, !dbg !31
  %1024 = and i32 %.pre-phi, 6, !dbg !27
  %1025 = or disjoint i32 %.lobit2.pre-phi, %1024, !dbg !27
  %1026 = lshr i32 %25, 3, !dbg !27
  %1027 = and i32 %1026, 8, !dbg !27
  %1028 = or disjoint i32 %1025, %1027, !dbg !27
  %1029 = or disjoint i32 %1028, %24, !dbg !28
  %1030 = or disjoint i32 %1029, 112, !dbg !28
  %1031 = or disjoint i32 %1029, 96, !dbg !28
  %1032 = or disjoint i32 %1029, 80, !dbg !28
  %1033 = or disjoint i32 %1029, 64, !dbg !28
  %1034 = or disjoint i32 %1029, 48, !dbg !28
  %1035 = or disjoint i32 %1029, 32, !dbg !28
  %1036 = or disjoint i32 %1029, 16, !dbg !28
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1037 = mul i32 %1029, %8, !dbg !53
  %1038 = mul i32 %1036, %8, !dbg !53
  %1039 = mul i32 %1035, %8, !dbg !53
  %1040 = mul i32 %1034, %8, !dbg !53
  %1041 = mul i32 %1033, %8, !dbg !53
  %1042 = mul i32 %1032, %8, !dbg !53
  %1043 = mul i32 %1031, %8, !dbg !53
  %1044 = mul i32 %1030, %8, !dbg !53
  %1045 = sext i32 %1037 to i64, !dbg !54
  %1046 = getelementptr half, ptr addrspace(1) %2, i64 %1045, !dbg !54
  %1047 = sext i32 %1038 to i64, !dbg !54
  %1048 = getelementptr half, ptr addrspace(1) %2, i64 %1047, !dbg !54
  %1049 = sext i32 %1039 to i64, !dbg !54
  %1050 = getelementptr half, ptr addrspace(1) %2, i64 %1049, !dbg !54
  %1051 = sext i32 %1040 to i64, !dbg !54
  %1052 = getelementptr half, ptr addrspace(1) %2, i64 %1051, !dbg !54
  %1053 = sext i32 %1041 to i64, !dbg !54
  %1054 = getelementptr half, ptr addrspace(1) %2, i64 %1053, !dbg !54
  %1055 = sext i32 %1042 to i64, !dbg !54
  %1056 = getelementptr half, ptr addrspace(1) %2, i64 %1055, !dbg !54
  %1057 = sext i32 %1043 to i64, !dbg !54
  %1058 = getelementptr half, ptr addrspace(1) %2, i64 %1057, !dbg !54
  %1059 = sext i32 %1044 to i64, !dbg !54
  %1060 = getelementptr half, ptr addrspace(1) %2, i64 %1059, !dbg !54
  %1061 = sext i32 %1023 to i64, !dbg !55
  %1062 = getelementptr half, ptr addrspace(1) %1046, i64 %1061, !dbg !55
  %1063 = getelementptr half, ptr addrspace(1) %1048, i64 %1061, !dbg !55
  %1064 = getelementptr half, ptr addrspace(1) %1050, i64 %1061, !dbg !55
  %1065 = getelementptr half, ptr addrspace(1) %1052, i64 %1061, !dbg !55
  %1066 = getelementptr half, ptr addrspace(1) %1054, i64 %1061, !dbg !55
  %1067 = getelementptr half, ptr addrspace(1) %1056, i64 %1061, !dbg !55
  %1068 = getelementptr half, ptr addrspace(1) %1058, i64 %1061, !dbg !55
  %1069 = getelementptr half, ptr addrspace(1) %1060, i64 %1061, !dbg !55
  %1070 = icmp slt i32 %1029, %3, !dbg !56
  %1071 = icmp slt i32 %1036, %3, !dbg !56
  %1072 = icmp slt i32 %1035, %3, !dbg !56
  %1073 = icmp slt i32 %1034, %3, !dbg !56
  %1074 = icmp slt i32 %1033, %3, !dbg !56
  %1075 = icmp slt i32 %1032, %3, !dbg !56
  %1076 = icmp slt i32 %1031, %3, !dbg !56
  %1077 = icmp slt i32 %1030, %3, !dbg !56
  %1078 = icmp slt i32 %1023, %4, !dbg !57
  %1079 = and i1 %1070, %1078, !dbg !58
  %1080 = and i1 %1071, %1078, !dbg !58
  %1081 = and i1 %1072, %1078, !dbg !58
  %1082 = and i1 %1073, %1078, !dbg !58
  %1083 = and i1 %1074, %1078, !dbg !58
  %1084 = and i1 %1075, %1078, !dbg !58
  %1085 = and i1 %1076, %1078, !dbg !58
  %1086 = and i1 %1077, %1078, !dbg !58
  %1087 = and i32 %27, 3, !dbg !59
  %1088 = lshr i32 %26, 2, !dbg !59
  %1089 = and i32 %84, 6, !dbg !59
  %1090 = shl nuw nsw i32 %1087, 4, !dbg !59
  %1091 = or disjoint i32 %1090, %1088, !dbg !59
  %1092 = mul nuw nsw i32 %1091, 72, !dbg !59
  %1093 = or disjoint i32 %1092, %1089, !dbg !59
  %1094 = zext nneg i32 %1093 to i64, !dbg !59
  %1095 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1094, !dbg !59
  %1096 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !59
  store <2 x half> %1096, ptr addrspace(3) %1095, align 4, !dbg !59
  %1097 = add nuw nsw i32 %1092, 576, !dbg !59
  %1098 = or disjoint i32 %1097, %1089, !dbg !59
  %1099 = zext nneg i32 %1098 to i64, !dbg !59
  %1100 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1099, !dbg !59
  %1101 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !59
  store <2 x half> %1101, ptr addrspace(3) %1100, align 4, !dbg !59
  %1102 = or disjoint i32 %1089, 8, !dbg !59
  %1103 = add nuw nsw i32 %1092, %1102, !dbg !59
  %1104 = zext nneg i32 %1103 to i64, !dbg !59
  %1105 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1104, !dbg !59
  %1106 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !59
  store <2 x half> %1106, ptr addrspace(3) %1105, align 4, !dbg !59
  %1107 = add nuw nsw i32 %1097, %1102, !dbg !59
  %1108 = zext nneg i32 %1107 to i64, !dbg !59
  %1109 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1108, !dbg !59
  %1110 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !59
  store <2 x half> %1110, ptr addrspace(3) %1109, align 4, !dbg !59
  %1111 = or disjoint i32 %1089, 16, !dbg !59
  %1112 = add nuw nsw i32 %1092, %1111, !dbg !59
  %1113 = zext nneg i32 %1112 to i64, !dbg !59
  %1114 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1113, !dbg !59
  %1115 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !59
  store <2 x half> %1115, ptr addrspace(3) %1114, align 4, !dbg !59
  %1116 = add nuw nsw i32 %1097, %1111, !dbg !59
  %1117 = zext nneg i32 %1116 to i64, !dbg !59
  %1118 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1117, !dbg !59
  %1119 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !59
  store <2 x half> %1119, ptr addrspace(3) %1118, align 4, !dbg !59
  %1120 = or disjoint i32 %1089, 24, !dbg !59
  %1121 = add nuw nsw i32 %1092, %1120, !dbg !59
  %1122 = zext nneg i32 %1121 to i64, !dbg !59
  %1123 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1122, !dbg !59
  %1124 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !59
  store <2 x half> %1124, ptr addrspace(3) %1123, align 4, !dbg !59
  %1125 = add nuw nsw i32 %1097, %1120, !dbg !59
  %1126 = zext nneg i32 %1125 to i64, !dbg !59
  %1127 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1126, !dbg !59
  %1128 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !59
  store <2 x half> %1128, ptr addrspace(3) %1127, align 4, !dbg !59
  %1129 = or disjoint i32 %1089, 32, !dbg !59
  %1130 = add nuw nsw i32 %1092, %1129, !dbg !59
  %1131 = zext nneg i32 %1130 to i64, !dbg !59
  %1132 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1131, !dbg !59
  %1133 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !59
  store <2 x half> %1133, ptr addrspace(3) %1132, align 4, !dbg !59
  %1134 = add nuw nsw i32 %1097, %1129, !dbg !59
  %1135 = zext nneg i32 %1134 to i64, !dbg !59
  %1136 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1135, !dbg !59
  %1137 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !59
  store <2 x half> %1137, ptr addrspace(3) %1136, align 4, !dbg !59
  %1138 = or disjoint i32 %1089, 40, !dbg !59
  %1139 = add nuw nsw i32 %1092, %1138, !dbg !59
  %1140 = zext nneg i32 %1139 to i64, !dbg !59
  %1141 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1140, !dbg !59
  %1142 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !59
  store <2 x half> %1142, ptr addrspace(3) %1141, align 4, !dbg !59
  %1143 = add nuw nsw i32 %1097, %1138, !dbg !59
  %1144 = zext nneg i32 %1143 to i64, !dbg !59
  %1145 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1144, !dbg !59
  %1146 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !59
  store <2 x half> %1146, ptr addrspace(3) %1145, align 4, !dbg !59
  %1147 = or disjoint i32 %1089, 48, !dbg !59
  %1148 = add nuw nsw i32 %1092, %1147, !dbg !59
  %1149 = zext nneg i32 %1148 to i64, !dbg !59
  %1150 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1149, !dbg !59
  %1151 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !59
  store <2 x half> %1151, ptr addrspace(3) %1150, align 4, !dbg !59
  %1152 = add nuw nsw i32 %1097, %1147, !dbg !59
  %1153 = zext nneg i32 %1152 to i64, !dbg !59
  %1154 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1153, !dbg !59
  %1155 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !59
  store <2 x half> %1155, ptr addrspace(3) %1154, align 4, !dbg !59
  %1156 = or disjoint i32 %1089, 56, !dbg !59
  %1157 = add nuw nsw i32 %1092, %1156, !dbg !59
  %1158 = zext nneg i32 %1157 to i64, !dbg !59
  %1159 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1158, !dbg !59
  %1160 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !59
  store <2 x half> %1160, ptr addrspace(3) %1159, align 4, !dbg !59
  %1161 = add nuw nsw i32 %1097, %1156, !dbg !59
  %1162 = zext nneg i32 %1161 to i64, !dbg !59
  %1163 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1162, !dbg !59
  %1164 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !59
  store <2 x half> %1164, ptr addrspace(3) %1163, align 4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %1165 = lshr i32 %26, 3, !dbg !59
  %1166 = shl nuw nsw i32 %1087, 2, !dbg !59
  %1167 = or disjoint i32 %1166, %1165, !dbg !59
  %1168 = mul nuw nsw i32 %1167, 72, !dbg !59
  %1169 = add nuw nsw i32 %1168, %1022, !dbg !59
  %1170 = zext nneg i32 %1169 to i64, !dbg !59
  %1171 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1170, !dbg !59
  %1172 = load <4 x i32>, ptr addrspace(3) %1171, align 16, !dbg !59
  %1173 = getelementptr i8, ptr addrspace(3) %1171, i64 2304, !dbg !59
  %1174 = load <4 x i32>, ptr addrspace(3) %1173, align 16, !dbg !59
  %1175 = getelementptr i8, ptr addrspace(3) %1171, i64 4608, !dbg !59
  %1176 = load <4 x i32>, ptr addrspace(3) %1175, align 16, !dbg !59
  %1177 = getelementptr i8, ptr addrspace(3) %1171, i64 6912, !dbg !59
  %1178 = load <4 x i32>, ptr addrspace(3) %1177, align 16, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %1179 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 32, i32 33>, !dbg !59
  store <2 x half> %1179, ptr addrspace(3) %1095, align 4, !dbg !59
  %1180 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 34, i32 35>, !dbg !59
  store <2 x half> %1180, ptr addrspace(3) %1100, align 4, !dbg !59
  %1181 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 36, i32 37>, !dbg !59
  store <2 x half> %1181, ptr addrspace(3) %1105, align 4, !dbg !59
  %1182 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 38, i32 39>, !dbg !59
  store <2 x half> %1182, ptr addrspace(3) %1109, align 4, !dbg !59
  %1183 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 40, i32 41>, !dbg !59
  store <2 x half> %1183, ptr addrspace(3) %1114, align 4, !dbg !59
  %1184 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 42, i32 43>, !dbg !59
  store <2 x half> %1184, ptr addrspace(3) %1118, align 4, !dbg !59
  %1185 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 44, i32 45>, !dbg !59
  store <2 x half> %1185, ptr addrspace(3) %1123, align 4, !dbg !59
  %1186 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 46, i32 47>, !dbg !59
  store <2 x half> %1186, ptr addrspace(3) %1127, align 4, !dbg !59
  %1187 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 48, i32 49>, !dbg !59
  store <2 x half> %1187, ptr addrspace(3) %1132, align 4, !dbg !59
  %1188 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 50, i32 51>, !dbg !59
  store <2 x half> %1188, ptr addrspace(3) %1136, align 4, !dbg !59
  %1189 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 52, i32 53>, !dbg !59
  store <2 x half> %1189, ptr addrspace(3) %1141, align 4, !dbg !59
  %1190 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 54, i32 55>, !dbg !59
  store <2 x half> %1190, ptr addrspace(3) %1145, align 4, !dbg !59
  %1191 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 56, i32 57>, !dbg !59
  store <2 x half> %1191, ptr addrspace(3) %1150, align 4, !dbg !59
  %1192 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 58, i32 59>, !dbg !59
  store <2 x half> %1192, ptr addrspace(3) %1154, align 4, !dbg !59
  %1193 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 60, i32 61>, !dbg !59
  store <2 x half> %1193, ptr addrspace(3) %1159, align 4, !dbg !59
  %1194 = shufflevector <64 x half> %1020, <64 x half> poison, <2 x i32> <i32 62, i32 63>, !dbg !59
  store <2 x half> %1194, ptr addrspace(3) %1163, align 4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %1195 = load <4 x i32>, ptr addrspace(3) %1171, align 16, !dbg !59
  %1196 = load <4 x i32>, ptr addrspace(3) %1173, align 16, !dbg !59
  %1197 = load <4 x i32>, ptr addrspace(3) %1175, align 16, !dbg !59
  %1198 = load <4 x i32>, ptr addrspace(3) %1177, align 16, !dbg !59
  %.extract = extractelement <4 x i32> %1172, i64 0, !dbg !59
  %.extract581 = extractelement <4 x i32> %1172, i64 1, !dbg !59
  %.extract583 = extractelement <4 x i32> %1172, i64 2, !dbg !59
  %.extract585 = extractelement <4 x i32> %1172, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract581, i32 %.extract583, i32 %.extract585, ptr addrspace(1) %1062, i1 %1079) #2, !dbg !59
  %.extract587 = extractelement <4 x i32> %1174, i64 0, !dbg !59
  %.extract589 = extractelement <4 x i32> %1174, i64 1, !dbg !59
  %.extract591 = extractelement <4 x i32> %1174, i64 2, !dbg !59
  %.extract593 = extractelement <4 x i32> %1174, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract587, i32 %.extract589, i32 %.extract591, i32 %.extract593, ptr addrspace(1) %1063, i1 %1080) #2, !dbg !59
  %.extract595 = extractelement <4 x i32> %1176, i64 0, !dbg !59
  %.extract597 = extractelement <4 x i32> %1176, i64 1, !dbg !59
  %.extract599 = extractelement <4 x i32> %1176, i64 2, !dbg !59
  %.extract601 = extractelement <4 x i32> %1176, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract595, i32 %.extract597, i32 %.extract599, i32 %.extract601, ptr addrspace(1) %1064, i1 %1081) #2, !dbg !59
  %.extract603 = extractelement <4 x i32> %1178, i64 0, !dbg !59
  %.extract605 = extractelement <4 x i32> %1178, i64 1, !dbg !59
  %.extract607 = extractelement <4 x i32> %1178, i64 2, !dbg !59
  %.extract609 = extractelement <4 x i32> %1178, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract603, i32 %.extract605, i32 %.extract607, i32 %.extract609, ptr addrspace(1) %1065, i1 %1082) #2, !dbg !59
  %.extract611 = extractelement <4 x i32> %1195, i64 0, !dbg !59
  %.extract613 = extractelement <4 x i32> %1195, i64 1, !dbg !59
  %.extract615 = extractelement <4 x i32> %1195, i64 2, !dbg !59
  %.extract617 = extractelement <4 x i32> %1195, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract611, i32 %.extract613, i32 %.extract615, i32 %.extract617, ptr addrspace(1) %1066, i1 %1083) #2, !dbg !59
  %.extract619 = extractelement <4 x i32> %1196, i64 0, !dbg !59
  %.extract621 = extractelement <4 x i32> %1196, i64 1, !dbg !59
  %.extract623 = extractelement <4 x i32> %1196, i64 2, !dbg !59
  %.extract625 = extractelement <4 x i32> %1196, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract619, i32 %.extract621, i32 %.extract623, i32 %.extract625, ptr addrspace(1) %1067, i1 %1084) #2, !dbg !59
  %.extract627 = extractelement <4 x i32> %1197, i64 0, !dbg !59
  %.extract629 = extractelement <4 x i32> %1197, i64 1, !dbg !59
  %.extract631 = extractelement <4 x i32> %1197, i64 2, !dbg !59
  %.extract633 = extractelement <4 x i32> %1197, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract627, i32 %.extract629, i32 %.extract631, i32 %.extract633, ptr addrspace(1) %1068, i1 %1085) #2, !dbg !59
  %.extract635 = extractelement <4 x i32> %1198, i64 0, !dbg !59
  %.extract637 = extractelement <4 x i32> %1198, i64 1, !dbg !59
  %.extract639 = extractelement <4 x i32> %1198, i64 2, !dbg !59
  %.extract641 = extractelement <4 x i32> %1198, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract635, i32 %.extract637, i32 %.extract639, i32 %.extract641, ptr addrspace(1) %1069, i1 %1086) #2, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matrix_multiplication.py", directory: "/data_ssd1/zjy_home/my_code/MLC-Learning/Triton/triton-examples/02.matrix-multiplication")
!4 = !{ptr @matmul_kernel, !"kernel", i32 1}
!5 = !{ptr @matmul_kernel, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !3, file: !3, line: 260, type: !8, scopeLine: 260, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 292, column: 24, scope: !7)
!11 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !7, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/data_ssd1/zjy_home/frameworks/cuda/triton/python/triton/language")
!14 = !DILocation(line: 293, column: 27, scope: !7)
!15 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !17)
!17 = !DILocation(line: 294, column: 27, scope: !7)
!18 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !17)
!19 = !DILocation(line: 295, column: 38, scope: !7)
!20 = !DILocation(line: 296, column: 22, scope: !7)
!21 = !DILocation(line: 297, column: 29, scope: !7)
!22 = !DILocation(line: 299, column: 20, scope: !7)
!23 = !DILocation(line: 299, column: 33, scope: !7)
!24 = !DILocation(line: 304, column: 40, scope: !7)
!25 = !DILocation(line: 302, column: 8, scope: !7)
!26 = !DILocation(line: 313, column: 23, scope: !7)
!27 = !DILocation(line: 313, column: 51, scope: !7)
!28 = !DILocation(line: 313, column: 38, scope: !7)
!29 = !DILocation(line: 313, column: 68, scope: !7)
!30 = !DILocation(line: 314, column: 23, scope: !7)
!31 = !DILocation(line: 314, column: 38, scope: !7)
!32 = !DILocation(line: 314, column: 68, scope: !7)
!33 = !DILocation(line: 316, column: 41, scope: !7)
!34 = !DILocation(line: 316, column: 60, scope: !7)
!35 = !DILocation(line: 316, column: 53, scope: !7)
!36 = !DILocation(line: 316, column: 22, scope: !7)
!37 = !DILocation(line: 318, column: 71, scope: !7)
!38 = !DILocation(line: 318, column: 52, scope: !7)
!39 = !DILocation(line: 318, column: 22, scope: !7)
!40 = !DILocation(line: 44, column: 22, scope: !12, inlinedAt: !41)
!41 = !DILocation(line: 327, column: 33, scope: !7)
!42 = !DILocation(line: 44, column: 28, scope: !12, inlinedAt: !41)
!43 = !DILocation(line: 330, column: 20, scope: !7)
!44 = !DILocation(line: 327, column: 22, scope: !7)
!45 = !DILocation(line: 330, column: 51, scope: !7)
!46 = !DILocation(line: 331, column: 20, scope: !7)
!47 = !DILocation(line: 335, column: 18, scope: !7)
!48 = !DILocation(line: 336, column: 18, scope: !7)
!49 = !DILocation(line: 330, column: 55, scope: !7)
!50 = !DILocation(line: 333, column: 35, scope: !7)
!51 = !DILocation(line: 341, column: 23, scope: !7)
!52 = !DILocation(line: 314, column: 51, scope: !7)
!53 = !DILocation(line: 347, column: 33, scope: !7)
!54 = !DILocation(line: 347, column: 21, scope: !7)
!55 = !DILocation(line: 347, column: 52, scope: !7)
!56 = !DILocation(line: 348, column: 33, scope: !7)
!57 = !DILocation(line: 348, column: 58, scope: !7)
!58 = !DILocation(line: 348, column: 39, scope: !7)
!59 = !DILocation(line: 349, column: 21, scope: !7)
!60 = !DILocation(line: 349, column: 4, scope: !7)
